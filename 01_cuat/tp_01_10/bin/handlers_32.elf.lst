     1                                  USE32
     2                                  
     3                                  %include "inc/functions_asm.h"
     1                              <1> ;----------------PIC----------------------------
     2                              <1> %define PORT_A_8042    0x60
     3                              <1> %define CTRL_PORT_8042 0x64
     4                              <1> %define KEYB_DIS       0xAD
     5                              <1> %define KEYB_EN        0xAE
     6                              <1> %define READ_OUT_8042  0xD0
     7                              <1> %define WRITE_OUT_8042 0xD1
     8                              <1> 
     4                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ;/* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ;/* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ;/* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ;/* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ;/* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ;/* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ;/* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ;/* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ;/* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ;/* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ;/* PaGine*/
    12                              <1> 
    13                              <1> ;------------DTP y TP(Descriptor de Tablas de Páginas y Tabla de Páginas) flags--------------------------
    14                              <1> PAG_PCD_YES  equ 1       ; cachable                          
    15                              <1> PAG_PCD_NO  equ 0       ; no cachable
    16                              <1> PAG_PWT_YES equ 1       ; 1 se escribe en cache y ram       
    17                              <1> PAG_PWT_NO  equ 0       ; 0 
    18                              <1> PAG_P_YES   equ 1       ; 1 presente
    19                              <1> PAG_P_NO    equ 0       ; 0 no presente
    20                              <1> PAG_RW_W    equ 1       ; 1 lectura y escritura
    21                              <1> PAG_RW_R    equ 0       ; 0 solo lectura
    22                              <1> PAG_US_SUP  equ 0       ; 0 supervisor
    23                              <1> PAG_US_US   equ 1       ; 1 usuario  
    24                              <1> PAG_D       equ 0       ; modificacion en la pagina
    25                              <1> PAG_PAT     equ 0       ; PAT                   
    26                              <1> PAG_G_YES   equ 0       ; Global                 
    27                              <1> PAG_A       equ 0       ; accedida
    28                              <1> PAG_PS_4K   equ 0       ; tamaño de pagina de 4KB
    29                              <1> 
     5                                  
     6                                  ;----------------EXTERN--------------------
     7                                  EXTERN DS_SEL_32
     8                                  EXTERN CS_SEL_32
     9                                  EXTERN __TECLADO_ISR_VMA
    10                                  EXTERN __VGA_VMA
    11                                  EXTERN __DIGITS_TABLE_INIT
    12                                  EXTERN __PAG_DINAMICA_INIT_PHY
    13                                  EXTERN determinar_tecla_presionada
    14                                  EXTERN memoria_buffer_reservada
    15                                  EXTERN contador_handler
    16                                  EXTERN contador_timer
    17                                  EXTERN dir_lineal_page_fault
    18                                  EXTERN dir_phy_dinamica
    19                                  EXTERN resultado_promedio
    20                                  EXTERN __DIGITS_TABLE_VMA
    21                                  EXTERN __PAG_DINAMICA_INIT_VMA
    22                                  EXTERN __PAGE_TABLES_PHY
    23                                  EXTERN error_code_PF
    24                                  EXTERN page_fault_msg
    25                                  EXTERN page_fault_msg_2
    26                                  EXTERN page_fault_msg_3
    27                                  EXTERN page_fault_msg_4
    28                                  EXTERN page_fault_msg_5
    29                                  EXTERN page_fault_msg_6
    30                                  EXTERN escribir_mensaje_VGA
    31                                  EXTERN limpiar_VGA
    32                                  EXTERN mostrar_numero32_VGA
    33                                  EXTERN set_page_table_entry
    34                                  EXTERN set_dir_page_table_entry
    35                                  ;----------------GLOBAL--------------------
    36                                  GLOBAL L_ISR00_Handler_DE
    37                                  GLOBAL L_ISR02_Handler_NMI
    38                                  GLOBAL L_ISR03_Handler_BP
    39                                  GLOBAL L_ISR04_Handler_OF
    40                                  GLOBAL L_ISR05_Handler_BR
    41                                  GLOBAL L_ISR06_Handler_UD
    42                                  GLOBAL L_ISR07_Handler_NM
    43                                  GLOBAL L_ISR08_Handler_DF
    44                                  GLOBAL L_ISR10_Handler_TS
    45                                  GLOBAL L_ISR11_Handler_NP
    46                                  GLOBAL L_ISR12_Handler_SS
    47                                  GLOBAL L_ISR13_Handler_GP
    48                                  GLOBAL L_ISR14_Handler_PF
    49                                  GLOBAL L_ISR16_Handler_MF
    50                                  GLOBAL L_ISR17_Handler_AC
    51                                  GLOBAL L_ISR18_Handler_MC
    52                                  GLOBAL L_ISR19_Handler_XM
    53                                  GLOBAL L_IRQ00_Handler
    54                                  GLOBAL L_IRQ01_Handler
    55                                  ;----------------EQU--------------------
    56                                  VMA_ISR_TECLADO     EQU 0x00100000
    57                                  ; Parte baja de las direcciones de los Handlers 
    58                                  L_ISR00_Handler_DE  EQU ISR00_Handler_DE    - VMA_ISR_TECLADO 
    59                                  L_ISR01_Handler_DB  EQU ISR01_Handler_DB    - VMA_ISR_TECLADO 
    60                                  L_ISR02_Handler_NMI EQU ISR02_Handler_NMI   - VMA_ISR_TECLADO 
    61                                  L_ISR03_Handler_BP  EQU ISR03_Handler_BP    - VMA_ISR_TECLADO 
    62                                  L_ISR04_Handler_OF  EQU ISR04_Handler_OF    - VMA_ISR_TECLADO 
    63                                  L_ISR05_Handler_BR  EQU ISR05_Handler_BR    - VMA_ISR_TECLADO 
    64                                  L_ISR06_Handler_UD  EQU ISR06_Handler_UD    - VMA_ISR_TECLADO 
    65                                  L_ISR07_Handler_NM  EQU ISR07_Handler_NM    - VMA_ISR_TECLADO 
    66                                  L_ISR08_Handler_DF  EQU ISR08_Handler_DF    - VMA_ISR_TECLADO   
    67                                  L_ISR10_Handler_TS  EQU ISR10_Handler_TS    - VMA_ISR_TECLADO 
    68                                  L_ISR11_Handler_NP  EQU ISR11_Handler_NP    - VMA_ISR_TECLADO 
    69                                  L_ISR12_Handler_SS  EQU ISR12_Handler_SS    - VMA_ISR_TECLADO 
    70                                  L_ISR13_Handler_GP  EQU ISR13_Handler_GP    - VMA_ISR_TECLADO 
    71                                  L_ISR14_Handler_PF  EQU ISR14_Handler_PF    - VMA_ISR_TECLADO 
    72                                  L_ISR16_Handler_MF  EQU ISR16_Handler_MF    - VMA_ISR_TECLADO 
    73                                  L_ISR17_Handler_AC  EQU ISR17_Handler_AC    - VMA_ISR_TECLADO 
    74                                  L_ISR18_Handler_MC  EQU ISR18_Handler_MC    - VMA_ISR_TECLADO 
    75                                  L_ISR19_Handler_XM  EQU ISR19_Handler_XM    - VMA_ISR_TECLADO 
    76                                  L_IRQ00_Handler     EQU IRQ00_Handler       - VMA_ISR_TECLADO
    77                                  L_IRQ01_Handler     EQU IRQ01_Handler       - VMA_ISR_TECLADO
    78                                  
    79                                  
    80                                  ;----------------SECTION-----------------------
    81                                  SECTION .teclado_and_ISR
    82                                  ;------------ HANDLER IRQ TIMER---------------------
    83                                  IRQ00_Handler:
    84 00000000 60                          pushad                                      ;Salvo los registros de uso general.
    85                                  
    86                                      ;xchg    bx, bx                              ; Breakpoint
    87                                      ;mov eax , [contador_timer]                  ; Si lo quiero hacer en asm... pero sin resetear variable. 
    88                                      ;inc eax
    89                                      ;mov [contador_timer], eax
    90                                  
    91 00000001 55                          push    ebp
    92 00000002 89E5                        mov     ebp, esp 
    93 00000004 68[00000000]                push contador_timer                         ; Contador del Timer actual              
    94 00000009 68[00000000]                push __DIGITS_TABLE_VMA                     ; Dir. de tabla de dígitos
    95 0000000E 68[00000000]                push resultado_promedio                     ; Resultado del prom. cada 500ms
    96 00000013 E8(00000000)                call contador_handler                       ; Cada 50 ticks (500ms) ejecuto la tarea 1.
    97 00000018 C9                          leave
    98                                  end_handler_timer:
    99 00000019 B020                        mov al, 0x20                                ; ACK de la IRQ para el PIC 
   100 0000001B E620                        out 0x20, al
   101 0000001D 61                          popad                                       ;Recupero registros
   102 0000001E CF                          iret                                        ;Retorno de la IRQ
   103                                  
   104                                  ;----------HANDLER IRQ TECLADO-----------------
   105                                  IRQ01_Handler:
   106 0000001F 60                          pushad                                      ; Guardo todos los registros  para asegurarme que no se rompa el estado actual.
   107 00000020 B221                        mov     dl,0x21                             ; Guardo la interrupcion en el registro DX
   108 00000022 31C0                        xor     eax, eax
   109                                      ; ->Leo el puerto
   110 00000024 E460                        in      al, PORT_A_8042                     ; Leo el puerto 0x60 (Keyboard Output Buffer Register)
   111 00000026 88C3                        mov     bl, al                              ; Copio lo leído en otro registro
   112 00000028 80E380                      and     bl, 0x80                            ; Hago un AND para obtener el bit 7 (BRK)
   113 0000002B 80FB80                      cmp     bl, 0x80                            ; Si el bit vale 0 la tecla fue presionada (Make), si es 1 se dejó de presionar (Break)
   114 0000002E 740E                        jz      end_handler_teclado                 ; Si se dejo de presionar, no la leo. Solo leo cuando se presionada (Make)
   115 00000030 68[00000000]                push    dword memoria_buffer_reservada      ; Buffer en VMA
   116 00000035 50                          push    eax                                 ; Tecla presionada.
   117 00000036 E8(00000000)                call determinar_tecla_presionada
   118 0000003B 83C408                      add     esp, 8
   119                                  
   120                                  end_handler_teclado:
   121                                      ;xchg    bx, bx                              ; Breakpoint
   122 0000003E B020                        mov     al, 0x20                             ; ACK de la IRQ para el PIC 
   123 00000040 E620                        out     0x20, al
   124 00000042 61                          popad                                        ; Recupero registros
   125 00000043 CF                          iret                                         ; Retorno de la IRQ
   126                                  
   127                                  ;-----------HANDLERs DE EXCEPTIONS-------------
   128                                  ;#DE (Divide Error)
   129                                  ISR00_Handler_DE:
   130 00000044 6687DB                      xchg    bx,bx
   131 00000047 B200                        mov     dl,0x00
   132 00000049 F4                          hlt
   133                                  
   134                                  ISR01_Handler_DB:
   135 0000004A 6687DB                      xchg    bx,bx
   136 0000004D B201                        mov dl,0x01
   137 0000004F F4                          hlt
   138                                  
   139                                  ISR02_Handler_NMI:
   140 00000050 6687DB                      xchg    bx,bx
   141 00000053 B202                        mov dl,0x02
   142 00000055 F4                          hlt
   143                                  
   144                                  ISR03_Handler_BP:
   145 00000056 6687DB                      xchg    bx,bx
   146 00000059 B203                        mov dl,0x03
   147 0000005B F4                          hlt
   148                                  
   149                                  ISR04_Handler_OF:
   150 0000005C 6687DB                      xchg    bx,bx
   151 0000005F B204                        mov dl,0x04
   152 00000061 F4                          hlt
   153                                  
   154                                  ISR05_Handler_BR:
   155 00000062 6687DB                      xchg    bx,bx
   156 00000065 B205                        mov dl,0x05
   157 00000067 F4                          hlt
   158                                  ;#UD (Invalid Opcode Fetch) 
   159                                  ISR06_Handler_UD:
   160 00000068 6687DB                      xchg    bx,bx
   161 0000006B B206                        mov     dl,0x06
   162 0000006D F4                          hlt
   163                                  
   164                                  ISR07_Handler_NM:
   165 0000006E 6687DB                      xchg    bx,bx
   166 00000071 B207                        mov dl,0x07
   167 00000073 F4                          hlt
   168                                  
   169                                  ISR08_Handler_DF:
   170 00000074 6687DB                      xchg    bx,bx
   171 00000077 B208                        mov dl,0x08
   172 00000079 F4                          hlt
   173                                  
   174                                  ISR10_Handler_TS:
   175 0000007A 6687DB                      xchg    bx,bx
   176 0000007D B20A                        mov dl,0x0A
   177 0000007F F4                          hlt
   178                                  
   179                                  ISR11_Handler_NP:
   180 00000080 6687DB                      xchg    bx,bx
   181 00000083 B20B                        mov dl,0x0B
   182 00000085 F4                          hlt
   183                                  
   184                                  ISR12_Handler_SS:
   185 00000086 6687DB                      xchg    bx,bx
   186 00000089 B20C                        mov dl,0x0C
   187 0000008B F4                          hlt
   188                                  ; Funciono al no tener el CS al retornar de un call
   189                                  ISR13_Handler_GP:
   190 0000008C 6687DB                      xchg    bx,bx
   191 0000008F B20D                        mov dl,0x0D
   192 00000091 CF                          iretd
   193                                  ;-----------------------------------
   194                                  ;----------Page Fault (#PF)---------
   195                                  ;-----------------------------------
   196                                  
   197                                  ;Error code
   198                                  ;The Page Fault sets an error code:
   199                                  ;
   200                                  ; 31              4               0
   201                                  ;+---+--  --+---+---+---+---+---+---+
   202                                  ;|   Reserved   | I | R | U | W | P |
   203                                  ;+---+--  --+---+---+---+---+---+---+
   204                                  ;Length	Name	Description
   205                                  ;P	1 bit	Present	When set, the page fault was caused by a page-protection violation. When not set, it was caused by a non-present page.
   206                                  ;W	1 bit	Write	When set, the page fault was caused by a write access. When not set, it was caused by a read access.
   207                                  ;U	1 bit	User	When set, the page fault was caused while CPL = 3. This does not necessarily mean that the page fault was a privilege violation.
   208                                  ;R	1 bit	Reserved write	When set, one or more page directory entries contain reserved bits which are set to 1. This only applies when the PSE or PAE flags in CR4 are set to 1.
   209                                  ;I	1 bit	Instruction Fetch	When set, the page fault was caused by an instruction fetch. This only applies when the No-Execute bit is supported and enabled.
   210                                  ISR14_Handler_PF:
   211 00000092 FA                          cli                                     ; Deshabilito interrupciones.
   212 00000093 60                          pushad                                  ; Guardo registros.
   213 00000094 8B5C2420                    mov     ebx, [esp + 32]                 ; Guardo el Error Code. 
   214 00000098 891D[00000000]              mov     [error_code_PF], ebx
   215 0000009E 0F20D0                      mov     eax, cr2
   216 000000A1 A3[00000000]                mov     [dir_lineal_page_fault], eax    ; Guardo dir. lineal VMA que falló
   217                                      ; -> Limpio pantalla.
   218 000000A6 55                          push    ebp
   219 000000A7 89E5                        mov     ebp, esp
   220 000000A9 68[00000000]                push    __VGA_VMA
   221 000000AE E8(00000000)                call    limpiar_VGA                     
   222 000000B3 C9                          leave
   223                                      ; -> Escribo mensaje de Page Fault.
   224 000000B4 55                          push    ebp
   225 000000B5 89E5                        mov     ebp, esp
   226 000000B7 6A01                        push    1       ; Es ASCII
   227 000000B9 6A0A                        push    10      ; Columna VGA
   228 000000BB 6A00                        push    0       ; Fila    VGA
   229 000000BD 68[00000000]                push    page_fault_msg
   230 000000C2 E8(00000000)                call    escribir_mensaje_VGA
   231 000000C7 C9                          leave
   232                                       ; -> Escribo mensaje "La dir VMA es"
   233 000000C8 55                          push    ebp
   234 000000C9 89E5                        mov     ebp, esp
   235 000000CB 6A01                        push    1       ; Es ASCII
   236 000000CD 6A0A                        push    10      ; Columna VGA
   237 000000CF 6A01                        push    1       ; Fila    VGA
   238 000000D1 68[00000000]                push    page_fault_msg_2
   239 000000D6 E8(00000000)                call    escribir_mensaje_VGA
   240 000000DB C9                          leave
   241                                      ; -> Muestro la dir VMA no mapeada en PHY
   242 000000DC 55                          push    ebp
   243 000000DD 89E5                        mov     ebp, esp
   244 000000DF 6A1E                        push    30      ; Columna VGA
   245 000000E1 6A01                        push    1       ; Fila VGA
   246 000000E3 FF35[00000000]              push    dword[dir_lineal_page_fault]
   247 000000E9 E8(00000000)                call    mostrar_numero32_VGA
   248 000000EE C9                          leave
   249                                      ; -> Muestro el mensaje "Error Code:"
   250 000000EF 55                          push    ebp
   251 000000F0 89E5                        mov     ebp, esp
   252 000000F2 6A0A                        push    10      ; Columna VGA
   253 000000F4 6A02                        push    2       ; Fila VGA
   254 000000F6 68[00000000]                push    page_fault_msg_3
   255 000000FB E8(00000000)                call    escribir_mensaje_VGA
   256 00000100 C9                          leave
   257                                      ; -> Muestro el valor del Error Code
   258 00000101 55                          push    ebp
   259 00000102 89E5                        mov     ebp, esp
   260 00000104 6A1E                        push    30      ; Columna VGA
   261 00000106 6A02                        push    2       ; Fila VGA
   262 00000108 FF35[00000000]              push    dword[error_code_PF]
   263 0000010E E8(00000000)                call    mostrar_numero32_VGA
   264 00000113 C9                          leave
   265                                  
   266                                      ;xchg    bx, bx 
   267                                      ; -> Analizo el Error Code
   268                                      ; Si es una Pagina no presente (Bit 0 = 0) debe repaginar.
   269 00000114 83E31F                      and ebx, 0x1F   ; Bits 0 - 5 donde tengo los flags.
   270 00000117 83FB00                      cmp ebx, 0x00
   271 0000011A 740A                        je pag_no_presente
   272 0000011C 83FB02                      cmp ebx, 0x02
   273 0000011F 7405                        je write_access
   274 00000121 E9D1000000                  jmp end_handler_PF
   275                                  pag_no_presente:
   276                                  write_access:
   277                                      ;xchg  bx, bx
   278                                      
   279                                      ; -> Limpio pantalla.
   280 00000126 55                          push    ebp
   281 00000127 89E5                        mov     ebp, esp
   282 00000129 68[00000000]                push    __VGA_VMA
   283 0000012E E8(00000000)                call    limpiar_VGA                     
   284 00000133 C9                          leave
   285                                      ; -> Escribo mensaje "Apago paginacion (bit 8 CR0)"
   286 00000134 55                          push    ebp
   287 00000135 89E5                        mov     ebp, esp
   288 00000137 6A01                        push    1       ; Es ASCII
   289 00000139 6A0A                        push    10      ; Columna VGA
   290 0000013B 6A01                        push    1       ; Fila    VGA
   291 0000013D 68[00000000]                push    page_fault_msg_4
   292 00000142 E8(00000000)                call    escribir_mensaje_VGA
   293 00000147 C9                          leave
   294                                  
   295                                      ;xchg  bx, bx
   296                                  
   297                                  
   298                                      ;---------------------------------------------------
   299                                      ; -> -----------Guardo VMA de falla y Dir. Fisica en acumuladores
   300                                      ;----------para poder re-paginar con la paginacion apagada-----------------
   301                                      ;---------------------------------------------------
   302                                      ; ->Guardo en edx la VMA de falla del CR2
   303 00000148 31D2                        xor   edx, edx
   304 0000014A 8B15[00000000]              mov   edx, [dir_lineal_page_fault] 
   305                                      ; ->Guardo en ecx la Dir. Fisica dinamica
   306 00000150 31C9                        xor   ecx, ecx
   307 00000152 8B0D[00000000]              mov   ecx, [dir_phy_dinamica] 
   308                                      ;---------------------------------------------------
   309                                      ; -> -----------Apago la paginación-----------------
   310                                      ;---------------------------------------------------
   311 00000158 31C0                        xor   eax, eax
   312 0000015A 0F20C0                      mov   eax, cr0 
   313 0000015D 25FFFFFF7F                  and   eax, 0x7FFFFFFF
   314 00000162 0F22C0                      mov   cr0, eax
   315                                      ; -> Debo realizar la paginación para la VMA que falló y 
   316                                      ; para la PHY 0x0A000000
   317                                      ; -> Cargo el PDE (Page Directory Entry)
   318                                  
   319 00000165 52                          push    edx
   320 00000166 51                          push    ecx
   321                                  
   322 00000167 55                          push    ebp
   323 00000168 89E5                        mov     ebp, esp
   324 0000016A 6A01                        push    PAG_P_YES                           ; Presente: Indica si la página está en la memoria (P=1), generando una excepción #PF cuando se intenta acceder a una dirección de memoria que tiene al menos un de
   325 0000016C 6A01                        push    PAG_RW_W                            ; Readable / Writable: Establece si la página es Read Only (0) o si puede ser escrita (1).
   326 0000016E 6A00                        push    PAG_US_SUP                          ; User / Supervisor: Privilegio de la P´agina: ’0’ Supervisor (Kernel), y ’1’ Usuario.
   327 00000170 6A00                        push    PAG_PWT_NO                          ; Page-Level Write Through. Establece el modo de escritura que tendrá la página en el Cache.
   328 00000172 6A00                        push    PAG_PCD_NO                          ; Page-Level Cache Disable. Establece que una página integre el tipo de memoria no cacheable.
   329 00000174 6A00                        push    PAG_A                               ; Accedido. Se setea cada vez que la página es accedida.
   330 00000176 6A00                        push    PAG_PS_4K                           ; Page Size: Existe solo en el DPT. Si es ’0’ la PDE corresponde a una PT de 4 Kbytes. Si es ’1’ a una página de 4Mbytes.
   331 00000178 52                          push    edx                                 ; Dir. Lineal(VMA) - Me va a dar la ubicación del PDE. 
   332 00000179 68[00000000]                push    dword __PAGE_TABLES_PHY             ; Dir. Fisica(PHY) - Base de la DPT.
   333 0000017E E8(00000000)                call    set_dir_page_table_entry
   334 00000183 C9                          leave
   335                                  
   336                                  
   337                                  
   338 00000184 59                          pop    ecx
   339 00000185 5A                          pop    edx
   340                                  
   341                                  
   342                                      ; -> Cargo la PTE (Page Table Entry)
   343                                      ; Ya tengo cargada la PT antes de arrancar la paginación en init32
   344 00000186 55                          push    ebp
   345 00000187 89E5                        mov     ebp, esp
   346 00000189 6A01                        push    PAG_P_YES
   347 0000018B 6A01                        push    PAG_RW_W
   348 0000018D 6A00                        push    PAG_US_SUP
   349 0000018F 6A00                        push    PAG_PWT_NO
   350 00000191 6A00                        push    PAG_PCD_NO
   351 00000193 6A00                        push    PAG_A
   352 00000195 6A00                        push    PAG_D
   353 00000197 6A00                        push    PAG_PAT
   354 00000199 6A00                        push    PAG_G_YES
   355                                      ;push    dword 0x0A000000           ; ARREGLAR COMENTARIOS. ACOMODARLOS EN ORDEN.
   356                                      ;push    dword 0x2345        ; Esta debe variar +4KB a medida que se van creando paginas.
   357 0000019B 51                          push    ecx
   358 0000019C 52                          push    edx                   ; Offset de 2*4 = 8 (en la pos 0x11008 de la tabla 0)
   359                                      ;push    dword [dir_lineal_page_fault]   ; Dir. Lineal VMA que trajo el CR2.
   360 0000019D 68[00000000]                push    dword __PAGE_TABLES_PHY         ; PT inicializada antes de activar paginación.
   361 000001A2 E8(00000000)                call    set_page_table_entry 
   362 000001A7 C9                          leave
   363                                  
   364                                      ;---------------------------------------------------
   365                                      ; -> -----------Prendo la paginación-----------------
   366                                      ;---------------------------------------------------
   367 000001A8 31C0                        xor   eax, eax
   368 000001AA 0F20C0                      mov   eax, cr0 
   369 000001AD 0D00000080                  or    eax, X86_CR0_PG
   370 000001B2 0F22C0                      mov   cr0, eax
   371                                  
   372                                      ;xchg    bx, bx 
   373                                  
   374                                      ; -> Limpio pantalla.
   375 000001B5 55                          push    ebp
   376 000001B6 89E5                        mov     ebp, esp
   377 000001B8 68[00000000]                push    __VGA_VMA
   378 000001BD E8(00000000)                call    limpiar_VGA                     
   379 000001C2 C9                          leave
   380                                      ; -> Escribo mensaje "PTE y PDE paginado OK."
   381 000001C3 55                          push    ebp
   382 000001C4 89E5                        mov     ebp, esp
   383 000001C6 6A01                        push    1       ; Es ASCII
   384 000001C8 6A00                        push    0      ; Columna VGA
   385 000001CA 6A01                        push    1       ; Fila    VGA
   386 000001CC 68[00000000]                push    page_fault_msg_6
   387 000001D1 E8(00000000)                call    escribir_mensaje_VGA
   388 000001D6 C9                          leave
   389                                  
   390                                      ;xchg    bx, bx  ; BREAK LUEGO DE PAGINAR EL DPT
   391                                  
   392                                      
   393                                  ; -> Analizo valor de la Dir. Fisica.
   394                                      ;xor     eax, eax
   395                                      ;mov     eax,[dir_phy_dinamica]
   396                                      ;and     eax, 0xFFFFF000                 ; 20 bits mas sig. poseen DIR_BASE_PAGE.
   397                                      ; -> Puedo paginar desde 0x1FFF8 a 0xA000 = 0x15FF8 -> 90.104 páginas de 4K.
   398                                      ; Lo limito en 90K páginas y luego las sobreescribo para no romper la memoria.
   399                                      ;cmp     eax, 0x15F90
   400                                      ;jle     resetear_dir_phy_dinamica    ;  0x01200025   dir_phy_dinamica
   401                                  
   402                                  
   403                                      ; -> Sumo 4K para mapear la próx. dir física.
   404 000001D7 31DB                        xor     ebx, ebx
   405 000001D9 8B1D[00000000]              mov     ebx, [dir_phy_dinamica]
   406 000001DF 81C300100000                add     ebx, 0x1000         ; Sumo 4k a la dir fisica
   407 000001E5 891D[00000000]              mov     [dir_phy_dinamica], ebx
   408                                  
   409 000001EB EB0A                        jmp     end_handler_PF                  ; Finalizo el handler #PF
   410                                  
   411                                  
   412                                  resetear_dir_phy_dinamica:
   413 000001ED C705[00000000]0000-         mov     dword[dir_phy_dinamica], 0x0A000000
   413 000001F5 000A               
   414                                  end_handler_PF:
   415                                     
   416                                      ; -> Limpio pantalla.
   417 000001F7 55                          push    ebp
   418 000001F8 89E5                        mov     ebp, esp
   419 000001FA 68[00000000]                push    __VGA_VMA
   420 000001FF E8(00000000)                call    limpiar_VGA                     
   421 00000204 C9                          leave
   422                                      ; -> Muestro el mensaje "Paginación exitosa."
   423 00000205 55                          push    ebp
   424 00000206 89E5                        mov     ebp, esp
   425 00000208 6A0A                        push    10      ; Columna VGA
   426 0000020A 6A02                        push    2       ; Fila VGA
   427 0000020C 68[00000000]                push    page_fault_msg_5
   428 00000211 E8(00000000)                call    escribir_mensaje_VGA
   429 00000216 C9                          leave
   430                                  
   431                                      ;xchg    bx, bx                          ; BREAK LUEGO DE PAGINAR.
   432                                  
   433                                  
   434                                      ; -> Finalizo la rutina del #PF
   435                                      ;mov al, 0x20                
   436                                      ;out 0x20, al                ; ACK al PIC
   437                                      ;mov edx,0x0E                ; Guardo en edx el valor de la excep. #PF
   438 00000217 61                          popad                       ; Tomo valores de registros guardados.
   439 00000218 58                          pop eax
   440 00000219 FB                          sti                         ; Habilito interrupciones.
   441 0000021A CF                          iret
   442                                  
   443                                  ISR15_Handler_RES:
   444 0000021B 6687DB                      xchg    bx,bx
   445 0000021E B20F                        mov dl,0x0F
   446 00000220 F4                          hlt
   447                                  
   448                                  ISR16_Handler_MF:
   449 00000221 6687DB                      xchg    bx,bx
   450 00000224 B210                        mov dl,0x10
   451 00000226 F4                          hlt
   452                                  
   453                                  ISR17_Handler_AC:
   454 00000227 6687DB                      xchg    bx,bx
   455 0000022A B211                        mov dl,0x11
   456 0000022C F4                          hlt
   457                                  
   458                                  ISR18_Handler_MC:
   459 0000022D 6687DB                      xchg    bx,bx
   460 00000230 B212                        mov dl,0x12
   461 00000232 F4                          hlt
   462                                  
   463                                  ISR19_Handler_XM:
   464 00000233 6687DB                      xchg    bx,bx
   465 00000236 B213                        mov dl,0x13
   466 00000238 F4                          hlt
