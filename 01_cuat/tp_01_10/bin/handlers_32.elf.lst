     1                                  USE32
     2                                  
     3                                  %include "inc/functions_asm.h"
     1                              <1> ;----------------PIC----------------------------
     2                              <1> %define PORT_A_8042    0x60
     3                              <1> %define CTRL_PORT_8042 0x64
     4                              <1> %define KEYB_DIS       0xAD
     5                              <1> %define KEYB_EN        0xAE
     6                              <1> %define READ_OUT_8042  0xD0
     7                              <1> %define WRITE_OUT_8042 0xD1
     8                              <1> 
     4                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ;/* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ;/* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ;/* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ;/* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ;/* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ;/* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ;/* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ;/* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ;/* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ;/* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ;/* PaGine*/
    12                              <1> 
    13                              <1> ;------------DTP y TP(Descriptor de Tablas de Páginas y Tabla de Páginas) flags--------------------------
    14                              <1> PAG_PCD_YES  equ 1       ; cachable                          
    15                              <1> PAG_PCD_NO  equ 0       ; no cachable
    16                              <1> PAG_PWT_YES equ 1       ; 1 se escribe en cache y ram       
    17                              <1> PAG_PWT_NO  equ 0       ; 0 
    18                              <1> PAG_P_YES   equ 1       ; 1 presente
    19                              <1> PAG_P_NO    equ 0       ; 0 no presente
    20                              <1> PAG_RW_W    equ 1       ; 1 lectura y escritura
    21                              <1> PAG_RW_R    equ 0       ; 0 solo lectura
    22                              <1> PAG_US_SUP  equ 0       ; 0 supervisor
    23                              <1> PAG_US_US   equ 1       ; 1 usuario  
    24                              <1> PAG_D       equ 0       ; modificacion en la pagina
    25                              <1> PAG_PAT     equ 0       ; PAT                   
    26                              <1> PAG_G_YES   equ 0       ; Global                 
    27                              <1> PAG_A       equ 0       ; accedida
    28                              <1> PAG_PS_4K   equ 0       ; tamaño de pagina de 4KB
    29                              <1> 
     5                                  
     6                                  ;----------------EXTERN--------------------
     7                                  EXTERN DS_SEL_32
     8                                  EXTERN CS_SEL_32
     9                                  EXTERN __TECLADO_ISR_VMA
    10                                  EXTERN __VGA_VMA
    11                                  EXTERN __DIGITS_TABLE_INIT
    12                                  EXTERN __PAG_DINAMICA_INIT_PHY
    13                                  EXTERN determinar_tecla_presionada
    14                                  EXTERN memoria_buffer_reservada
    15                                  EXTERN contador_handler
    16                                  EXTERN contador_timer
    17                                  EXTERN dir_lineal_page_fault
    18                                  EXTERN dir_phy_dinamica
    19                                  EXTERN resultado_promedio
    20                                  EXTERN __DIGITS_TABLE_VMA
    21                                  EXTERN __PAG_DINAMICA_INIT_VMA
    22                                  EXTERN __PAGE_TABLES_PHY
    23                                  EXTERN error_code_PF
    24                                  EXTERN paginas_creadas
    25                                  EXTERN page_fault_msg
    26                                  EXTERN page_fault_msg_2
    27                                  EXTERN page_fault_msg_3
    28                                  EXTERN page_fault_msg_4
    29                                  EXTERN page_fault_msg_5
    30                                  EXTERN page_fault_msg_6
    31                                  EXTERN escribir_mensaje_VGA
    32                                  EXTERN limpiar_VGA
    33                                  EXTERN mostrar_numero32_VGA
    34                                  EXTERN set_page_table_entry
    35                                  EXTERN set_dir_page_table_entry
    36                                  ;----------------GLOBAL--------------------
    37                                  GLOBAL L_ISR00_Handler_DE
    38                                  GLOBAL L_ISR02_Handler_NMI
    39                                  GLOBAL L_ISR03_Handler_BP
    40                                  GLOBAL L_ISR04_Handler_OF
    41                                  GLOBAL L_ISR05_Handler_BR
    42                                  GLOBAL L_ISR06_Handler_UD
    43                                  GLOBAL L_ISR07_Handler_NM
    44                                  GLOBAL L_ISR08_Handler_DF
    45                                  GLOBAL L_ISR10_Handler_TS
    46                                  GLOBAL L_ISR11_Handler_NP
    47                                  GLOBAL L_ISR12_Handler_SS
    48                                  GLOBAL L_ISR13_Handler_GP
    49                                  GLOBAL L_ISR14_Handler_PF
    50                                  GLOBAL L_ISR16_Handler_MF
    51                                  GLOBAL L_ISR17_Handler_AC
    52                                  GLOBAL L_ISR18_Handler_MC
    53                                  GLOBAL L_ISR19_Handler_XM
    54                                  GLOBAL L_IRQ00_Handler
    55                                  GLOBAL L_IRQ01_Handler
    56                                  ;----------------EQU--------------------
    57                                  VMA_ISR_TECLADO     EQU 0x00100000
    58                                  ; Parte baja de las direcciones de los Handlers 
    59                                  L_ISR00_Handler_DE  EQU ISR00_Handler_DE    - VMA_ISR_TECLADO 
    60                                  L_ISR01_Handler_DB  EQU ISR01_Handler_DB    - VMA_ISR_TECLADO 
    61                                  L_ISR02_Handler_NMI EQU ISR02_Handler_NMI   - VMA_ISR_TECLADO 
    62                                  L_ISR03_Handler_BP  EQU ISR03_Handler_BP    - VMA_ISR_TECLADO 
    63                                  L_ISR04_Handler_OF  EQU ISR04_Handler_OF    - VMA_ISR_TECLADO 
    64                                  L_ISR05_Handler_BR  EQU ISR05_Handler_BR    - VMA_ISR_TECLADO 
    65                                  L_ISR06_Handler_UD  EQU ISR06_Handler_UD    - VMA_ISR_TECLADO 
    66                                  L_ISR07_Handler_NM  EQU ISR07_Handler_NM    - VMA_ISR_TECLADO 
    67                                  L_ISR08_Handler_DF  EQU ISR08_Handler_DF    - VMA_ISR_TECLADO   
    68                                  L_ISR10_Handler_TS  EQU ISR10_Handler_TS    - VMA_ISR_TECLADO 
    69                                  L_ISR11_Handler_NP  EQU ISR11_Handler_NP    - VMA_ISR_TECLADO 
    70                                  L_ISR12_Handler_SS  EQU ISR12_Handler_SS    - VMA_ISR_TECLADO 
    71                                  L_ISR13_Handler_GP  EQU ISR13_Handler_GP    - VMA_ISR_TECLADO 
    72                                  L_ISR14_Handler_PF  EQU ISR14_Handler_PF    - VMA_ISR_TECLADO 
    73                                  L_ISR16_Handler_MF  EQU ISR16_Handler_MF    - VMA_ISR_TECLADO 
    74                                  L_ISR17_Handler_AC  EQU ISR17_Handler_AC    - VMA_ISR_TECLADO 
    75                                  L_ISR18_Handler_MC  EQU ISR18_Handler_MC    - VMA_ISR_TECLADO 
    76                                  L_ISR19_Handler_XM  EQU ISR19_Handler_XM    - VMA_ISR_TECLADO 
    77                                  L_IRQ00_Handler     EQU IRQ00_Handler       - VMA_ISR_TECLADO
    78                                  L_IRQ01_Handler     EQU IRQ01_Handler       - VMA_ISR_TECLADO
    79                                  
    80                                  
    81                                  ;----------------SECTION-----------------------
    82                                  SECTION .teclado_and_ISR
    83                                  ;------------ HANDLER IRQ TIMER---------------------
    84                                  IRQ00_Handler:
    85 00000000 60                          pushad                                      ;Salvo los registros de uso general.
    86                                  
    87                                      ;xchg    bx, bx                              ; Breakpoint
    88                                      ;mov eax , [contador_timer]                  ; Si lo quiero hacer en asm... pero sin resetear variable. 
    89                                      ;inc eax
    90                                      ;mov [contador_timer], eax
    91                                  
    92 00000001 55                          push    ebp
    93 00000002 89E5                        mov     ebp, esp 
    94 00000004 68[00000000]                push contador_timer                         ; Contador del Timer actual              
    95 00000009 68[00000000]                push __DIGITS_TABLE_VMA                     ; Dir. de tabla de dígitos
    96 0000000E 68[00000000]                push resultado_promedio                     ; Resultado del prom. cada 500ms
    97 00000013 E8(00000000)                call contador_handler                       ; Cada 50 ticks (500ms) ejecuto la tarea 1.
    98 00000018 C9                          leave
    99                                  end_handler_timer:
   100 00000019 B020                        mov al, 0x20                                ; ACK de la IRQ para el PIC 
   101 0000001B E620                        out 0x20, al
   102 0000001D 61                          popad                                       ;Recupero registros
   103 0000001E CF                          iret                                        ;Retorno de la IRQ
   104                                  
   105                                  ;----------HANDLER IRQ TECLADO-----------------
   106                                  IRQ01_Handler:
   107 0000001F 60                          pushad                                      ; Guardo todos los registros  para asegurarme que no se rompa el estado actual.
   108 00000020 B221                        mov     dl,0x21                             ; Guardo la interrupcion en el registro DX
   109 00000022 31C0                        xor     eax, eax
   110                                      ; ->Leo el puerto
   111 00000024 E460                        in      al, PORT_A_8042                     ; Leo el puerto 0x60 (Keyboard Output Buffer Register)
   112 00000026 88C3                        mov     bl, al                              ; Copio lo leído en otro registro
   113 00000028 80E380                      and     bl, 0x80                            ; Hago un AND para obtener el bit 7 (BRK)
   114 0000002B 80FB80                      cmp     bl, 0x80                            ; Si el bit vale 0 la tecla fue presionada (Make), si es 1 se dejó de presionar (Break)
   115 0000002E 740E                        jz      end_handler_teclado                 ; Si se dejo de presionar, no la leo. Solo leo cuando se presionada (Make)
   116 00000030 68[00000000]                push    dword memoria_buffer_reservada      ; Buffer en VMA
   117 00000035 50                          push    eax                                 ; Tecla presionada.
   118 00000036 E8(00000000)                call determinar_tecla_presionada
   119 0000003B 83C408                      add     esp, 8
   120                                  
   121                                  end_handler_teclado:
   122                                      ;xchg    bx, bx                              ; Breakpoint
   123 0000003E B020                        mov     al, 0x20                             ; ACK de la IRQ para el PIC 
   124 00000040 E620                        out     0x20, al
   125 00000042 61                          popad                                        ; Recupero registros
   126 00000043 CF                          iret                                         ; Retorno de la IRQ
   127                                  
   128                                  ;-----------HANDLERs DE EXCEPTIONS-------------
   129                                  ;#DE (Divide Error)
   130                                  ISR00_Handler_DE:
   131 00000044 6687DB                      xchg    bx,bx
   132 00000047 B200                        mov     dl,0x00
   133 00000049 F4                          hlt
   134                                  
   135                                  ISR01_Handler_DB:
   136 0000004A 6687DB                      xchg    bx,bx
   137 0000004D B201                        mov dl,0x01
   138 0000004F F4                          hlt
   139                                  
   140                                  ISR02_Handler_NMI:
   141 00000050 6687DB                      xchg    bx,bx
   142 00000053 B202                        mov dl,0x02
   143 00000055 F4                          hlt
   144                                  
   145                                  ISR03_Handler_BP:
   146 00000056 6687DB                      xchg    bx,bx
   147 00000059 B203                        mov dl,0x03
   148 0000005B F4                          hlt
   149                                  
   150                                  ISR04_Handler_OF:
   151 0000005C 6687DB                      xchg    bx,bx
   152 0000005F B204                        mov dl,0x04
   153 00000061 F4                          hlt
   154                                  
   155                                  ISR05_Handler_BR:
   156 00000062 6687DB                      xchg    bx,bx
   157 00000065 B205                        mov dl,0x05
   158 00000067 F4                          hlt
   159                                  ;#UD (Invalid Opcode Fetch) 
   160                                  ISR06_Handler_UD:
   161 00000068 6687DB                      xchg    bx,bx
   162 0000006B B206                        mov     dl,0x06
   163 0000006D F4                          hlt
   164                                  
   165                                  ISR07_Handler_NM:
   166 0000006E 6687DB                      xchg    bx,bx
   167 00000071 B207                        mov dl,0x07
   168 00000073 F4                          hlt
   169                                  
   170                                  ISR08_Handler_DF:
   171 00000074 6687DB                      xchg    bx,bx
   172 00000077 B208                        mov dl,0x08
   173 00000079 F4                          hlt
   174                                  
   175                                  ISR10_Handler_TS:
   176 0000007A 6687DB                      xchg    bx,bx
   177 0000007D B20A                        mov dl,0x0A
   178 0000007F F4                          hlt
   179                                  
   180                                  ISR11_Handler_NP:
   181 00000080 6687DB                      xchg    bx,bx
   182 00000083 B20B                        mov dl,0x0B
   183 00000085 F4                          hlt
   184                                  
   185                                  ISR12_Handler_SS:
   186 00000086 6687DB                      xchg    bx,bx
   187 00000089 B20C                        mov dl,0x0C
   188 0000008B F4                          hlt
   189                                  ; Funciono al no tener el CS al retornar de un call
   190                                  ISR13_Handler_GP:
   191 0000008C 6687DB                      xchg    bx,bx
   192 0000008F B20D                        mov dl,0x0D
   193 00000091 CF                          iretd
   194                                  ;-----------------------------------
   195                                  ;----------Page Fault (#PF)---------
   196                                  ;-----------------------------------
   197                                  
   198                                  ;Error code
   199                                  ;The Page Fault sets an error code:
   200                                  ;
   201                                  ; 31              4               0
   202                                  ;+---+--  --+---+---+---+---+---+---+
   203                                  ;|   Reserved   | I | R | U | W | P |
   204                                  ;+---+--  --+---+---+---+---+---+---+
   205                                  ;Length	Name	Description
   206                                  ;P	1 bit	Present	When set, the page fault was caused by a page-protection violation. When not set, it was caused by a non-present page.
   207                                  ;W	1 bit	Write	When set, the page fault was caused by a write access. When not set, it was caused by a read access.
   208                                  ;U	1 bit	User	When set, the page fault was caused while CPL = 3. This does not necessarily mean that the page fault was a privilege violation.
   209                                  ;R	1 bit	Reserved write	When set, one or more page directory entries contain reserved bits which are set to 1. This only applies when the PSE or PAE flags in CR4 are set to 1.
   210                                  ;I	1 bit	Instruction Fetch	When set, the page fault was caused by an instruction fetch. This only applies when the No-Execute bit is supported and enabled.
   211                                  ISR14_Handler_PF:
   212 00000092 FA                          cli                                     ; Deshabilito interrupciones.
   213 00000093 60                          pushad                                  ; Guardo registros.
   214 00000094 8B5C2420                    mov     ebx, [esp + 32]                 ; Guardo el Error Code. 
   215 00000098 891D[00000000]              mov     [error_code_PF], ebx
   216 0000009E 0F20D0                      mov     eax, cr2
   217 000000A1 A3[00000000]                mov     [dir_lineal_page_fault], eax    ; Guardo dir. lineal VMA que falló
   218                                      ; -> Limpio pantalla.
   219 000000A6 55                          push    ebp
   220 000000A7 89E5                        mov     ebp, esp
   221 000000A9 68[00000000]                push    __VGA_VMA
   222 000000AE E8(00000000)                call    limpiar_VGA                     
   223 000000B3 C9                          leave
   224                                      ; -> Escribo mensaje de Page Fault.
   225 000000B4 55                          push    ebp
   226 000000B5 89E5                        mov     ebp, esp
   227 000000B7 6A01                        push    1       ; Es ASCII
   228 000000B9 6A0A                        push    10      ; Columna VGA
   229 000000BB 6A00                        push    0       ; Fila    VGA
   230 000000BD 68[00000000]                push    page_fault_msg
   231 000000C2 E8(00000000)                call    escribir_mensaje_VGA
   232 000000C7 C9                          leave
   233                                       ; -> Escribo mensaje "La dir VMA es"
   234 000000C8 55                          push    ebp
   235 000000C9 89E5                        mov     ebp, esp
   236 000000CB 6A01                        push    1       ; Es ASCII
   237 000000CD 6A0A                        push    10      ; Columna VGA
   238 000000CF 6A01                        push    1       ; Fila    VGA
   239 000000D1 68[00000000]                push    page_fault_msg_2
   240 000000D6 E8(00000000)                call    escribir_mensaje_VGA
   241 000000DB C9                          leave
   242                                      ; -> Muestro la dir VMA no mapeada en PHY
   243 000000DC 55                          push    ebp
   244 000000DD 89E5                        mov     ebp, esp
   245 000000DF 6A1E                        push    30      ; Columna VGA
   246 000000E1 6A01                        push    1       ; Fila VGA
   247 000000E3 FF35[00000000]              push    dword[dir_lineal_page_fault]
   248 000000E9 E8(00000000)                call    mostrar_numero32_VGA
   249 000000EE C9                          leave
   250                                      ; -> Muestro el mensaje "Error Code:"
   251 000000EF 55                          push    ebp
   252 000000F0 89E5                        mov     ebp, esp
   253 000000F2 6A0A                        push    10      ; Columna VGA
   254 000000F4 6A02                        push    2       ; Fila VGA
   255 000000F6 68[00000000]                push    page_fault_msg_3
   256 000000FB E8(00000000)                call    escribir_mensaje_VGA
   257 00000100 C9                          leave
   258                                      ; -> Muestro el valor del Error Code
   259 00000101 55                          push    ebp
   260 00000102 89E5                        mov     ebp, esp
   261 00000104 6A1E                        push    30      ; Columna VGA
   262 00000106 6A02                        push    2       ; Fila VGA
   263 00000108 FF35[00000000]              push    dword[error_code_PF]
   264 0000010E E8(00000000)                call    mostrar_numero32_VGA
   265 00000113 C9                          leave
   266                                  
   267                                      ;xchg    bx, bx 
   268                                      ; -> Analizo el Error Code
   269                                      ; Si es una Pagina no presente (Bit 0 = 0) debe repaginar.
   270 00000114 83E31F                      and ebx, 0x1F   ; Bits 0 - 5 donde tengo los flags.
   271 00000117 83FB00                      cmp ebx, 0x00
   272 0000011A 740A                        je pag_no_presente
   273 0000011C 83FB02                      cmp ebx, 0x02
   274 0000011F 7405                        je write_access
   275 00000121 E9D1000000                  jmp end_handler_PF
   276                                  pag_no_presente:
   277                                  write_access:
   278                                      ;xchg  bx, bx
   279                                  
   280                                      ;---------------------------------------------------
   281                                      ; -> -----------Guardo VMA de falla y Dir. Fisica en GPRs
   282                                      ;----------para poder re-paginar con la paginacion apagada-----------------
   283                                      ;---------------------------------------------------
   284                                      ; ->Guardo en edx la VMA de falla del CR2
   285 00000126 31D2                        xor   edx, edx
   286 00000128 8B15[00000000]              mov   edx, [dir_lineal_page_fault] 
   287                                      ; ->Guardo en ecx la Dir. Fisica dinamica
   288 0000012E 31C9                        xor   ecx, ecx
   289 00000130 8B0D[00000000]              mov   ecx, [dir_phy_dinamica] 
   290                                      ;---------------------------------------------------
   291                                      ; -> -----------Apago la paginación-----------------
   292                                      ;---------------------------------------------------
   293 00000136 31C0                        xor   eax, eax
   294 00000138 0F20C0                      mov   eax, cr0 
   295 0000013B 25FFFFFF7F                  and   eax, 0x7FFFFFFF
   296 00000140 0F22C0                      mov   cr0, eax
   297                                      ; -> Debo realizar la paginación para la VMA que falló y 
   298                                      ; para la PHY 0x0A000000
   299                                      ; -> Cargo el PDE (Page Directory Entry) - De no existir, lo crea.
   300 00000143 52                          push    edx                                 ; Guardo edx (VMA de falla del CR2)
   301 00000144 51                          push    ecx                                 ; Guardo ecx (Dir. Fisica dinamica)
   302                                  
   303 00000145 55                          push    ebp
   304 00000146 89E5                        mov     ebp, esp
   305 00000148 6A01                        push    PAG_P_YES                           ; Presente: Indica si la página está en la memoria (P=1), generando una excepción #PF cuando se intenta acceder a una dirección de memoria que tiene al menos un de
   306 0000014A 6A01                        push    PAG_RW_W                            ; Readable / Writable: Establece si la página es Read Only (0) o si puede ser escrita (1).
   307 0000014C 6A00                        push    PAG_US_SUP                          ; User / Supervisor: Privilegio de la P´agina: ’0’ Supervisor (Kernel), y ’1’ Usuario.
   308 0000014E 6A00                        push    PAG_PWT_NO                          ; Page-Level Write Through. Establece el modo de escritura que tendrá la página en el Cache.
   309 00000150 6A00                        push    PAG_PCD_NO                          ; Page-Level Cache Disable. Establece que una página integre el tipo de memoria no cacheable.
   310 00000152 6A00                        push    PAG_A                               ; Accedido. Se setea cada vez que la página es accedida.
   311 00000154 6A00                        push    PAG_PS_4K                           ; Page Size: Existe solo en el DPT. Si es ’0’ la PDE corresponde a una PT de 4 Kbytes. Si es ’1’ a una página de 4Mbytes.
   312 00000156 52                          push    edx                                 ; Dir. Lineal VMA que produjo el #PF y traje del CR2. 
   313 00000157 68[00000000]                push    dword __PAGE_TABLES_PHY             ; Dir. Fisica(PHY) - Base de la DPT.
   314 0000015C E8(00000000)                call    set_dir_page_table_entry
   315 00000161 C9                          leave
   316                                  
   317 00000162 59                          pop    ecx                                  ; Leo ecx
   318 00000163 5A                          pop    edx                                  ; Leo edx
   319                                  
   320                                      ; -> Cargo la PTE (Page Table Entry)
   321 00000164 55                          push    ebp
   322 00000165 89E5                        mov     ebp, esp
   323 00000167 6A01                        push    PAG_P_YES
   324 00000169 6A01                        push    PAG_RW_W
   325 0000016B 6A00                        push    PAG_US_SUP
   326 0000016D 6A00                        push    PAG_PWT_NO
   327 0000016F 6A00                        push    PAG_PCD_NO
   328 00000171 6A00                        push    PAG_A
   329 00000173 6A00                        push    PAG_D
   330 00000175 6A00                        push    PAG_PAT
   331 00000177 6A00                        push    PAG_G_YES
   332 00000179 51                          push    ecx                             ; Dir física dinámica ( se va sumando de a 4K para nuevas páginas)
   333 0000017A 52                          push    edx                             ; Dir. Lineal VMA que produjo el #PF y traje del CR2.
   334 0000017B 68[00000000]                push    dword __PAGE_TABLES_PHY         ; PT inicializada antes de activar paginación.
   335 00000180 E8(00000000)                call    set_page_table_entry 
   336 00000185 C9                          leave
   337                                  
   338                                      ;---------------------------------------------------
   339                                      ; -> -----------Prendo la paginación-----------------
   340                                      ;---------------------------------------------------
   341 00000186 31C0                        xor   eax, eax
   342 00000188 0F20C0                      mov   eax, cr0 
   343 0000018B 0D00000080                  or    eax, X86_CR0_PG
   344 00000190 0F22C0                      mov   cr0, eax
   345                                  
   346                                      ;xchg    bx, bx 
   347                                      
   348                                      ; -> Analizo valor de la Dir. Fisica.
   349                                      ;xor     eax, eax
   350                                      ;mov     eax,[dir_phy_dinamica]
   351                                      ;and     eax, 0xFFFFF000                 ; 20 bits mas sig. poseen DIR_BASE_PAGE.
   352                                      ; -> Puedo paginar desde 0x1FFF8 a 0xA000 = 0x15FF8 -> 90.104 páginas de 4K.
   353                                      ; Lo limito en 90K páginas y luego las sobreescribo para no romper la memoria.
   354                                      ;cmp     eax, 0x15F90
   355                                      ;jle     resetear_dir_phy_dinamica    ;  0x01200025   dir_phy_dinamica
   356                                  
   357                                  
   358                                      ; -> Sumo 4K para mapear la próx. dir física.
   359 00000193 31DB                        xor     ebx, ebx
   360 00000195 8B1D[00000000]              mov     ebx, [dir_phy_dinamica]
   361 0000019B 81C300100000                add     ebx, 0x1000                     ; Sumo 4k a la dir fisica
   362 000001A1 891D[00000000]              mov     [dir_phy_dinamica], ebx
   363                                      ; -> Sumo al contador de páginas de 4K creadas
   364 000001A7 31DB                        xor     ebx, ebx
   365 000001A9 8B1D[00000000]              mov     ebx, [paginas_creadas]
   366 000001AF 83C301                      add     ebx, 0x01
   367 000001B2 891D[00000000]              mov     [paginas_creadas], ebx
   368                                      ; -> Limpio pantalla.
   369 000001B8 55                          push    ebp
   370 000001B9 89E5                        mov     ebp, esp
   371 000001BB 68[00000000]                push    __VGA_VMA
   372 000001C0 E8(00000000)                call    limpiar_VGA                     
   373 000001C5 C9                          leave
   374                                      ; -> Muestro el mensaje "Cantidad de paginas de 4k creadas: ."
   375 000001C6 55                          push    ebp
   376 000001C7 89E5                        mov     ebp, esp
   377 000001C9 6A2C                        push    44      ; Columna VGA
   378 000001CB 6A0C                        push    12       ; Fila VGA
   379 000001CD 68[00000000]                push    page_fault_msg_6
   380 000001D2 E8(00000000)                call    escribir_mensaje_VGA
   381 000001D7 C9                          leave
   382                                       ; -> Muestro el valor de la cantidad de págs. creadas
   383 000001D8 55                          push    ebp
   384 000001D9 89E5                        mov     ebp, esp
   385 000001DB 6A4F                        push    79      ; Columna VGA
   386 000001DD 6A0D                        push    13       ; Fila VGA
   387 000001DF FF35[00000000]              push    dword[paginas_creadas]
   388 000001E5 E8(00000000)                call    mostrar_numero32_VGA
   389 000001EA C9                          leave
   390                                  
   391 000001EB EB0A                        jmp     end_handler_PF                  ; Finalizo el handler #PF
   392                                  
   393                                  
   394                                  resetear_dir_phy_dinamica:
   395 000001ED C705[00000000]0000-         mov     dword[dir_phy_dinamica], 0x0A000000
   395 000001F5 000A               
   396                                  end_handler_PF:
   397                                     
   398                                      ;xchg    bx, bx                          ; BREAK LUEGO DE PAGINAR.
   399                                  
   400 000001F7 61                          popad                       ; Tomo valores de registros guardados.
   401 000001F8 58                          pop eax                     ; Porque me queda un valor para ser popeado y poder retornar con CS:DIR LINEAL al punto donde se produjo el #PF
   402 000001F9 FB                          sti                         ; Habilito interrupciones.
   403 000001FA CF                          iret
   404                                  
   405                                  ISR15_Handler_RES:
   406 000001FB 6687DB                      xchg    bx,bx
   407 000001FE B20F                        mov dl,0x0F
   408 00000200 F4                          hlt
   409                                  
   410                                  ISR16_Handler_MF:
   411 00000201 6687DB                      xchg    bx,bx
   412 00000204 B210                        mov dl,0x10
   413 00000206 F4                          hlt
   414                                  
   415                                  ISR17_Handler_AC:
   416 00000207 6687DB                      xchg    bx,bx
   417 0000020A B211                        mov dl,0x11
   418 0000020C F4                          hlt
   419                                  
   420                                  ISR18_Handler_MC:
   421 0000020D 6687DB                      xchg    bx,bx
   422 00000210 B212                        mov dl,0x12
   423 00000212 F4                          hlt
   424                                  
   425                                  ISR19_Handler_XM:
   426 00000213 6687DB                      xchg    bx,bx
   427 00000216 B213                        mov dl,0x13
   428 00000218 F4                          hlt
