
Memory Configuration

Name             Origin             Length             Attributes
ram              0x0000000000000000 0x00000000ffff0000 !x
rom              0x00000000ffff0000 0x0000000000010000 xr
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

                0x0000000000060000                __EH_FRAME = 0x60000
                0x0000000000009000                __STACK_START_16 = 0x9000
                0x0000000000009fff                __STACK_END_16 = 0x9fff
                0x00000000000003ff                __STACK_SIZE_32 = ((__STACK_END_32_VMA - __STACK_START_32_VMA) / 0x4)
                0x00000000000003ff                __TAREA1_STACK_SIZE = ((__TAREA1_STACK_END_VMA - __TAREA1_STACK_START_VMA) / 0x4)
                0x0000000000000000                __SYS_TABLES_PHY = 0x0
                0x0000000000010000                __PAGE_TABLES_PHY = 0x10000
                0x0000000000050000                __FUNCTIONS_PHY = 0x50000
                0x00000000000b8000                __VGA_PHY = 0xb8000
                0x0000000000100000                __TECLADO_ISR_PHY = 0x100000
                0x0000000000200000                __DATOS_SYS32_PHY = 0x200000
                0x0000000000210000                __DIGITS_TABLE_PHY = 0x210000
                0x0000000000220000                __KERNEL_32_PHY = 0x220000
                0x0000000000310000                __TAREA1_TEXT_PHY = 0x310000
                0x0000000000320000                __TAREA1_BSS_PHY = 0x320000
                0x0000000000330000                __TAREA1_DATA_PHY = 0x330000
                0x0000000000340000                __TAREA1_RODATA_PHY = 0x340000
                0x000000001fff8000                __STACK_START_32_PHY = 0x1fff8000
                0x000000001fff8fff                __STACK_END_32_PHY = 0x1fff8fff
                0x000000001ffff000                __TAREA1_STACK_START_PHY = 0x1ffff000
                0x000000001fffffff                __TAREA1_STACK_END_PHY = 0x1fffffff
                0x0000000000000000                __SYS_TABLES_VMA = 0x0
                0x0000000000010000                __PAGE_TABLES_VMA = 0x10000
                0x0000000000050000                __FUNCTIONS_VMA = 0x50000
                0x0000000000e80000                __VGA_VMA = 0xe80000
                0x0000000000100000                __TECLADO_ISR_VMA = 0x100000
                0x0000000001200000                __DATOS_SYS32_VMA = 0x1200000
                0x0000000001210000                __DIGITS_TABLE_VMA = 0x1210000
                0x0000000001220000                __KERNEL_32_VMA = 0x1220000
                0x0000000001310000                __TAREA1_TEXT_VMA = 0x1310000
                0x0000000001320000                __TAREA1_BSS_VMA = 0x1320000
                0x0000000001330000                __TAREA1_DATA_VMA = 0x1330000
                0x0000000001340000                __TAREA1_RODATA_VMA = 0x1340000
                0x000000001fff8000                __STACK_START_32_VMA = 0x1fff8000
                0x000000001fff8fff                __STACK_END_32_VMA = 0x1fff8fff
                0x000000000078f000                __TAREA1_STACK_START_VMA = 0x78f000
                0x000000000078ffff                __TAREA1_STACK_END_VMA = 0x78ffff
                0x00000000ffff0000                __INIT_ROM_VMA = 0xffff0000
                0x00000000fffffff0                __RESET_VMA = 0xfffffff0
                0x00000000ffff0000                __INIT_ROM_VMA = __INIT_ROM_LMA
                0x00000000ffff8000                __INIT_16_VMA = __INIT_16_LMA
                0x00000000ffff8069                __VGA_INIT_VMA = __VGA_INIT_LMA
                0x00000000ffff938b                __INIT_32_VMA = __INIT_32_LMA
                0x00000000ffff9984                __FUNCTIONS_ROM_VMA = __FUNCTIONS_ROM_LMA
                0x00000000fffffff0                __RESET_VMA = __RESET_LMA
                0x00000000ffff0000                __INIT_ROM_LMA = 0xffff0000
                0x00000000ffff0000                __SYS_TABLES_LMA = __INIT_ROM_LMA
                0x00000000ffff8000                __INIT_16_LMA = 0xffff8000
                0x00000000fffffff0                __RESET_LMA = 0xfffffff0

.sys_tables_32  0x0000000000000000      0x19c load address 0x00000000ffff0000
 *(.sys_tables)
 .sys_tables    0x0000000000000000      0x19c ./bin/sys_tables.elf
                0x0000000000000018                _gdtr_32
                0x0000000000000196                _idtr_32
                0x000000000000019c                __sys_tables_size = SIZEOF (.sys_tables_32)
                0x00000000ffff019c                __FUNCTIONS_LMA = (LOADADDR (.sys_tables_32) + SIZEOF (.sys_tables_32))

.functions      0x0000000000050000      0x91b load address 0x00000000ffff019c
 *(.functions_c)
 .functions_c   0x0000000000050000      0x86c ./bin/functions.elf
                0x0000000000050000                __fast_memcpy
                0x000000000005003c                limpiar_buffer
                0x0000000000050086                determinar_tecla_presionada
                0x0000000000050147                escribir_buffer
                0x00000000000501b4                escribir_tabla_digitos
                0x00000000000502d3                leer_buffer
                0x000000000005033d                contador_handler
                0x0000000000050379                set_cr3
                0x00000000000503b6                set_dir_page_table_entry
                0x000000000005049e                set_page_table_entry
                0x00000000000505c5                escribir_caracter_VGA
                0x0000000000050673                escribir_mensaje_VGA
                0x0000000000050775                convertir_ASCII
                0x00000000000507a3                limpiar_VGA
                0x0000000000050831                get_entry_DTP
                0x000000000005084c                get_entry_TP
 ./bin/functions.elf(.note*)
 .note.GNU-stack
                0x000000000005086c        0x0 ./bin/functions.elf
 ./bin/functions.elf(.bss)
 .bss           0x000000000005086c       0x10 ./bin/functions.elf
 ./bin/functions.elf(.data)
 .data          0x000000000005087c        0x0 ./bin/functions.elf
 ./bin/functions.elf(.rodata)
 .rodata        0x000000000005087c       0x9f ./bin/functions.elf
                0x000000000000091b                __functions_size = SIZEOF (.functions)
                0x00000000ffff0ab7                __TECLADO_ISR_LMA = (LOADADDR (.functions) + SIZEOF (.functions))

.handlers_ISR   0x0000000000100000       0xa6 load address 0x00000000ffff0ab7
 *(.teclado_and_ISR)
 .teclado_and_ISR
                0x0000000000100000       0xa6 ./bin/handlers_32.elf
                0x0000000100000000                L_IRQ00_Handler
                0x000000010000001f                L_IRQ01_Handler
                0x0000000100000044                L_ISR00_Handler_DE
                0x000000010000004d                L_ISR02_Handler_NMI
                0x0000000100000050                L_ISR03_Handler_BP
                0x0000000100000053                L_ISR04_Handler_OF
                0x0000000100000056                L_ISR05_Handler_BR
                0x0000000100000059                L_ISR06_Handler_UD
                0x000000010000005f                L_ISR07_Handler_NM
                0x0000000100000062                L_ISR08_Handler_DF
                0x0000000100000065                L_ISR10_Handler_TS
                0x0000000100000068                L_ISR11_Handler_NP
                0x000000010000006b                L_ISR12_Handler_SS
                0x000000010000006e                L_ISR13_Handler_GP
                0x0000000100000071                L_ISR14_Handler_PF
                0x000000010000009a                L_ISR16_Handler_MF
                0x000000010000009d                L_ISR17_Handler_AC
                0x00000001000000a0                L_ISR18_Handler_MC
                0x00000001000000a3                L_ISR19_Handler_XM
                0x00000000000000a6                __handlers_32_size = SIZEOF (.handlers_ISR)
                0x00000000ffff0b5d                __DATOS_SYS32_LMA = (LOADADDR (.handlers_ISR) + SIZEOF (.handlers_ISR))

.datos_sys32    0x0000000001200000       0x3a load address 0x00000000ffff0b5d
 ./bin/main.elf(.data)
 .data          0x0000000001200000       0x3a ./bin/main.elf
                0x0000000001200000                memoria_buffer_reservada
                0x0000000001200013                contador_timer
                0x0000000001200015                resultado_promedio
                0x000000000120001d                dir_lineal_page_fault
                0x0000000001200021                error_code_PF
                0x0000000001200025                page_fault_msg
                0x000000000000003a                __data_size = SIZEOF (.datos_sys32)
                0x00000000ffff0b97                __KERNEL_32_LMA = (LOADADDR (.datos_sys32) + SIZEOF (.datos_sys32))

.codigo_kernel32
                0x0000000001220000       0x29 load address 0x00000000ffff0b97
 *(.kernel32)
 .kernel32      0x0000000001220000       0x29 ./bin/main.elf
                0x0000000001220000                kernel32_init
                0x0000000000000029                __codigo_kernel32_size = SIZEOF (.codigo_kernel32)
                0x00000000ffff0bc0                __TAREA1_TEXT_LMA = (LOADADDR (.codigo_kernel32) + SIZEOF (.codigo_kernel32))

.tarea_1_text   0x0000000001310000      0x35d load address 0x00000000ffff0bc0
 *(.functions_tarea_1)
 .functions_tarea_1
                0x0000000001310000      0x35d ./bin/tarea_1.elf
                0x0000000001310000                ejecutar_tarea_1
                0x00000000013100f0                promedio_digitos_64
                0x00000000013102f4                sumatoria_digitos_64
 ./bin/tarea_1.elf(.note*)
 .note.GNU-stack
                0x000000000131035d        0x0 ./bin/tarea_1.elf
                0x000000000000035d                __tarea_01_size = SIZEOF (.tarea_1_text)
                0x00000000ffff0f1d                __TAREA1_BSS_LMA = (LOADADDR (.tarea_1_text) + SIZEOF (.tarea_1_text))

.text           0x000000000131035d        0x0 load address 0x00000000ffff0f1d
 .text          0x000000000131035d        0x0 ./bin/functions.elf
 .text          0x000000000131035d        0x0 ./bin/tarea_1.elf
 .text          0x000000000131035d        0x0 ./bin/functions_rom.elf

.tarea_1_bss    0x0000000001320000       0x30 load address 0x00000000ffff0f1d
 ./bin/tarea_1.elf(.bss)
 .bss           0x0000000001320000       0x30 ./bin/tarea_1.elf
                0x0000000000000030                __tarea_1_bss_size = SIZEOF (.tarea_1_bss)
                0x00000000ffff0f4d                __TAREA1_DATA_LMA = (LOADADDR (.tarea_1_bss) + SIZEOF (.tarea_1_bss))

.tarea_1_data   0x0000000001330000        0x1 load address 0x00000000ffff0f4d
 ./bin/tarea_1.elf(.data)
 .data          0x0000000001330000        0x1 ./bin/tarea_1.elf
                0x0000000001330000                variable_global_inicializada
                0x0000000000000001                __tarea_1_data_size = SIZEOF (.tarea_1_data)
                0x00000000ffff0f4e                __TAREA1_RODATA_LMA = (LOADADDR (.tarea_1_data) + SIZEOF (.tarea_1_data))

.tarea_1_rodata
                0x0000000001340000       0x24 load address 0x00000000ffff0f4e
 ./bin/tarea_1.elf(.rodata)
 .rodata        0x0000000001340000       0x24 ./bin/tarea_1.elf
                0x0000000001340000                var_global_rodata
                0x0000000000000024                __tarea_1_rodata_size = SIZEOF (.tarea_1_rodata)

.codigo_init16  0x00000000ffff8000       0x69
 *(.ROM_init)
 .ROM_init      0x00000000ffff8000       0x69 ./bin/init16.elf
                0x00000000ffff8000                start16
                0x00000000ffff8031                return_init_screen
                0x00000000ffff8069                __VGA_INIT_LMA = (LOADADDR (.codigo_init16) + SIZEOF (.codigo_init16))

.video_init     0x00000000ffff8069     0x1322
 *(.vga_init)
 .vga_init      0x00000000ffff8069     0x1322 ./bin/init_screen.elf
                0x00000000ffff9165                init_screen
                0x00000000ffff938b                __INIT_32_LMA = (LOADADDR (.video_init) + SIZEOF (.video_init))

.codigo_init32  0x00000000ffff938b      0x5f9
 *(.start32)
 .start32       0x00000000ffff938b      0x5f9 ./bin/init32.elf
                0x00000000ffff938b                start32_launcher
                0x00000000ffff9984                __FUNCTIONS_ROM_LMA = (LOADADDR (.codigo_init32) + SIZEOF (.codigo_init32))

.functions_rom  0x00000000ffff9984       0xa0
 *(.functions_rom)
 .functions_rom
                0x00000000ffff9984       0x3c ./bin/functions_rom.elf
                0x00000000ffff9984                __fast_memcpy_rom
 *(.functions_asm_rom)
 .functions_asm_rom
                0x00000000ffff99c0       0x64 ./bin/functions_asm.elf
                0x00000000ffff99c0                init_pic
                0x00000000ffff99ed                init_timer
                0x00000000ffff99fc                init_teclado
 *(.note.gnu.property)
 ./bin/functions_rom.elf(.note*)
 .note.GNU-stack
                0x00000000ffff9a24        0x0 ./bin/functions_rom.elf
 ./bin/functions_rom.elf(.data)
 .data          0x00000000ffff9a24        0x0 ./bin/functions_rom.elf
 ./bin/functions_rom.elf(.bss)
 .bss           0x00000000ffff9a24        0x0 ./bin/functions_rom.elf
 ./bin/functions_rom.elf(.rodata)

.codigo_reset   0x00000000fffffff0       0x10
 *(.resetVector)
 .resetVector   0x00000000fffffff0       0x10 ./bin/reset.elf
                0x00000000fffffff0                reset
LOAD ./bin/init32.elf
LOAD ./bin/reset.elf
LOAD ./bin/init16.elf
LOAD ./bin/main.elf
LOAD ./bin/functions_asm.elf
LOAD ./bin/functions_rom.elf
LOAD ./bin/handlers_32.elf
LOAD ./bin/functions.elf
LOAD ./bin/sys_tables.elf
LOAD ./bin/init_screen.elf
LOAD ./bin/tarea_1.elf
OUTPUT(bin/mibios.bin binary)

.comment        0x0000000000000000       0x7e
 .comment       0x0000000000000000       0x2a ./bin/functions.elf
 .comment       0x000000000000002a       0x2a ./bin/tarea_1.elf
 .comment       0x0000000000000054       0x2a ./bin/functions_rom.elf
