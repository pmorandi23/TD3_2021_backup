     1                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ; /* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ; /* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ; /* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ; /* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ; /* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ; /* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ; /* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ; /* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ; /* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ; /* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ; /* PaGine*/
    12                              <1> %define flag_TSS_sup    1
    13                              <1> %define flag_TSS_us     0
    14                              <1> 
    15                              <1> ;------------DTP y TP(Descriptor de Tablas de Páginas y Tabla de Páginas) flags--------------------------
    16                              <1> PAG_PCD_YES  equ 1       ; cachable                          
    17                              <1> PAG_PCD_NO   equ 0       ; no cachable
    18                              <1> PAG_PWT_YES  equ 1       ; 1 se escribe en cache y ram       
    19                              <1> PAG_PWT_NO   equ 0       ; 0 
    20                              <1> PAG_P_YES    equ 1       ; 1 presente
    21                              <1> PAG_P_NO     equ 0       ; 0 no presente
    22                              <1> PAG_RW_W     equ 1       ; 1 lectura y escritura
    23                              <1> PAG_RW_R     equ 0       ; 0 solo lectura
    24                              <1> PAG_US_SUP   equ 0       ; 0 supervisor
    25                              <1> PAG_US_US    equ 1       ; 1 usuario  
    26                              <1> PAG_D        equ 0       ; modificacion en la pagina
    27                              <1> PAG_PAT      equ 0       ; PAT                   
    28                              <1> PAG_G_YES    equ 0       ; Global                 
    29                              <1> PAG_A        equ 0       ; accedida
    30                              <1> PAG_PS_4K    equ 0       ; tamaño de pagina de 4KB
    31                              <1> 
    32                              <1> ; ------------ EQU Generales-----------------
    33                              <1> SYS_HALT                EQU     0
    34                              <1> SYS_READ                EQU     1
    35                              <1> SYS_PRINT               EQU     2
    36                              <1> SYS_PRINT_VGA           EQU     3
    37                              <1> ASCII_TRUE              EQU     1
    38                              <1> ASCII_FALSE             EQU     0
     2                                  
     3                                  ; -----------EXTERN FUNCIONES------------
     4                                  EXTERN ejecutar_tarea_2
     5                                  ; -----------EXTERN VARIABLES------------
     6                                  ;EXTERN POINTER_VMA_DIGITS_TABLE
     7                                  EXTERN __DIGITS_TABLE_VMA
     8                                  ; ----------------GLOBAL------------
     9                                  GLOBAL tarea_2_asm
    10                                  GLOBAL tarea_2_AC_generate
    11                                  
    12                                  ; ---------------EQU-----------------
    13                                  CANTIDAD_DIGITOS    EQU     10      ; Cantidad de dígitos en la tabla     
    14                                  
    15                                  ; -------------RODATA--------------
    16                                  SECTION .rodata_tarea2
    17                                  ;tarea_2_msg              db "- Tarea 2: Suma SIMD 1",0
    18                                  
    19                                  ;-------------BSS------------------
    20                                  SECTION .bss_tarea2
    21                                  
    22 00000000 <res 00000050>          TAREA2_DIGITS_TABLE        resq    CANTIDAD_DIGITOS     ; Tabla de dígitos de la tarea 1
    22          ******************       warning: uninitialized space declared in non-BSS section `.bss_tarea2': zeroing
    23                                  
    24                                  ; ---------------DATA-------------
    25                                  SECTION .data_tarea2
    26                                  
    27 00000000 0000000000000000        suma_SIMD_words             dq    0
    28 00000008 50                      CANTIDAD_BYTES_TABLA        db    80
    29                                  
    30                                  ; --------------TEXT---------------
    31                                  SECTION .functions_tarea_2
    32                                  
    33                                  tarea_2_asm:
    34                                      ; La tarea tiene 10ms para correr y el tiempo de sobra espera al scheduler
    35                                  
    36 00000000 31C0                        xor     eax, eax                        ; Inicializo eax
    37 00000002 31DB                        xor     ebx, ebx                        ; Inicializo ebx
    38 00000004 31C9                        xor     ecx, ecx
    39 00000006 0FEFC0                      pxor    mm0, mm0                        ; Inicializo registro mm0          
    40                                      ;mov     eax, POINTER_VMA_DIGITS_TABLE   ; Principio de la tabla
    41                                  
    42                                      ; -> Llamo a la syscall read para copiar la tabla de digitos a la tarea
    43 00000009 BF[00000000]                mov     edi, TAREA2_DIGITS_TABLE
    44 0000000E BE[00000000]                mov     esi, __DIGITS_TABLE_VMA
    45 00000013 8A0D[08000000]              mov     byte cl, [CANTIDAD_BYTES_TABLA]
    46 00000019 B801000000                  mov     eax, SYS_READ
    47 0000001E CD80                        int 0x80
    48                                  
    49 00000020 B8[00000000]                mov     eax, TAREA2_DIGITS_TABLE    ; Principio de la tabla
    50                                  
    51                                  loop_tabla:
    52 00000025 0FDD00                      paddusw mm0, [eax]                  ; Suma en SIMD
    53 00000028 83C008                      add eax, 8                          ; Siguiente qword
    54 0000002B 43                          inc ebx                             ; Sumo al contador
    55 0000002C 83FB0A                      cmp ebx, CANTIDAD_DIGITOS           ; Me quedo hasta recorrer la tabla
    56 0000002F 75F4                        jne loop_tabla
    57                                  
    58 00000031 0F7F05[00000000]            movq qword [suma_SIMD_words], mm0     ;Guardo el valor de la suma saturada en words
    59                                  
    60                                      ; -> Muestro el resultado de la suma SIMD en pantalla
    61 00000038 BF[00000000]                mov edi, suma_SIMD_words             ; Numero de 64 bits 
    62 0000003D BA04000000                  mov edx, 4                          ; Fila VGA
    63 00000042 B94F000000                  mov ecx, 79                         ; Columna VGA
    64 00000047 B803000000                  mov eax, SYS_PRINT_VGA                  ; Syscall de escritura VGA
    65 0000004C BB04000000                  mov ebx, 4                          ; tamaño del dato    1 = byte, 2 = word, 3 = dword, 4 = qword
    66 00000051 CD80                        int 0x80
    67                                      ; -> Pongo al CPU en halt llamando a int 0x80
    68 00000053 B800000000                  mov eax, SYS_HALT                 
    69 00000058 CD80                        int 0x80
    70 0000005A EBA4                        jmp tarea_2_asm
    71                                  
    72                                  tarea_2_AC_generate:
    73 0000005C C70501004301060000-         mov dword[0x01430001],0x6 
    73 00000065 00                 
