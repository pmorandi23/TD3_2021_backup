     1                                  SECTION .functions_asm
     2                                  
     3                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ; /* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ; /* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ; /* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ; /* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ; /* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ; /* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ; /* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ; /* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ; /* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ; /* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ; /* PaGine*/
    12                              <1> %define flag_TSS_sup    1
    13                              <1> %define flag_TSS_us     0
    14                              <1> 
    15                              <1> ;------------DTP y TP(Descriptor de Tablas de Páginas y Tabla de Páginas) flags--------------------------
    16                              <1> PAG_PCD_YES  equ 1       ; cachable                          
    17                              <1> PAG_PCD_NO   equ 0       ; no cachable
    18                              <1> PAG_PWT_YES  equ 1       ; 1 se escribe en cache y ram       
    19                              <1> PAG_PWT_NO   equ 0       ; 0 
    20                              <1> PAG_P_YES    equ 1       ; 1 presente
    21                              <1> PAG_P_NO     equ 0       ; 0 no presente
    22                              <1> PAG_RW_W     equ 1       ; 1 lectura y escritura
    23                              <1> PAG_RW_R     equ 0       ; 0 solo lectura
    24                              <1> PAG_US_SUP   equ 0       ; 0 supervisor
    25                              <1> PAG_US_US    equ 1       ; 1 usuario  
    26                              <1> PAG_D        equ 0       ; modificacion en la pagina
    27                              <1> PAG_PAT      equ 0       ; PAT                   
    28                              <1> PAG_G_YES    equ 0       ; Global                 
    29                              <1> PAG_A        equ 0       ; accedida
    30                              <1> PAG_PS_4K    equ 0       ; tamaño de pagina de 4KB
    31                              <1> 
    32                              <1> ; ------------ EQU Generales-----------------
    33                              <1> SYS_HALT                EQU     0
    34                              <1> SYS_READ                EQU     1
    35                              <1> SYS_PRINT               EQU     2
    36                              <1> SYS_PRINT_VGA           EQU     3
    37                              <1> ASCII_TRUE              EQU     1
    38                              <1> ASCII_FALSE             EQU     0
     4                                  
     5                                  ;---------------EXTERN-------------------
     6                                  EXTERN  DS_SEL_00
     7                                  EXTERN  CS_SEL_00
     8                                  EXTERN  DS_SEL_11
     9                                  EXTERN  CS_SEL_11
    10                                  EXTERN __TSS_BASICA
    11                                  EXTERN  TSS_aux
    12                                  EXTERN  Stack_aux
    13                                  EXTERN  CR3_aux
    14                                  EXTERN return_guardar_contexto
    15                                  EXTERN return_leer_contexto
    16                                  EXTERN primer_context_save
    17                                  EXTERN __MMX2_VMA
    18                                  EXTERN __MMX3_VMA
    19                                  EXTERN __TSS3_VMA
    20                                  EXTERN __TSS2_VMA
    21                                  ;--------------GLOBAL-------------------
    22                                  GLOBAL init_tss
    23                                  GLOBAL guardar_contexto_asm
    24                                  GLOBAL leer_contexto_siguiente_asm
    25                                  ; -------------EQU---------------------
    26                                  TAREA_2     EQU         2
    27                                  TAREA_3     EQU         3
    28                                  init_tss:
    29                                  
    30                                  ; @params
    31                                  ;  eax--->[ esp + 4 ]---> __TSS1_VMA                      ; TSS de la tarea
    32                                  ;  ebx--->[ esp + 8 ]---> __CR3_TAREA_1_PHY               ; CR3 de la tarea
    33                                  ;  ecx--->[ esp + 12 ]---> __TAREA1_STACK_END_VMA         ; STACK de la tarea
    34                                  ;  edx--->[ esp + 16 ]---> __STACK_KERNEL_TAREA1_END_VMA  ; STACK del Kernel
    35                                  ;  esi--->[ esp + 20 ]---> ejecutar_tarea_1               ; Dir. de inicio de la tarea
    36                                  
    37                                      ; -> Paso parámetros del stack a los registros.
    38                                  
    39                                      ;xchg bx, bx
    40                                  
    41                                      ; Flag de TSS de kernel
    42 00000000 8B7C2418                    mov edi, [ esp + 24 ] 
    43                                      ; Base de la TSS
    44 00000004 8B442414                    mov eax, [ esp + 20 ] 
    45                                      ;mov [ TSS_aux ], eax              
    46                                      ; CR3
    47 00000008 8B5C2410                    mov ebx, [ esp + 16 ]
    48                                      ; Stack user
    49 0000000C 8B4C240C                    mov ecx, [ esp + 12 ]
    50                                      ; Stack Kernel 
    51 00000010 8B542408                    mov edx, [ esp + 8 ]
    52                                      ; Dir. de inicio de tarea
    53 00000014 8B742404                    mov esi, [ esp + 4 ]
    54                                  
    55                                      ; -> Armo la TSS con formato de Intel (podría no haberlo sido para las de las tareas. Si o si para la del CPU)
    56                                  
    57                                      ;Previous Task Link 
    58 00000018 C70000000000                mov [eax], dword(0) 
    59                                      ;ESP0 - Stack Pointer de Nivel 0
    60 0000001E 895004                      mov [eax + 4], dword (edx)            ; STACK de Kernel de nivel 0
    61                                      ;SS0 - Stack Segment de Nivel 0
    62 00000021 C74008[00000000]            mov [eax + 8], dword(DS_SEL_00)       ; Selector de nivel 0               
    63                                      ;ESP1 - Stack Pointer de Nivel 1
    64 00000028 C7400C00000000              mov [eax + 12], dword(0) 
    65                                      ;SS1 - Stack Segment de Nivel 1
    66 0000002F C7401000000000              mov [eax + 16], dword(0) 
    67                                      ;ESP2 - Stack Pointer de Nivel 2
    68 00000036 894814                      mov [eax + 20], dword(ecx)            ; Stack de nivel 3
    69                                      ;SS2 - Stack Segment de Nivel 2
    70 00000039 C74018[03000000]            mov [eax + 24], dword(DS_SEL_11 + 3)  ; Selector de datos de nivel 3
    71                                      ;CR3 - Control Register 3
    72 00000040 89581C                      mov [eax + 28], (ebx)                 ; CR3 de la tarea
    73                                      ;EIP - Instruction Pointer
    74 00000043 897020                      mov [eax + 32], (esi)                 ; Dir. de inicio de la tarea
    75                                      ;EFLAGS - Status Flags
    76 00000046 C7402402020000              mov [eax + 36], dword(0x202) 
    77                                      ;EAX 
    78 0000004D C7402800000000              mov [eax + 40], dword(0) 
    79                                      ;ECX
    80 00000054 C7402C00000000              mov [eax + 44], dword(0) 
    81                                      ;EDX
    82 0000005B C7403000000000              mov [eax + 48], dword(0) 
    83                                      ;EBX
    84 00000062 C7403400000000              mov [eax + 52], dword(0) 
    85                                      ;ESP
    86 00000069 894838                      mov [eax + 56], (ecx)               ; STACK de la tarea
    87                                      ;EBP
    88 0000006C 89483C                      mov [eax + 60], (ecx)               ; STACK de la tarea 
    89                                      ;ESI
    90 0000006F C7404000000000              mov [eax + 64], dword(0) 
    91                                      ;EDI
    92 00000076 C7404400000000              mov [eax + 68], dword(0) 
    93                                  
    94 0000007D 83FF01                      cmp edi, flag_TSS_sup
    95 00000080 742C                        je tss_nivel_0
    96                                  
    97                                  tss_nivel_3:
    98                                      ;ES 
    99 00000082 C74048[03000000]            mov [eax + 72], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   100                                      ;CS 
   101 00000089 C7404C[03000000]            mov [eax + 76], dword(CS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   102                                      ;SS 
   103 00000090 C74050[03000000]            mov [eax + 80], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   104                                      ;DS 
   105 00000097 C74054[03000000]            mov [eax + 84], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   106                                      ;FS 
   107 0000009E C74058[03000000]            mov [eax + 88], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   108                                      ;GS 
   109 000000A5 C7405C[03000000]            mov [eax + 92], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   110                                  
   111 000000AC EB2A                        jmp fin_init_tss
   112                                  tss_nivel_0:
   113                                      ;ES 
   114 000000AE C74048[00000000]            mov [eax + 72], dword(DS_SEL_00)    ; Selector de nivel 3
   115                                      ;CS 
   116 000000B5 C7404C[00000000]            mov [eax + 76], dword(CS_SEL_00)    ; Selector de nivel 3
   117                                      ;SS 
   118 000000BC C74050[00000000]            mov [eax + 80], dword(DS_SEL_00)    ; Selector de nivel 3
   119                                      ;DS 
   120 000000C3 C74054[00000000]            mov [eax + 84], dword(DS_SEL_00)    ; Selector de nivel 3
   121                                      ;FS 
   122 000000CA C74058[00000000]            mov [eax + 88], dword(DS_SEL_00)    ; Selector de nivel 3
   123                                      ;GS 
   124 000000D1 C7405C[00000000]            mov [eax + 92], dword(DS_SEL_00)    ; Selector de nivel 3
   125                                      
   126                                  
   127                                  fin_init_tss:
   128                                  
   129                                      ;LDTR
   130 000000D8 C7406000000000              mov [eax + 96], dword(0) 
   131                                      ;Bitmap E/S
   132 000000DF C7406400000000              mov [eax + 100], dword(0)
   133                                  
   134 000000E6 C3                          ret
   135                                      
   136                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   137                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CONTEXT SWITCH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   138                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   139                                      ; Función que lee de memoria el contexto de registros para la tarea próxima a ejecutarse.
   140                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   141                                  leer_contexto_siguiente_asm:
   142                                  
   143                                      ;xchg bx, bx
   144                                    
   145                                      ; CR3 de la próxima tarea
   146 000000E7 A1[00000000]                mov eax, [CR3_aux]
   147 000000EC 0F22D8                      mov cr3, eax
   148                                  
   149                                      ;Cargo los registros de segmento
   150 000000EF A1[00000000]                mov eax, [TSS_aux]         
   151 000000F4 8E4048                      mov es, [eax + 0x48]            ;Recupero es     
   152 000000F7 8E5854                      mov ds, [eax + 0x54]            ;Recupero ds   
   153 000000FA 8E6058                      mov fs, [eax + 0x58]            ;Recupero fs   
   154 000000FD 8E685C                      mov gs, [eax + 0x5C]            ;Recupero gs    
   155                                      
   156                                      ; Stack de nivel 0 de la tarea
   157                                  
   158 00000100 8B5804                      mov ebx, [eax + 0x04]           ;Recupero ESP0
   159 00000103 891D[00000000]              mov [Stack_aux], ebx
   160 00000109 8B5808                      mov ebx, [eax + 0x08]           ;Recupero SS0
   161 0000010C 891D[04000000]              mov [Stack_aux + 4], ebx
   162                                  
   163                                      ;LSS --> load stack segment
   164 00000112 0FB225[00000000]            lss esp, [Stack_aux]
   165                                  
   166                                      ; Cargo Stack de nivel 3 de la tarea
   167 00000119 8B5818                      mov ebx, [eax + 0x18]      ;Recupero SS2
   168 0000011C 53                          push ebx
   169 0000011D 8B5814                      mov ebx, [eax + 0x14]      ;Recupero ESP2
   170 00000120 53                          push ebx
   171 00000121 8B5824                      mov ebx, [eax + 0x24]      ;Recupero EFLAGS
   172 00000124 53                          push ebx
   173 00000125 8B584C                      mov ebx, [eax + 0x4C]      ;Recupero CS
   174 00000128 53                          push ebx
   175 00000129 8B5820                      mov ebx, [eax + 0x20]      ;Recupero EIP
   176 0000012C 53                          push ebx
   177                                  
   178                                      ;Registros de Proposito general
   179 0000012D 8B482C                      mov ecx, [eax + 0x2C]
   180 00000130 8B5030                      mov edx, [eax + 0x30]
   181 00000133 8B5834                      mov ebx, [eax + 0x34]       
   182 00000136 8B7040                      mov esi, [eax + 0x40]
   183 00000139 8B7844                      mov edi, [eax + 0x44]
   184 0000013C 8B4028                      mov eax, [eax + 0x28]     ; Debe estar último
   185                                  
   186                                      ; Cargo la TSS
   187 0000013F FF35[00000000]              push dword [TSS_aux]
   188 00000145 E8C8000000                  call cargar_TSS_CPU
   189 0000014A 83C404                      add esp,4
   190                                  
   191                                       ;Seteo el flag CR0.TS = 1 para las tareas 2 y 3 que usan SIMD
   192 0000014D 660F01E0                    smsw ax
   193 00000151 6683C808                    or ax, 0x0008
   194 00000155 0F01F0                      lmsw ax
   195                                  
   196 00000158 E9(00000000)                jmp return_leer_contexto
   197                                  
   198                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   199                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CONTEXT SAVE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   200                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   201                                      ; Función que guarda en memoria el contexto de registros de la tarea que es suspendida.
   202                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   203                                  guardar_contexto_asm:
   204                                  
   205                                      ; Recupero de la pila los registros generales
   206 0000015D 61                          popad
   207                                      ;Registros Generales
   208 0000015E A3[28000000]                mov [TSS_aux + 40],   eax      ;Guardo EAX
   209 00000163 890D[2C000000]              mov [TSS_aux + 44],   ecx      ;Guardo ECX
   210 00000169 8915[30000000]              mov [TSS_aux + 48],   edx      ;Guardo EDX
   211 0000016F 891D[34000000]              mov [TSS_aux + 52],   ebx      ;Guardo EBX
   212 00000175 892D[3C000000]              mov [TSS_aux + 60],   ebp      ;Guardo EBP 
   213 0000017B 8935[40000000]              mov [TSS_aux + 64],   esi      ;Guardo ESI
   214 00000181 893D[44000000]              mov [TSS_aux + 68],   edi      ;Guardo EDI 
   215                                      ;Registros de Segmento
   216 00000187 8C05[48000000]              mov [TSS_aux + 72],   es       ;Guardo ES
   217 0000018D 8C1D[54000000]              mov [TSS_aux + 84],   ds       ;Guardo DS   
   218 00000193 8C25[58000000]              mov [TSS_aux + 88],   fs       ;Guardo FS       
   219 00000199 8C2D[5C000000]              mov [TSS_aux + 92],   gs       ;Guardo GS    
   220 0000019F 0F20D8                      mov eax, cr3                  ;Guardo CR3
   221 000001A2 A3[1C000000]                mov [TSS_aux + 28],   eax 
   222                                      
   223                                      ;Registros del Stack
   224 000001A7 58                          pop eax                                           
   225 000001A8 A3[20000000]                mov [TSS_aux + 32],   eax           ; Guardo EIP
   226 000001AD 58                          pop eax
   227 000001AE A3[4C000000]                mov [TSS_aux + 76],   eax           ; Guardo CS 
   228 000001B3 58                          pop eax         
   229 000001B4 A3[24000000]                mov [TSS_aux + 36],   eax           ; Guardo EFLAGS 
   230                                      
   231                                      ; Stack de nivel 3
   232 000001B9 31C0                        xor eax,eax
   233 000001BB A0[00000000]                mov al, [primer_context_save]
   234 000001C0 3C01                        cmp al, 1
   235 000001C2 740C                        je no_guardo_stack_user
   236 000001C4 58                          pop eax                             ; Guardo ESP2      
   237 000001C5 A3[14000000]                mov [TSS_aux + 20],   eax
   238 000001CA 58                          pop eax                             ; Guardo SS2      
   239 000001CB A3[18000000]                mov [TSS_aux + 24],   eax
   240                                  
   241                                  no_guardo_stack_user:
   242                                      ; Stack de nivel 0
   243 000001D0 C605[00000000]00            mov byte [primer_context_save], 0
   244 000001D7 8C15[08000000]              mov [TSS_aux + 8],    ss       ; Guardo SS0
   245 000001DD 8925[04000000]              mov [TSS_aux + 4],    esp      ; Guardo ESP0
   246                                  
   247                                      ; Analizo si tengo que guardar contextos MMX
   248 000001E3 813D[00000000]-             cmp dword[TSS_aux], __TSS2_VMA
   248 000001E9 [00000000]         
   249 000001ED 740E                        je guardar_mmx2
   250                                  
   251 000001EF 813D[00000000]-             cmp dword[TSS_aux], __TSS3_VMA
   251 000001F5 [00000000]         
   252 000001F9 740B                        je guardar_mmx3
   253                                      
   254 000001FB EB10                        jmp fin_guardar_contexto
   255                                  
   256                                  guardar_mmx2:
   257 000001FD 0FAE05[00000000]            FXSAVE &__MMX2_VMA
   258 00000204 EB07                        jmp fin_guardar_contexto
   259                                  
   260                                  guardar_mmx3:
   261 00000206 0FAE05[00000000]            FXSAVE &__MMX3_VMA
   262                                  
   263                                  fin_guardar_contexto:
   264 0000020D E9(00000000)                jmp return_guardar_contexto
   265                                  
   266                                  
   267                                  cargar_TSS_CPU:
   268                                  
   269 00000212 8B5C2404                    mov ebx, [esp + 4]
   270                                      ;backlink
   271 00000216 8B03                        mov eax, [ebx]
   272                                  
   273 00000218 A3[00000000]                mov [__TSS_BASICA], eax 
   274                                      ;ESP0
   275 0000021D 8B4304                      mov eax, [ebx+0x04]
   276 00000220 A3[04000000]                mov [__TSS_BASICA+0x04], eax
   277                                      ;SS0
   278 00000225 8B4308                      mov eax, [ebx+0x08]
   279 00000228 A3[08000000]                mov [__TSS_BASICA+0x08], eax
   280                                      ;ESP1
   281 0000022D 8B430C                      mov eax, [ebx+0x0C]
   282 00000230 A3[0C000000]                mov [__TSS_BASICA+0x0C], eax 
   283                                      ;SS1
   284 00000235 8B4310                      mov eax, [ebx+0x10]
   285 00000238 A3[10000000]                mov [__TSS_BASICA+0x10], eax
   286                                      ;ESP2
   287 0000023D 8B4314                      mov eax, [ebx+0x14]
   288 00000240 A3[14000000]                mov [__TSS_BASICA+0x14], eax 
   289                                      ;SS2
   290 00000245 8B4318                      mov eax, [ebx+0x18]
   291 00000248 A3[18000000]                mov [__TSS_BASICA+0x18], eax 
   292                                      ;CR3
   293 0000024D 8B431C                      mov eax, [ebx+0x1C]
   294 00000250 A3[1C000000]                mov [__TSS_BASICA+0x1C], eax
   295                                      ;EIP
   296 00000255 8B4320                      mov eax, [ebx+0x20]
   297 00000258 A3[20000000]                mov [__TSS_BASICA+0x20], eax 
   298                                      ;EFLAGS
   299 0000025D 8B4324                      mov eax, [ebx+0x24]
   300 00000260 A3[24000000]                mov [__TSS_BASICA+0x24], eax 
   301                                      ;EAX
   302 00000265 8B4328                      mov eax, [ebx+0x28]
   303 00000268 A3[28000000]                mov [__TSS_BASICA+0x28], eax 
   304                                      ;ECX
   305 0000026D 8B432C                      mov eax, [ebx+0x2C]
   306 00000270 A3[2C000000]                mov [__TSS_BASICA+0x2C], eax 
   307                                      ;EDX
   308 00000275 8B4330                      mov eax, [ebx+0x30]
   309 00000278 A3[30000000]                mov [__TSS_BASICA+0x30], eax 
   310                                      ;EBX
   311 0000027D 8B4334                      mov eax, [ebx+0x34]
   312 00000280 A3[34000000]                mov [__TSS_BASICA+0x34], eax 
   313                                      ;ESP
   314 00000285 8B4338                      mov eax, [ebx+0x38]
   315 00000288 A3[38000000]                mov [__TSS_BASICA+0x38], eax
   316                                      ;EBP
   317 0000028D 8B433C                      mov eax, [ebx+0x3C]
   318 00000290 A3[3C000000]                mov [__TSS_BASICA+0x3C], eax
   319                                      ;ESI
   320 00000295 8B4340                      mov eax, [ebx+0x40]
   321 00000298 A3[40000000]                mov [__TSS_BASICA+0x40], eax
   322                                      ;EDI
   323 0000029D 8B4344                      mov eax, [ebx+0x44]
   324 000002A0 A3[44000000]                mov [__TSS_BASICA+0x44], eax
   325                                      ;ES
   326 000002A5 8B4348                      mov eax, [ebx+0x48]
   327 000002A8 A3[48000000]                mov [__TSS_BASICA+0x48], eax
   328                                      ;CS
   329 000002AD 8B434C                      mov eax, [ebx+0x4C]
   330 000002B0 A3[4C000000]                mov [__TSS_BASICA+0x4C], eax
   331                                      ;SS
   332 000002B5 8B4350                      mov eax, [ebx+0x50]
   333 000002B8 A3[50000000]                mov [__TSS_BASICA+0x50], eax
   334                                      ;DS
   335 000002BD 8B4354                      mov eax, [ebx+0x54]
   336 000002C0 A3[54000000]                mov [__TSS_BASICA+0x54], eax
   337                                      ;FS
   338 000002C5 8B4358                      mov eax, [ebx+0x58]
   339 000002C8 A3[58000000]                mov [__TSS_BASICA+0x58], eax
   340                                      ;GS
   341 000002CD 8B435C                      mov eax, [ebx+0x5C]
   342 000002D0 A3[5C000000]                mov [__TSS_BASICA+0x5C], eax
   343                                      ;LDTR
   344 000002D5 8B4360                      mov eax, [ebx+0x60]
   345 000002D8 A3[60000000]                mov [__TSS_BASICA+0x60], eax
   346                                      ;Bitmap E/S
   347 000002DD 8B4364                      mov eax, [ebx+0x64]
   348 000002E0 A3[64000000]                mov [__TSS_BASICA+0x64], eax
   349                                  
   350 000002E5 C3                          ret
