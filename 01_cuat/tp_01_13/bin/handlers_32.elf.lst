     1                                  USE32
     2                                  
     3                                  %include "inc/functions_asm.h"
     1                              <1> ;----------------PIC----------------------------
     2                              <1> %define PORT_A_8042    0x60
     3                              <1> %define CTRL_PORT_8042 0x64
     4                              <1> %define KEYB_DIS       0xAD
     5                              <1> %define KEYB_EN        0xAE
     6                              <1> %define READ_OUT_8042  0xD0
     7                              <1> %define WRITE_OUT_8042 0xD1
     8                              <1> 
     9                              <1> %define TECLA_1     0x02
    10                              <1> %define TECLA_2     0x03
    11                              <1> %define TECLA_3     0x04
    12                              <1> %define TECLA_4     0x05
    13                              <1> %define TECLA_5     0x06
    14                              <1> %define TECLA_6     0x07
    15                              <1> %define TECLA_7     0x08
    16                              <1> %define TECLA_8     0x09
    17                              <1> %define TECLA_9     0x0A
    18                              <1> %define TECLA_0     0x0B
    19                              <1> 
    20                              <1> %define TECLA_ENTER 0x1C
    21                              <1> 
    22                              <1> %define TECLA_A     0x1E
    23                              <1> %define TECLA_B     0x30
    24                              <1> %define TECLA_C     0x2E
    25                              <1> %define TECLA_D     0x20
    26                              <1> %define TECLA_E     0x12
    27                              <1> %define TECLA_F     0x21
    28                              <1> %define TECLA_G     0x22
    29                              <1> %define TECLA_H     0x23
    30                              <1> %define TECLA_I     0x17
    31                              <1> %define TECLA_J     0x24
    32                              <1> %define TECLA_K     0x25
    33                              <1> %define TECLA_L     0x26
    34                              <1> %define TECLA_M     0x32
    35                              <1> %define TECLA_N     0x31
    36                              <1> %define TECLA_O     0x18
    37                              <1> %define TECLA_P     0x19
    38                              <1> %define TECLA_Q     0x10
    39                              <1> %define TECLA_R     0x13
    40                              <1> %define TECLA_S     0x1F
    41                              <1> %define TECLA_T     0x14
    42                              <1> %define TECLA_U     0x16
    43                              <1> %define TECLA_V     0x2F
    44                              <1> %define TECLA_W     0x11
    45                              <1> %define TECLA_X     0x2D
    46                              <1> %define TECLA_Y     0x15
    47                              <1> %define TECLA_Z     0x2C
     4                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ; /* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ; /* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ; /* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ; /* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ; /* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ; /* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ; /* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ; /* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ; /* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ; /* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ; /* PaGine*/
    12                              <1> %define flag_TSS_sup    1
    13                              <1> %define flag_TSS_us     0
    14                              <1> 
    15                              <1> ;------------DTP y TP(Descriptor de Tablas de Páginas y Tabla de Páginas) flags--------------------------
    16                              <1> PAG_PCD_YES  equ 1       ; cachable                          
    17                              <1> PAG_PCD_NO   equ 0       ; no cachable
    18                              <1> PAG_PWT_YES  equ 1       ; 1 se escribe en cache y ram       
    19                              <1> PAG_PWT_NO   equ 0       ; 0 
    20                              <1> PAG_P_YES    equ 1       ; 1 presente
    21                              <1> PAG_P_NO     equ 0       ; 0 no presente
    22                              <1> PAG_RW_W     equ 1       ; 1 lectura y escritura
    23                              <1> PAG_RW_R     equ 0       ; 0 solo lectura
    24                              <1> PAG_US_SUP   equ 0       ; 0 supervisor
    25                              <1> PAG_US_US    equ 1       ; 1 usuario  
    26                              <1> PAG_D        equ 0       ; modificacion en la pagina
    27                              <1> PAG_PAT      equ 0       ; PAT                   
    28                              <1> PAG_G_YES    equ 0       ; Global                 
    29                              <1> PAG_A        equ 0       ; accedida
    30                              <1> PAG_PS_4K    equ 0       ; tamaño de pagina de 4KB
    31                              <1> 
    32                              <1> ; ------------ EQU Generales-----------------
    33                              <1> SYS_HALT                EQU     0
    34                              <1> SYS_READ                EQU     1
    35                              <1> SYS_PRINT               EQU     2
    36                              <1> SYS_PRINT_VGA           EQU     3
    37                              <1> ASCII_TRUE              EQU     1
    38                              <1> ASCII_FALSE             EQU     0
     5                                  
     6                                  ;----------------EXTERN SELECTORES--------------------
     7                                  EXTERN DS_SEL_32
     8                                  EXTERN CS_SEL_32
     9                                  ;---------------EXTERN LINKER------------------------
    10                                  EXTERN __TECLADO_ISR_VMA
    11                                  EXTERN __VGA_VMA
    12                                  EXTERN __DIGITS_TABLE_INIT
    13                                  EXTERN __PAG_DINAMICA_INIT_PHY
    14                                  EXTERN __DIGITS_TABLE_VMA
    15                                  EXTERN __PAG_DINAMICA_INIT_VMA
    16                                  EXTERN __PAGE_TABLES_PHY
    17                                  EXTERN __MMX2_VMA
    18                                  EXTERN __MMX3_VMA
    19                                  EXTERN IDT
    20                                  EXTERN DS_SEL_SS
    21                                  ;----------------EXTERN FUNCIONES--------------------
    22                                  EXTERN determinar_tecla_presionada
    23                                  EXTERN scheduler_c
    24                                  EXTERN escribir_mensaje_VGA
    25                                  EXTERN limpiar_VGA
    26                                  EXTERN mostrar_numero32_VGA
    27                                  EXTERN set_page_table_entry
    28                                  EXTERN set_dir_page_table_entry
    29                                  EXTERN determinar_TSS_a_guardar
    30                                  EXTERN leer_contexto_siguiente_asm
    31                                  EXTERN guardar_contexto_asm
    32                                  EXTERN determinar_TSS_a_leer
    33                                  EXTERN determinar_TSS_a_guardar
    34                                  EXTERN leer_contexto_siguiente_asm
    35                                  EXTERN mostrar_promedio64_VGA
    36                                  EXTERN tarea_2_AC_generate
    37                                  EXTERN __fast_memcpy
    38                                  ;---------------EXTERN VARIABLES GLOBALES-----------
    39                                  EXTERN memoria_buffer_reservada
    40                                  EXTERN contador_timer
    41                                  EXTERN dir_lineal_page_fault
    42                                  EXTERN dir_phy_dinamica
    43                                  EXTERN resultado_promedio
    44                                  EXTERN error_code_PF
    45                                  EXTERN paginas_creadas
    46                                  EXTERN page_fault_msg
    47                                  EXTERN page_fault_msg_2
    48                                  EXTERN page_fault_msg_3
    49                                  EXTERN page_fault_msg_4
    50                                  EXTERN page_fault_msg_5
    51                                  EXTERN page_fault_msg_6
    52                                  EXTERN tarea_RUNNING
    53                                  EXTERN tarea_READY
    54                                  EXTERN tarea_SUSPENDING
    55                                  EXTERN primer_context_save
    56                                  EXTERN __TSS2_VMA
    57                                  EXTERN __CR3_TAREA_2_PHY
    58                                  ;----------------GLOBAL--------------------
    59                                  GLOBAL L_ISR00_Handler_DE
    60                                  GLOBAL L_ISR02_Handler_NMI
    61                                  GLOBAL L_ISR03_Handler_BP
    62                                  GLOBAL L_ISR04_Handler_OF
    63                                  GLOBAL L_ISR05_Handler_BR
    64                                  GLOBAL L_ISR06_Handler_UD
    65                                  GLOBAL L_ISR07_Handler_NM
    66                                  GLOBAL L_ISR08_Handler_DF
    67                                  GLOBAL L_ISR10_Handler_TS
    68                                  GLOBAL L_ISR11_Handler_NP
    69                                  GLOBAL L_ISR12_Handler_SS
    70                                  GLOBAL L_ISR13_Handler_GP
    71                                  GLOBAL L_ISR14_Handler_PF
    72                                  GLOBAL L_ISR16_Handler_MF
    73                                  GLOBAL L_ISR17_Handler_AC
    74                                  GLOBAL L_ISR18_Handler_MC
    75                                  GLOBAL L_ISR19_Handler_XM
    76                                  GLOBAL L_IRQ00_Handler
    77                                  GLOBAL L_IRQ01_Handler
    78                                  GLOBAL L_ISR128_Handler_SC
    79                                  GLOBAL return_guardar_contexto
    80                                  GLOBAL return_leer_contexto
    81                                  ;----------------EQU--------------------
    82                                  VMA_ISR_TECLADO     EQU 0x00100000
    83                                  ; Parte baja de las direcciones de los Handlers 
    84                                  L_ISR00_Handler_DE  EQU ISR00_Handler_DE    - VMA_ISR_TECLADO 
    85                                  L_ISR01_Handler_DB  EQU ISR01_Handler_DB    - VMA_ISR_TECLADO 
    86                                  L_ISR02_Handler_NMI EQU ISR02_Handler_NMI   - VMA_ISR_TECLADO 
    87                                  L_ISR03_Handler_BP  EQU ISR03_Handler_BP    - VMA_ISR_TECLADO 
    88                                  L_ISR04_Handler_OF  EQU ISR04_Handler_OF    - VMA_ISR_TECLADO 
    89                                  L_ISR05_Handler_BR  EQU ISR05_Handler_BR    - VMA_ISR_TECLADO 
    90                                  L_ISR06_Handler_UD  EQU ISR06_Handler_UD    - VMA_ISR_TECLADO 
    91                                  L_ISR07_Handler_NM  EQU ISR07_Handler_NM    - VMA_ISR_TECLADO 
    92                                  L_ISR08_Handler_DF  EQU ISR08_Handler_DF    - VMA_ISR_TECLADO   
    93                                  L_ISR10_Handler_TS  EQU ISR10_Handler_TS    - VMA_ISR_TECLADO 
    94                                  L_ISR11_Handler_NP  EQU ISR11_Handler_NP    - VMA_ISR_TECLADO 
    95                                  L_ISR12_Handler_SS  EQU ISR12_Handler_SS    - VMA_ISR_TECLADO 
    96                                  L_ISR13_Handler_GP  EQU ISR13_Handler_GP    - VMA_ISR_TECLADO 
    97                                  L_ISR14_Handler_PF  EQU ISR14_Handler_PF    - VMA_ISR_TECLADO 
    98                                  L_ISR16_Handler_MF  EQU ISR16_Handler_MF    - VMA_ISR_TECLADO 
    99                                  L_ISR17_Handler_AC  EQU ISR17_Handler_AC    - VMA_ISR_TECLADO 
   100                                  L_ISR18_Handler_MC  EQU ISR18_Handler_MC    - VMA_ISR_TECLADO 
   101                                  L_ISR19_Handler_XM  EQU ISR19_Handler_XM    - VMA_ISR_TECLADO 
   102                                  L_IRQ00_Handler     EQU IRQ00_Handler       - VMA_ISR_TECLADO
   103                                  L_IRQ01_Handler     EQU IRQ01_Handler       - VMA_ISR_TECLADO
   104                                  L_ISR128_Handler_SC EQU ISR128_Handler_SC   - VMA_ISR_TECLADO
   105                                  TAREA_2             EQU                 2
   106                                  TAREA_3             EQU                 3
   107                                  EFLAGS_AC           EQU                 0x40202  
   108                                  
   109                                  ;----------------SECTION-----------------------
   110                                  SECTION .teclado_and_ISR
   111                                  ;------------ HANDLER IRQ TIMER---------------------
   112                                  IRQ00_Handler:
   113                                      ;xchg    bx, bx                              ; Breakpoint
   114 00000000 60                          pushad                                      ; Salvo los registros de uso general.
   115 00000001 55                          push    ebp
   116 00000002 89E5                        mov     ebp, esp 
   117                                      ;push contador_timer                         ; Contador del Timer actual              
   118                                      ;push __DIGITS_TABLE_VMA                    ; Dir. de tabla de dígitos
   119                                      ;push resultado_promedio                    ; Resultado del prom. cada 500ms
   120 00000004 E8(00000000)                call scheduler_c                            ; Cada 10 ms el tick
   121 00000009 C9                          leave
   122                                  
   123                                      ; Si la tarea en ejecución es igual a la próxima tarea, no hago nada.
   124 0000000A 31C0                        xor     eax, eax
   125 0000000C 31DB                        xor     ebx, ebx
   126 0000000E A0[00000000]                mov     al, byte [tarea_RUNNING]
   127 00000013 8A1D[00000000]              mov     bl, byte [tarea_READY]
   128 00000019 38D8                        cmp     al, bl
   129 0000001B 7434                        je      pop_registros
   130                                  
   131                                      ; Determino base de la TSS donde se guardará el contexto de ejecución actual
   132 0000001D 55                          push    ebp
   133 0000001E 89E5                        mov     ebp, esp
   134 00000020 68[00000000]                push    tarea_SUSPENDING
   135 00000025 E8(00000000)                call    determinar_TSS_a_guardar
   136 0000002A C9                          leave
   137                                  
   138                                      ; Guardo contexto de ejecución del programa que estaba corriendo antes de interrumpir el Timer
   139 0000002B E9(00000000)                jmp guardar_contexto_asm
   140                                  return_guardar_contexto:
   141                                  
   142                                      ; Determino base de la TSS del contexto de ejec. a leer de memoria para próxima tarea a ejecutarse
   143 00000030 55                          push    ebp
   144 00000031 89E5                        mov     ebp, esp
   145 00000033 68[00000000]                push    tarea_READY
   146 00000038 E8(00000000)                call    determinar_TSS_a_leer
   147 0000003D C9                          leave
   148                                  
   149                                       ; Leo contexto de ejecución para la próxima tarea y se lo asigno a la TSS del CPU.
   150 0000003E E9(00000000)                jmp leer_contexto_siguiente_asm
   151                                  
   152                                  return_leer_contexto:
   153                                      ; La tarea está en condiciones de pasar de READY a RUNNING
   154 00000043 31C0                        xor eax, eax
   155 00000045 A0[00000000]                mov al, byte [tarea_READY]
   156 0000004A A2[00000000]                mov byte [tarea_RUNNING], al
   157 0000004F EB01                        jmp end_handler_timer
   158                                  
   159                                  pop_registros:
   160 00000051 61                          popad                                       ; Recupero registros
   161                                  
   162                                  end_handler_timer:
   163 00000052 B020                        mov al, 0x20                                ; ACK de la IRQ para el PIC 
   164 00000054 E620                        out 0x20, al
   165 00000056 CF                          iret                                        ; Retorno de la IRQ
   166                                  
   167                                  ;----------HANDLER IRQ TECLADO-----------------
   168                                  IRQ01_Handler:
   169                                  
   170                                      ;xchg    bx, bx
   171                                  
   172 00000057 60                          pushad
   173                                                                                ; Guardo todos los registros  para asegurarme que no se rompa el estado actual.
   174 00000058 B221                        mov     dl,0x21                             ; Guardo la interrupcion en el registro DX
   175 0000005A 31C0                        xor     eax, eax
   176                                      ; ->Leo el puerto
   177 0000005C E460                        in      al, PORT_A_8042                     ; Leo el puerto 0x60 (Keyboard Output Buffer Register)
   178 0000005E 88C3                        mov     bl, al                              ; Copio lo leído en otro registro
   179 00000060 80E380                      and     bl, 0x80                            ; Hago un AND para obtener el bit 7 (BRK)
   180 00000063 80FB80                      cmp     bl, 0x80                            ; Si el bit vale 0 la tecla fue presionada (Make), si es 1 se dejó de presionar (Break)
   181 00000066 747D                        jz      end_handler_teclado                 ; Si se dejo de presionar, no la leo. Solo leo cuando se presionada (Make)
   182                                  
   183                                      ; ->Comparo teclas para generar FAULTS
   184 00000068 83F81E                      cmp     eax, TECLA_A
   185 0000006B 7411                        je      DF_generate
   186                                  
   187 0000006D 83F830                      cmp     eax, TECLA_B
   188 00000070 7421                        je      UD_generate
   189                                  
   190 00000072 83F82E                      cmp     eax, TECLA_C
   191 00000075 7423                        je      AC_generate
   192                                  
   193 00000077 83F820                      cmp     eax, TECLA_D
   194 0000007A 7450                        je      SS_generate
   195                                  
   196 0000007C EB59                        jmp determinar_numero
   197                                  
   198                                  DF_generate:    ; Genero #DF
   199                                      ; Elimino handler de la división por cero (#DE)
   200 0000007E BF[00000000]                mov     edi, IDT   
   201 00000083 B902000000                  mov     ecx, 0x02       
   202 00000088 31C0                        xor     eax, eax           
   203 0000008A F3AB                        rep     stosd   
   204                                  
   205 0000008C 31DB                        xor     ebx, ebx        
   206 0000008E 58                          pop     eax
   207 0000008F F7F3                        div     ebx                     ; Divido por 0
   208 00000091 EB52                        jmp     end_handler_teclado
   209                                  
   210                                  
   211                                  UD_generate:  ; Genero #UD
   212                                  
   213 00000093 6687DB                      xchg bx,bx
   214 00000096 0F0B                        UD2
   215 00000098 EB3D                        jmp determinar_numero 
   216                                  
   217                                  
   218                                  AC_generate:
   219                                  
   220                                      ; Seteo el bit de Align Check en CR0
   221 0000009A 31C0                        xor     eax, eax
   222 0000009C 0F20C0                      mov     eax,cr0
   223 0000009F 0D00000400                  or      eax,X86_CR0_AM 
   224 000000A4 0F22C0                      mov     cr0,eax
   225                                  
   226                                      ; Guardo CR3 de la tarea actual
   227 000000A7 0F20DB                      mov ebx, cr3
   228                                  
   229                                      ; Cargo CR3 de la tarea 2 donde quiero generar la #AC
   230 000000AA B8[00000000]                mov eax, __CR3_TAREA_2_PHY
   231 000000AF 0F22D8                      mov cr3, eax
   232                                  
   233                                      ; Le asigno al EIP contexto de ejecuacion de la tarea 1 una operación
   234                                      ; que genera la falla con nivel de privilegio 3
   235 000000B2 31C0                        xor     eax, eax
   236 000000B4 B8[00000000]                mov     eax, __TSS2_VMA
   237 000000B9 C7402402020400              mov     [ eax + 36 ], dword(EFLAGS_AC)                    ; EFLAGS 
   238 000000C0 C74020[00000000]            mov     [ eax + 32 ], dword(tarea_2_AC_generate)      ; EIP     
   239                                      
   240                                      ; Le vuelvo a cargar el CR3 de la tarea actual
   241 000000C7 0F22DB                      mov cr3, ebx
   242                                  
   243 000000CA EB19                        jmp end_handler_teclado   
   244                                  
   245                                  
   246                                  SS_generate:   ;#Stack Segment Fault
   247                                  
   248 000000CC 6687DB                      xchg bx, bx
   249                                      ;lgdt[gdtr_SS]
   250 000000CF 66B8[0000]                  mov ax,DS_SEL_SS          ; Privilegio nivel 0, no presente
   251 000000D3 8ED0                        mov ss,ax
   252 000000D5 EB0E                        jmp end_handler_teclado
   253                                  
   254                                  
   255                                  determinar_numero:
   256 000000D7 68[00000000]                push    dword memoria_buffer_reservada      ; Buffer en VMA
   257 000000DC 50                          push    eax                                 ; Tecla presionada.
   258 000000DD E8(00000000)                call    determinar_tecla_presionada
   259 000000E2 83C408                      add     esp, 8
   260                                  
   261                                  end_handler_teclado:
   262                                  
   263                                      ;xchg    bx, bx                              ; Breakpoint
   264 000000E5 B020                        mov     al, 0x20                             ; ACK de la IRQ para el PIC 
   265 000000E7 E620                        out     0x20, al
   266 000000E9 61                          popad                                        ; Recupero registros     
   267 000000EA CF                          iret                                         ; Retorno de la IRQ
   268                                  
   269                                  ;-----------HANDLERs DE EXCEPTIONS-------------
   270                                  ;#DE (Divide Error)
   271                                  ISR00_Handler_DE:
   272 000000EB 6687DB                      xchg    bx,bx
   273 000000EE B200                        mov     dl,0x00
   274 000000F0 F4                          hlt
   275                                  
   276                                  ISR01_Handler_DB:
   277 000000F1 6687DB                      xchg    bx,bx
   278 000000F4 B201                        mov dl,0x01
   279 000000F6 F4                          hlt
   280                                  
   281                                  ISR02_Handler_NMI:
   282 000000F7 6687DB                      xchg    bx,bx
   283 000000FA B202                        mov dl,0x02
   284 000000FC F4                          hlt
   285                                  
   286                                  ISR03_Handler_BP:
   287 000000FD 6687DB                      xchg    bx,bx
   288 00000100 B203                        mov dl,0x03
   289 00000102 F4                          hlt
   290                                  
   291                                  ISR04_Handler_OF:
   292 00000103 6687DB                      xchg    bx,bx
   293 00000106 B204                        mov dl,0x04
   294 00000108 F4                          hlt
   295                                  
   296                                  ISR05_Handler_BR:
   297 00000109 6687DB                      xchg    bx,bx
   298 0000010C B205                        mov dl,0x05
   299 0000010E F4                          hlt
   300                                  ;#UD (Invalid Opcode Fetch) 
   301                                  ISR06_Handler_UD:
   302 0000010F 6687DB                      xchg    bx,bx
   303 00000112 B206                        mov     dl,0x06
   304 00000114 F4                          hlt
   305                                  ; Device not avaibable (No Math Coprocesor)
   306                                  ISR07_Handler_NM:
   307 00000115 B207                        mov     dl,0x07
   308                                  
   309 00000117 0F06                        clts                    ;CLTS — Clear Task-Switched Flag in CR0
   310                                      
   311 00000119 31C0                        xor     eax, eax
   312                                  
   313 0000011B A0[00000000]                mov     al, [tarea_RUNNING]
   314                                  
   315 00000120 3C02                        cmp     al, TAREA_2
   316 00000122 7406                        je      leer_MMX2
   317                                  
   318 00000124 3C03                        cmp     al, TAREA_3
   319 00000126 740C                        je      leer_MMX3
   320                                  
   321 00000128 EB14                        jmp fin_handler_NM
   322                                  
   323                                  leer_MMX2:
   324 0000012A B8[00000000]                mov eax, __MMX2_VMA
   325 0000012F 0FAE08                      FXRSTOR [eax]
   326 00000132 EB0A                        jmp fin_handler_NM
   327                                  
   328                                  leer_MMX3:
   329 00000134 B8[00000000]                mov eax, __MMX3_VMA
   330 00000139 0FAE08                      FXRSTOR [eax]
   331 0000013C EB00                        jmp fin_handler_NM
   332                                  
   333                                  fin_handler_NM:
   334 0000013E CF                          iret
   335                                  
   336                                  ISR08_Handler_DF:
   337 0000013F 6687DB                      xchg    bx,bx
   338 00000142 B208                        mov dl,0x08
   339 00000144 F4                          hlt
   340                                  
   341                                  ISR10_Handler_TS:
   342 00000145 6687DB                      xchg    bx,bx
   343 00000148 B20A                        mov dl,0x0A
   344 0000014A F4                          hlt
   345                                  
   346                                  ISR11_Handler_NP:
   347 0000014B 6687DB                      xchg    bx,bx
   348 0000014E B20B                        mov dl,0x0B
   349 00000150 F4                          hlt
   350                                  
   351                                  ISR12_Handler_SS:
   352 00000151 6687DB                      xchg    bx,bx
   353 00000154 B20C                        mov dl,0x0C
   354 00000156 F4                          hlt
   355                                  
   356                                  ; Funciono al no tener el CS al retornar de un call
   357                                  ISR13_Handler_GP:
   358 00000157 6687DB                      xchg    bx,bx
   359 0000015A B20D                        mov dl,0x0D
   360 0000015C CF                          iretd
   361                                  ;-----------------------------------
   362                                  ;----------Page Fault (#PF)---------
   363                                  ;-----------------------------------
   364                                  
   365                                  ;Error code
   366                                  ;The Page Fault sets an error code:
   367                                  ;
   368                                  ; 31              4               0
   369                                  ;+---+--  --+---+---+---+---+---+---+
   370                                  ;|   Reserved   | I | R | U | W | P |
   371                                  ;+---+--  --+---+---+---+---+---+---+
   372                                  ;Length	Name	Description
   373                                  ;P	1 bit	Present	When set, the page fault was caused by a page-protection violation. When not set, it was caused by a non-present page.
   374                                  ;W	1 bit	Write	When set, the page fault was caused by a write access. When not set, it was caused by a read access.
   375                                  ;U	1 bit	User	When set, the page fault was caused while CPL = 3. This does not necessarily mean that the page fault was a privilege violation.
   376                                  ;R	1 bit	Reserved write	When set, one or more page directory entries contain reserved bits which are set to 1. This only applies when the PSE or PAE flags in CR4 are set to 1.
   377                                  ;I	1 bit	Instruction Fetch	When set, the page fault was caused by an instruction fetch. This only applies when the No-Execute bit is supported and enabled.
   378                                  ISR14_Handler_PF:
   379 0000015D 6687DB                      xchg bx, bx
   380 00000160 FA                          cli                                     ; Deshabilito interrupciones.
   381 00000161 60                          pushad                                  ; Guardo registros.
   382 00000162 8B5C2420                    mov     ebx, [esp + 32]                 ; Guardo el Error Code. 
   383 00000166 891D[00000000]              mov     [error_code_PF], ebx
   384 0000016C 0F20D0                      mov     eax, cr2
   385 0000016F A3[00000000]                mov     [dir_lineal_page_fault], eax    ; Guardo dir. lineal VMA que falló
   386                                      ; -> Limpio pantalla.
   387 00000174 55                          push    ebp
   388 00000175 89E5                        mov     ebp, esp
   389 00000177 68[00000000]                push    __VGA_VMA
   390 0000017C E8(00000000)                call    limpiar_VGA                     
   391 00000181 C9                          leave
   392                                      ; -> Escribo mensaje de Page Fault.
   393 00000182 55                          push    ebp
   394 00000183 89E5                        mov     ebp, esp
   395 00000185 6A01                        push    1       ; Es ASCII
   396 00000187 6A0A                        push    10      ; Columna VGA
   397 00000189 6A00                        push    0       ; Fila    VGA
   398 0000018B 68[00000000]                push    page_fault_msg
   399 00000190 E8(00000000)                call    escribir_mensaje_VGA
   400 00000195 C9                          leave
   401                                       ; -> Escribo mensaje "La dir VMA es"
   402 00000196 55                          push    ebp
   403 00000197 89E5                        mov     ebp, esp
   404 00000199 6A01                        push    1       ; Es ASCII
   405 0000019B 6A0A                        push    10      ; Columna VGA
   406 0000019D 6A01                        push    1       ; Fila    VGA
   407 0000019F 68[00000000]                push    page_fault_msg_2
   408 000001A4 E8(00000000)                call    escribir_mensaje_VGA
   409 000001A9 C9                          leave
   410                                      ; -> Muestro la dir VMA no mapeada en PHY
   411 000001AA 55                          push    ebp
   412 000001AB 89E5                        mov     ebp, esp
   413 000001AD 6A1E                        push    30      ; Columna VGA
   414 000001AF 6A01                        push    1       ; Fila VGA
   415 000001B1 FF35[00000000]              push    dword[dir_lineal_page_fault]
   416 000001B7 E8(00000000)                call    mostrar_numero32_VGA
   417 000001BC C9                          leave
   418                                      ; -> Muestro el mensaje "Error Code:"
   419 000001BD 55                          push    ebp
   420 000001BE 89E5                        mov     ebp, esp
   421 000001C0 6A0A                        push    10      ; Columna VGA
   422 000001C2 6A02                        push    2       ; Fila VGA
   423 000001C4 68[00000000]                push    page_fault_msg_3
   424 000001C9 E8(00000000)                call    escribir_mensaje_VGA
   425 000001CE C9                          leave
   426                                      ; -> Muestro el valor del Error Code
   427 000001CF 55                          push    ebp
   428 000001D0 89E5                        mov     ebp, esp
   429 000001D2 6A1E                        push    30      ; Columna VGA
   430 000001D4 6A02                        push    2       ; Fila VGA
   431 000001D6 FF35[00000000]              push    dword[error_code_PF]
   432 000001DC E8(00000000)                call    mostrar_numero32_VGA
   433 000001E1 C9                          leave
   434                                  
   435                                      ;xchg    bx, bx 
   436                                      ; -> Analizo el Error Code
   437                                      ; Si es una Pagina no presente (Bit 0 = 0) debe repaginar.
   438 000001E2 83E31F                      and ebx, 0x1F   ; Bits 0 - 5 donde tengo los flags.
   439 000001E5 83FB00                      cmp ebx, 0x00
   440 000001E8 740A                        je pag_no_presente
   441 000001EA 83FB02                      cmp ebx, 0x02
   442 000001ED 7405                        je write_access
   443 000001EF E9D1000000                  jmp end_handler_PF
   444                                  pag_no_presente:
   445                                  write_access:
   446                                      ;xchg  bx, bx
   447                                  
   448                                      ;---------------------------------------------------
   449                                      ; -> -----------Guardo VMA de falla y Dir. Fisica en GPRs
   450                                      ;----------para poder re-paginar con la paginacion apagada-----------------
   451                                      ;---------------------------------------------------
   452                                      ; ->Guardo en edx la VMA de falla del CR2
   453 000001F4 31D2                        xor   edx, edx
   454 000001F6 8B15[00000000]              mov   edx, [dir_lineal_page_fault] 
   455                                      ; ->Guardo en ecx la Dir. Fisica dinamica
   456 000001FC 31C9                        xor   ecx, ecx
   457 000001FE 8B0D[00000000]              mov   ecx, [dir_phy_dinamica] 
   458                                      ;---------------------------------------------------
   459                                      ; -> -----------Apago la paginación-----------------
   460                                      ;---------------------------------------------------
   461 00000204 31C0                        xor   eax, eax
   462 00000206 0F20C0                      mov   eax, cr0 
   463 00000209 25FFFFFF7F                  and   eax, 0x7FFFFFFF
   464 0000020E 0F22C0                      mov   cr0, eax
   465                                      ; -> Debo realizar la paginación para la VMA que falló y 
   466                                      ; para la PHY 0x0A000000
   467                                      ; -> Cargo el PDE (Page Directory Entry) - De no existir, lo crea.
   468 00000211 52                          push    edx                                 ; Guardo edx (VMA de falla del CR2)
   469 00000212 51                          push    ecx                                 ; Guardo ecx (Dir. Fisica dinamica)
   470                                  
   471 00000213 55                          push    ebp
   472 00000214 89E5                        mov     ebp, esp
   473 00000216 6A01                        push    PAG_P_YES                           ; Presente: Indica si la página está en la memoria (P=1), generando una excepción #PF cuando se intenta acceder a una dirección de memoria que tiene al menos un de
   474 00000218 6A01                        push    PAG_RW_W                            ; Readable / Writable: Establece si la página es Read Only (0) o si puede ser escrita (1).
   475 0000021A 6A00                        push    PAG_US_SUP                          ; User / Supervisor: Privilegio de la P´agina: ’0’ Supervisor (Kernel), y ’1’ Usuario.
   476 0000021C 6A00                        push    PAG_PWT_NO                          ; Page-Level Write Through. Establece el modo de escritura que tendrá la página en el Cache.
   477 0000021E 6A00                        push    PAG_PCD_NO                          ; Page-Level Cache Disable. Establece que una página integre el tipo de memoria no cacheable.
   478 00000220 6A00                        push    PAG_A                               ; Accedido. Se setea cada vez que la página es accedida.
   479 00000222 6A00                        push    PAG_PS_4K                           ; Page Size: Existe solo en el DPT. Si es ’0’ la PDE corresponde a una PT de 4 Kbytes. Si es ’1’ a una página de 4Mbytes.
   480 00000224 52                          push    edx                                 ; Dir. Lineal VMA que produjo el #PF y traje del CR2. 
   481 00000225 68[00000000]                push    dword __PAGE_TABLES_PHY             ; Dir. Fisica(PHY) - Base de la DPT.
   482 0000022A E8(00000000)                call    set_dir_page_table_entry
   483 0000022F C9                          leave
   484                                  
   485 00000230 59                          pop    ecx                                  ; Leo ecx
   486 00000231 5A                          pop    edx                                  ; Leo edx
   487                                  
   488                                      ; -> Cargo la PTE (Page Table Entry)
   489 00000232 55                          push    ebp
   490 00000233 89E5                        mov     ebp, esp
   491 00000235 6A01                        push    PAG_P_YES
   492 00000237 6A01                        push    PAG_RW_W
   493 00000239 6A00                        push    PAG_US_SUP
   494 0000023B 6A00                        push    PAG_PWT_NO
   495 0000023D 6A00                        push    PAG_PCD_NO
   496 0000023F 6A00                        push    PAG_A
   497 00000241 6A00                        push    PAG_D
   498 00000243 6A00                        push    PAG_PAT
   499 00000245 6A00                        push    PAG_G_YES
   500 00000247 51                          push    ecx                             ; Dir física dinámica ( se va sumando de a 4K para nuevas páginas)
   501 00000248 52                          push    edx                             ; Dir. Lineal VMA que produjo el #PF y traje del CR2.
   502 00000249 68[00000000]                push    dword __PAGE_TABLES_PHY         ; PT inicializada antes de activar paginación.
   503 0000024E E8(00000000)                call    set_page_table_entry 
   504 00000253 C9                          leave
   505                                  
   506                                      ;---------------------------------------------------
   507                                      ; -> -----------Prendo la paginación-----------------
   508                                      ;---------------------------------------------------
   509 00000254 31C0                        xor   eax, eax
   510 00000256 0F20C0                      mov   eax, cr0 
   511 00000259 0D00000080                  or    eax, X86_CR0_PG
   512 0000025E 0F22C0                      mov   cr0, eax
   513                                  
   514                                      ;xchg    bx, bx 
   515                                      
   516                                      ; -> Analizo valor de la Dir. Fisica.
   517                                      ;xor     eax, eax
   518                                      ;mov     eax,[dir_phy_dinamica]
   519                                      ;and     eax, 0xFFFFF000                 ; 20 bits mas sig. poseen DIR_BASE_PAGE.
   520                                      ; -> Puedo paginar desde 0x1FFF8 a 0xA000 = 0x15FF8 -> 90.104 páginas de 4K.
   521                                      ; Lo limito en 90K páginas y luego las sobreescribo para no romper la memoria.
   522                                      ;cmp     eax, 0x15F90
   523                                      ;jle     resetear_dir_phy_dinamica    ;  0x01200025   dir_phy_dinamica
   524                                  
   525                                  
   526                                      ; -> Sumo 4K para mapear la próx. dir física.
   527 00000261 31DB                        xor     ebx, ebx
   528 00000263 8B1D[00000000]              mov     ebx, [dir_phy_dinamica]
   529 00000269 81C300100000                add     ebx, 0x1000                     ; Sumo 4k a la dir fisica
   530 0000026F 891D[00000000]              mov     [dir_phy_dinamica], ebx
   531                                      ; -> Sumo al contador de páginas de 4K creadas
   532 00000275 31DB                        xor     ebx, ebx
   533 00000277 8B1D[00000000]              mov     ebx, [paginas_creadas]
   534 0000027D 83C301                      add     ebx, 0x01
   535 00000280 891D[00000000]              mov     [paginas_creadas], ebx
   536                                      ; -> Limpio pantalla.
   537 00000286 55                          push    ebp
   538 00000287 89E5                        mov     ebp, esp
   539 00000289 68[00000000]                push    __VGA_VMA
   540 0000028E E8(00000000)                call    limpiar_VGA                     
   541 00000293 C9                          leave
   542                                      ; -> Muestro el mensaje "Cantidad de paginas de 4k creadas: ."
   543 00000294 55                          push    ebp
   544 00000295 89E5                        mov     ebp, esp
   545 00000297 6A2C                        push    44      ; Columna VGA
   546 00000299 6A0C                        push    12       ; Fila VGA
   547 0000029B 68[00000000]                push    page_fault_msg_6
   548 000002A0 E8(00000000)                call    escribir_mensaje_VGA
   549 000002A5 C9                          leave
   550                                       ; -> Muestro el valor de la cantidad de págs. creadas
   551 000002A6 55                          push    ebp
   552 000002A7 89E5                        mov     ebp, esp
   553 000002A9 6A4F                        push    79      ; Columna VGA
   554 000002AB 6A0D                        push    13       ; Fila VGA
   555 000002AD FF35[00000000]              push    dword[paginas_creadas]
   556 000002B3 E8(00000000)                call    mostrar_numero32_VGA
   557 000002B8 C9                          leave
   558                                  
   559 000002B9 EB0A                        jmp     end_handler_PF                  ; Finalizo el handler #PF
   560                                  
   561                                  
   562                                  resetear_dir_phy_dinamica:
   563 000002BB C705[00000000]0000-         mov     dword[dir_phy_dinamica], 0x0A000000
   563 000002C3 000A               
   564                                  end_handler_PF:
   565                                     
   566                                      ;xchg    bx, bx                          ; BREAK LUEGO DE PAGINAR.
   567                                  
   568 000002C5 61                          popad                       ; Tomo valores de registros guardados.
   569 000002C6 58                          pop eax                     ; Porque me queda un valor para ser popeado y poder retornar con CS:DIR LINEAL al punto donde se produjo el #PF
   570 000002C7 FB                          sti                         ; Habilito interrupciones.
   571 000002C8 CF                          iret
   572                                  
   573                                  ISR15_Handler_RES:
   574 000002C9 6687DB                      xchg    bx,bx
   575 000002CC B20F                        mov dl,0x0F
   576 000002CE F4                          hlt
   577                                  
   578                                  ISR16_Handler_MF:
   579 000002CF 6687DB                      xchg    bx,bx
   580 000002D2 B210                        mov dl,0x10
   581 000002D4 F4                          hlt
   582                                  
   583                                  ISR17_Handler_AC:
   584 000002D5 6687DB                      xchg    bx,bx
   585 000002D8 B211                        mov dl,0x11
   586 000002DA F4                          hlt
   587                                  
   588                                  ISR18_Handler_MC:
   589 000002DB 6687DB                      xchg    bx,bx
   590 000002DE B212                        mov dl,0x12
   591 000002E0 F4                          hlt
   592                                  
   593                                  ISR19_Handler_XM:
   594 000002E1 6687DB                      xchg    bx,bx
   595 000002E4 B213                        mov dl,0x13
   596 000002E6 F4                          hlt
   597                                  ; System Call Handler
   598                                  ISR128_Handler_SC:
   599                                  
   600                                      ; -> Analizo que sys call fue requerida por la tarea de nivel usuario
   601 000002E7 FB                          sti
   602                                  
   603 000002E8 83F801                      cmp eax, SYS_READ
   604 000002EB 740F                        je sys_read
   605                                  
   606 000002ED 83F802                      cmp eax, SYS_PRINT
   607 000002F0 7418                        je sys_print
   608                                  
   609 000002F2 83F803                      cmp eax, SYS_PRINT_VGA
   610 000002F5 743B                        je sys_print_VGA
   611                                  
   612 000002F7 83F800                      cmp eax, SYS_HALT
   613 000002FA 7467                        je sys_hlt
   614                                  
   615                                  ; Lectura de palabras de 64 bits (8 bytes)
   616                                  sys_read:
   617                                  
   618 000002FC 55                          push    ebp
   619 000002FD 89E5                        mov     ebp, esp 
   620 000002FF 51                          push    ecx         ; Tamaño de tabla
   621 00000300 57                          push    edi          ; Tabla destino
   622 00000301 56                          push    esi          ; Tabla fuente
   623 00000302 E8(00000000)                call    __fast_memcpy
   624 00000307 C9                          leave
   625                                  
   626 00000308 EB5C                        jmp SYS_CALL_FIN
   627                                  
   628                                  sys_print:
   629                                  
   630 0000030A 83FB01                      cmp ebx, 1 
   631 0000030D 740F                        je print_byte
   632                                  
   633 0000030F 83FB02                      cmp ebx, 2 
   634 00000312 740E                        je print_word
   635                                  
   636 00000314 83FB03                      cmp ebx, 3 
   637 00000317 740E                        je print_dword
   638                                  
   639 00000319 83FB04                      cmp ebx, 4 
   640 0000031C 740D                        je print_qword
   641                                  
   642                                  ;8bits
   643                                  print_byte:
   644 0000031E 880F                        mov byte [edi], cl
   645 00000320 EB44                        jmp SYS_CALL_FIN
   646                                  
   647                                  ;16bits
   648                                  print_word:
   649 00000322 66890F                      mov word [edi], cx
   650 00000325 EB3F                        jmp SYS_CALL_FIN
   651                                  
   652                                  ;32bits
   653                                  print_dword:
   654 00000327 890F                        mov dword [edi], ecx
   655 00000329 EB3B                        jmp SYS_CALL_FIN
   656                                  
   657                                  ;64bits
   658                                  print_qword:
   659 0000032B 890F                        mov dword [edi], ecx
   660 0000032D 895704                      mov dword [edi + 4], edx            ;parte alta 
   661 00000330 EB34                        jmp SYS_CALL_FIN
   662                                  
   663                                  sys_print_VGA:
   664                                  
   665 00000332 83FB01                      cmp ebx, 1
   666 00000335 740F                        je print_VGA_msg
   667                                  
   668 00000337 83FB02                      cmp ebx, 2
   669 0000033A 7419                        je print_VGA_word
   670                                  
   671 0000033C 83FB03                      cmp ebx, 3
   672 0000033F 7414                        je print_VGA_dword
   673                                  
   674 00000341 83FB04                      cmp ebx, 4
   675 00000344 740F                        je print_VGA_qword
   676                                  
   677                                  print_VGA_msg:
   678                                  
   679 00000346 55                          push    ebp
   680 00000347 89E5                        mov     ebp, esp
   681 00000349 56                          push    esi                    ; Flag ASCII
   682 0000034A 51                          push    ecx                    ; Columna VGA
   683 0000034B 52                          push    edx                    ; Fila VGA
   684 0000034C 57                          push    edi                    ; Mensaje fijo
   685 0000034D E8(00000000)                call    escribir_mensaje_VGA
   686 00000352 C9                          leave
   687 00000353 EB11                        jmp SYS_CALL_FIN
   688                                  
   689                                  print_VGA_byte:
   690                                  
   691                                  print_VGA_word:
   692                                  
   693                                  print_VGA_dword:
   694                                  
   695                                  print_VGA_qword:
   696                                      ;xchg bx, bx
   697                                  
   698 00000355 55                          push    ebp
   699 00000356 89E5                        mov     ebp, esp
   700 00000358 51                          push    ecx                    ; Columna VGA
   701 00000359 52                          push    edx                    ; Fila VGA
   702 0000035A 57                          push    edi                    ; Numero de 64 bits
   703 0000035B E8(00000000)                call    mostrar_promedio64_VGA
   704 00000360 C9                          leave
   705 00000361 EB03                        jmp SYS_CALL_FIN
   706                                  
   707                                  sys_hlt:
   708                                  
   709 00000363 F4                          hlt
   710 00000364 EBFD                        jmp sys_hlt
   711                                  ;    add esp, 12
   712                                  SYS_CALL_FIN:
   713                                  
   714 00000366 CF                          iret            ; Vuelvo a la tarea de usuario
   715                                  
