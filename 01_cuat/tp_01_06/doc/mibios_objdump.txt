
./bin/mibios.elf:     file format elf32-i386
./bin/mibios.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xfffffff0

Program Header:
    LOAD off    0x00001000 vaddr 0xffff0000 paddr 0xffff0000 align 2**12
         filesz 0x00000066 memsz 0x00000066 flags r--
    LOAD off    0x00002000 vaddr 0x00210000 paddr 0xffff1000 align 2**12
         filesz 0x0000001c memsz 0x0000001c flags rw-
    LOAD off    0x00003000 vaddr 0x00010000 paddr 0xffff2000 align 2**12
         filesz 0x000002b6 memsz 0x000002b6 flags r-x
    LOAD off    0x00004000 vaddr 0x00202000 paddr 0xffff3000 align 2**12
         filesz 0x0000001a memsz 0x0000001a flags r--
    LOAD off    0x00005000 vaddr 0x00100000 paddr 0xffff4000 align 2**12
         filesz 0x0000006d memsz 0x0000006d flags r--
    LOAD off    0x00005800 vaddr 0xfffff800 paddr 0xfffff800 align 2**12
         filesz 0x0000043c memsz 0x0000043c flags r-x
    LOAD off    0x00006000 vaddr 0x00000000 paddr 0xfffffd00 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r--
    LOAD off    0x00006ff0 vaddr 0xfffffff0 paddr 0xfffffff0 align 2**12
         filesz 0x00000010 memsz 0x00000010 flags r--
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sys_tables_32 0000019c  00000000  fffffd00  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .functions    000002b6  00010000  ffff2000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .handlers     0000006d  00100000  ffff4000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .codigo_kernel32 0000001a  00202000  ffff3000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000001c  00210000  ffff1000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .codigo_init16 00000066  ffff0000  ffff0000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .codigo_init32 000000d5  fffff800  fffff800  00005800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .functions_rom 0000003c  fffffc00  fffffc00  00005c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .codigo_reset 00000010  fffffff0  fffffff0  00006ff0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .comment      00000029  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .sys_tables_32	00000000 .sys_tables_32
00010000 l    d  .functions	00000000 .functions
00100000 l    d  .handlers	00000000 .handlers
00202000 l    d  .codigo_kernel32	00000000 .codigo_kernel32
00210000 l    d  .data	00000000 .data
ffff0000 l    d  .codigo_init16	00000000 .codigo_init16
fffff800 l    d  .codigo_init32	00000000 .codigo_init32
fffffc00 l    d  .functions_rom	00000000 .functions_rom
fffffff0 l    d  .codigo_reset	00000000 .codigo_reset
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 src/sys_tables.s
00000010 l       *ABS*	00000000 H_ISRXX_Handler
00000000 l       .sys_tables_32	00000000 GDT_32
00000000 l       *ABS*	00000000 NULL_SEL
00000018 l       *ABS*	00000000 GDT_LENGTH
0000001e l       .sys_tables_32	00000000 IDT
00000000 l       *ABS*	00000000 ISR00_IDT
00000008 l       *ABS*	00000000 ISR01_IDT
00000010 l       *ABS*	00000000 ISR02_IDT
00000018 l       *ABS*	00000000 ISR03_IDT
00000020 l       *ABS*	00000000 ISR04_IDT
00000028 l       *ABS*	00000000 ISR05_IDT
00000030 l       *ABS*	00000000 ISR06_IDT
00000038 l       *ABS*	00000000 ISR07_IDT
00000040 l       *ABS*	00000000 ISR08_IDT
00000048 l       *ABS*	00000000 ISR09_IDT
00000050 l       *ABS*	00000000 ISR10_IDT
00000058 l       *ABS*	00000000 ISR11_IDT
00000060 l       *ABS*	00000000 ISR12_IDT
00000068 l       *ABS*	00000000 ISR13_IDT
00000070 l       *ABS*	00000000 ISR14_IDT
00000078 l       *ABS*	00000000 ISR15_IDT
00000080 l       *ABS*	00000000 ISR16_IDT
00000088 l       *ABS*	00000000 ISR17_IDT
00000090 l       *ABS*	00000000 ISR18_IDT
00000098 l       *ABS*	00000000 ISR19_IDT
000000a0 l       *ABS*	00000000 ISR20to31_idt
00000100 l       *ABS*	00000000 ISR32_IRQ_0
00000108 l       *ABS*	00000000 ISR32_IRQ_1
00000110 l       *ABS*	00000000 ISR32_IRQ_2_15
00000178 l       *ABS*	00000000 IDT_LENGTH
00000000 l    df *ABS*	00000000 functions.c
00210014 l     O .data	00000004 i.1454
00210018 l     O .data	00000004 i.1473
00000000 l    df *ABS*	00000000 src/functions_asm.s
00000000 l    df *ABS*	00000000 src/handlers_32.s
00100000 l       *ABS*	00000000 VMA_ISR_TECLADO
00000033 l       .handlers	00000000 L_ISR01_Handler_DB
00100000 l       .handlers	00000000 IRQ01_Handler
00100027 l       .handlers	00000000 end_handler_teclado
0010002d l       .handlers	00000000 ISR00_Handler_DE
00100033 l       .handlers	00000000 ISR01_Handler_DB
00100036 l       .handlers	00000000 ISR02_Handler_NMI
00100039 l       .handlers	00000000 ISR03_Handler_BP
0010003c l       .handlers	00000000 ISR04_Handler_OF
0010003f l       .handlers	00000000 ISR05_Handler_BR
00100042 l       .handlers	00000000 ISR06_Handler_UD
00100048 l       .handlers	00000000 ISR07_Handler_NM
0010004b l       .handlers	00000000 ISR08_Handler_DF
0010004e l       .handlers	00000000 ISR10_Handler_TS
00100051 l       .handlers	00000000 ISR11_Handler_NP
00100054 l       .handlers	00000000 ISR12_Handler_SS
00100057 l       .handlers	00000000 ISR13_Handler_GP
0010005b l       .handlers	00000000 ISR14_Handler_PF
0010005e l       .handlers	00000000 ISR15_Handler_RES
00100061 l       .handlers	00000000 ISR16_Handler_MF
00100064 l       .handlers	00000000 ISR17_Handler_AC
00100067 l       .handlers	00000000 ISR18_Handler_MC
0010006a l       .handlers	00000000 ISR19_Handler_XM
00000000 l    df *ABS*	00000000 src/main.s
0000001a l       *ABS*	00000000 kernel21_code_size
0000000a l       *ABS*	00000000 CANTIDAD_DATOS
00000010 l       *ABS*	00000000 LONG_BUFFER
00202015 l       .codigo_kernel32	00000000 main
00202017 l       .codigo_kernel32	00000000 guard
0020201a l       .codigo_kernel32	00000000 kernel32_end
00000000 l    df *ABS*	00000000 functions_rom.c
00000000 l    df *ABS*	00000000 src/init16.s
ffff003f l       .codigo_init16	00000000 fault_end
ffff0040 l       .codigo_init16	00000000 GDT
00000000 l       *ABS*	00000000 NULL_SEL_16
00000008 l       *ABS*	00000000 CS_SEL_16
00000010 l       *ABS*	00000000 CS_SEL_32_prim
00000020 l       *ABS*	00000000 GDT_LENGTH
ffff0060 l       .codigo_init16	00000000 gdtr_16
00000000 l    df *ABS*	00000000 src/init32.s
fffff81a l       .codigo_init32	00000000 start32_launcher.stack_init
fffff8d2 l       .codigo_init32	00000000 start32_launcher.guard
00000000 l    df *ABS*	00000000 src/reset.s
fffffff5 l       .codigo_reset	00000000 halted
00000036 g       .handlers	00000000 L_ISR02_Handler_NMI
0000001c g       *ABS*	00000000 __data_size
fffffff0 g       *ABS*	00000000 __RESET_LMA
0000004b g       .handlers	00000000 L_ISR08_Handler_DF
ffff2000 g       *ABS*	00000000 __FUNCTIONS_LMA
0000006d g       *ABS*	00000000 __handlers_32_size
000002b6 g       *ABS*	00000000 __functions_size
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_LMA
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_LMA
00000018 g       *ABS*	00000000 DS_SEL_32_prim
fffffff0 g       .codigo_reset	00000000 reset
00100000 g       *ABS*	00000000 __TECLADO_ISR_VMA
2fff8000 g       *ABS*	00000000 __STACK_START_32
00010000 g       *ABS*	00000000 __FUNCTIONS_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_VMA
00010289 g       .functions	00000000 init_pic
0001003c g     F .functions	0000004a limpiar_buffer
00000061 g       .handlers	00000000 L_ISR16_Handler_MF
00000054 g       .handlers	00000000 L_ISR12_Handler_SS
00000042 g       .handlers	00000000 L_ISR06_Handler_UD
00010222 g     F .functions	00000067 leer_buffer
00000039 g       .handlers	00000000 L_ISR03_Handler_BP
00000000 g       *ABS*	00000000 __SYS_TABLES_VMA
00009000 g       *ABS*	00000000 __STACK_START_16
ffff4000 g       *ABS*	00000000 __TECLADO_ISR_LMA
00202000 g       .codigo_kernel32	00000000 kernel32_init
00000196 g       .sys_tables_32	00000000 _idtr_32
000101ac g     F .functions	00000076 escribir_tabla_digitos
00000057 g       .handlers	00000000 L_ISR13_Handler_GP
0000004e g       .handlers	00000000 L_ISR10_Handler_TS
2fff8fff g       *ABS*	00000000 __STACK_END_32
00202000 g       *ABS*	00000000 __KERNEL_32_VMA
00010000 g     F .functions	0000003c __fast_memcpy
0001013f g     F .functions	0000006d escribir_buffer
00210000 g       .data	00000000 memoria_buffer_reservada
00000048 g       .handlers	00000000 L_ISR07_Handler_NM
00000008 g       *ABS*	00000000 CS_SEL_32
00000018 g       .sys_tables_32	00000000 _gdtr_32
00000010 g       *ABS*	00000000 DS_SEL_32
000003ff g       *ABS*	00000000 __STACK_SIZE_32
00009fff g       *ABS*	00000000 __STACK_END_16
ffff3000 g       *ABS*	00000000 __KERNEL_32_LMA
00000064 g       .handlers	00000000 L_ISR17_Handler_AC
fffffff0 g       *ABS*	00000000 __RESET_VMA
0000002d g       .handlers	00000000 L_ISR00_Handler_DE
0000006a g       .handlers	00000000 L_ISR19_Handler_XM
0000005b g       .handlers	00000000 L_ISR14_Handler_PF
0000003c g       .handlers	00000000 L_ISR04_Handler_OF
00000067 g       .handlers	00000000 L_ISR18_Handler_MC
fffff800 g       *ABS*	00000000 __INIT_32_VMA
00060000 g       *ABS*	00000000 __EH_FRAME
00200000 g       *ABS*	00000000 __DIGITS_TABLE
0000019c g       *ABS*	00000000 __sys_tables_size
0000003f g       .handlers	00000000 L_ISR05_Handler_BR
ffff0000 g       .codigo_init16	00000000 start16
00210000 g       *ABS*	00000000 __DATA_VMA
fffff800 g       *ABS*	00000000 __INIT_32_LMA
fffffd00 g       *ABS*	00000000 __SYS_TABLES_LMA
0000001a g       *ABS*	00000000 __codigo_kernel32_size
fffffc00 g     F .functions_rom	0000003c __fast_memcpy_rom
00010086 g     F .functions	000000b9 determinar_tecla_presionada
fffff800 g       .codigo_init32	00000000 start32_launcher
ffff1000 g       *ABS*	00000000 __DATA_LMA
00000000 g       .handlers	00000000 L_IRQ01_Handler
00000051 g       .handlers	00000000 L_ISR11_Handler_NP


Contents of section .sys_tables_32:
 0000 00000000 00000000 ffff0000 0099cf00  ................
 0010 ffff0000 0092cf00 17000000 00002d00  ..............-.
 0020 0800008f 10000000 00000000 00003600  ..............6.
 0030 0800008f 10003900 0800008f 10003c00  ......9.......<.
 0040 0800008f 10003f00 0800008f 10004200  ......?.......B.
 0050 0800008f 10004800 0800008f 10004b00  ......H.......K.
 0060 0800008f 10000000 00000000 00004e00  ..............N.
 0070 0800008f 10005100 0800008f 10005400  ......Q.......T.
 0080 0800008f 10005700 0800008f 10005b00  ......W.......[.
 0090 0800008f 10000000 00000000 00006100  ..............a.
 00a0 0800008f 10006400 0800008f 10006700  ......d.......g.
 00b0 0800008f 10006a00 0800008f 10000000  ......j.........
 00c0 00000000 00000000 00000000 00000000  ................
 00d0 00000000 00000000 00000000 00000000  ................
 00e0 00000000 00000000 00000000 00000000  ................
 00f0 00000000 00000000 00000000 00000000  ................
 0100 00000000 00000000 00000000 00000000  ................
 0110 00000000 00000000 00000000 00000000  ................
 0120 00000000 00000000 0800008e 10000000  ................
 0130 00000000 00000000 00000000 00000000  ................
 0140 00000000 00000000 00000000 00000000  ................
 0150 00000000 00000000 00000000 00000000  ................
 0160 00000000 00000000 00000000 00000000  ................
 0170 00000000 00000000 00000000 00000000  ................
 0180 00000000 00000000 00000000 00000000  ................
 0190 00000000 00007701 1e000000           ......w.....    
Contents of section .functions:
 10000 5589e583 ec10c645 ff00837d 10007426  U......E...}..t&
 10010 eb1a836d 10018b55 088d4204 8945088b  ...m...U..B..E..
 10020 450c8d48 04894d0c 8b128910 837d1000  E..H..M......}..
 10030 75e0c645 ff010fb6 45ffc9c3 5589e58b  u..E....E...U...
 10040 4508c640 10008b45 08c64011 008b4508  E..@...E..@...E.
 10050 c6401200 c7051400 21000000 0000eb19  .@......!.......
 10060 a1140021 008b5508 c6040200 a1140021  ...!..U........!
 10070 0083c001 a3140021 00a11400 210083f8  .......!....!...
 10080 0f7edd90 5dc35589 e583ec28 8b450888  .~..].U....(.E..
 10090 45e4c645 f600807d e401762f 807de40a  E..E...}..v/.}..
 100a0 7729807d e40a7506 c645f709 eb0a0fb6  w).}..u..E......
 100b0 45e483e8 018845f7 0fb645f7 83ec08ff  E.....E...E.....
 100c0 750c50e8 77000000 83c4108b 450c0fb6  u.P.w.......E...
 100d0 40123c0f 760b8b45 0c0fb640 1084c074  @.<.v..E...@...t
 100e0 11807de4 1c75278b 450c0fb6 40123c0f  ..}..u'.E...@.<.
 100f0 761cc645 f6000fb6 45f683ec 04506800  v..E....E....Ph.
 10100 002000ff 750ce8a1 00000083 c4108b45  . ..u..........E
 10110 0c0fb640 123c0e77 23807de4 1c751dc6  ...@.<.w#.}..u..
 10120 45f6010f b645f683 ec045068 00002000  E....E....Ph.. .
 10130 ff750ce8 74000000 83c41090 90c9c355  .u..t..........U
 10140 89e583ec 048b4508 8845fc8b 450c0fb6  ......E..E..E...
 10150 40123c0f 77488b45 0c0fb640 100fb6c0  @.<.wH.E...@....
 10160 8b550c0f b64dfc88 0c028b45 0c0fb640  .U...M.....E...@
 10170 128d5001 8b450c88 50128b45 0c0fb640  ..P..E..P..E...@
 10180 108d5001 8b450c88 50108b45 0c0fb640  ..P..E..P..E...@
 10190 103c1075 148b450c c6401000 eb0bff75  .<.u..E..@.....u
 101a0 0ce896fe ffff83c4 0490c9c3 5589e583  ............U...
 101b0 ec288b45 108845e4 6687dbc7 05180021  .(.E..E.f......!
 101c0 00000000 00eb4b83 ec0cff75 08e85000  ......K....u..P.
 101d0 000083c4 108845ef 8b45f000 45ef8b45  ......E..E..E..E
 101e0 f46bd00a 8b45f06b c0008d0c 02b80a00  .k...E.k........
 101f0 0000f765 f001d189 ca8945f0 8955f489  ...e......E..U..
 10200 45f08955 f4a11800 210083c0 01a31800  E..U....!.......
 10210 2100a118 00210083 f80f7eab 6687db90  !....!....~.f...
 10220 c9c35589 e583ec10 c645ffff 8b45080f  ..U......E...E..
 10230 b6401284 c0744c8b 45080fb6 40110fb6  .@...tL.E...@...
 10240 c08b5508 0fb60402 8845ff8b 45080fb6  ..U......E..E...
 10250 40128d50 ff8b4508 8850128b 45080fb6  @..P..E..P..E...
 10260 40118d50 018b4508 8850118b 45080fb6  @..P..E..P..E...
 10270 40113c10 75078b45 08c64011 000fb645  @.<.u..E..@....E
 10280 ffeb040f b645ffc9 c3b011e6 20b020e6  .....E...... . .
 10290 21b004e6 21b001e6 21b0fde6 21b011e6  !...!...!...!...
 102a0 a0b028e6 a1b002e6 a1b001e6 a1b0ffe6  ..(.............
 102b0 a1b0fce6 21c3                        ....!.          
Contents of section .handlers:
 100000 60b22131 c0e46424 013c0175 1ae46088  `.!1..d$.<.u..`.
 100010 c380e380 80fb8074 0e680000 210050e8  .......t.h..!.P.
 100020 6200f1ff 83c408b0 20e62061 cf6687db  b....... . a.f..
 100030 b200f4b2 01f4b202 f4b203f4 b204f4b2  ................
 100040 05f46687 dbb206f4 b207f4b2 08f4b20a  ..f.............
 100050 f4b20bf4 b20cf4b2 0df4cfb2 0ef4b20f  ................
 100060 f4b210f4 b211f4b2 12f4b213 f4        .............   
Contents of section .codigo_kernel32:
 202000 31c031db 31c931d2 68000021 00e82ae0  1.1.1.1.h..!..*.
 202010 e0ff83c4 04ebfef4 ebfd               ..........      
Contents of section .data:
 210000 00000000 00000000 00000000 00000000  ................
 210010 00000000 00000000 00000000           ............    
Contents of section .codigo_init16:
 ffff0000 66a90000 00007537 6631c00f 22d88cc8  f.....u7f1.."...
 ffff0010 8ed8b800 908ed0bc ff9f0f20 c0660d00  ........... .f..
 ffff0020 0000600f 22c00f09 660f0116 60000f01  ..`."...f...`...
 ffff0030 e083c801 0f01f066 ea00f8ff ff1000f4  .......f........
 ffff0040 00000000 00000000 ffff0000 ff9940ff  ..............@.
 ffff0050 ffff0000 0099cf00 ffff0000 0092cf00  ................
 ffff0060 1f004000 ffff                        ..@...          
Contents of section .codigo_init32:
 fffff800 66b81800 8ed88ec0 8ee88ee0 8ed0bcff  f...............
 fffff810 8fff2f31 c0b9ff03 000050e2 fdbcff8f  ../1......P.....
 fffff820 ff2f5589 e568b602 00006800 00010068  ./U..h....h....h
 fffff830 0020ffff e8c70300 00c983f8 010f858f  . ..............
 fffff840 00000055 89e5681a 00000068 00202000  ...U..h....h.  .
 fffff850 680030ff ffe8a607 0100c983 f8017572  h.0...........ur
 fffff860 5589e568 6d000000 68000010 00680040  U..hm...h....h.@
 fffff870 ffffe889 070100c9 83f80175 555589e5  ...........uUU..
 fffff880 681c0000 00680000 21006800 10ffffe8  h....h..!.h.....
 fffff890 6c070100 c983f801 75385589 e5689c01  l.......u8U..h..
 fffff8a0 00006800 00000068 00fdffff e84f0701  ..h....h.....O..
 fffff8b0 00c983f8 01751b0f 01151800 00000f01  .....u..........
 fffff8c0 1d960100 00fbe8be 090100ea 00202000  .............  .
 fffff8d0 0800f4eb fd                          .....           
Contents of section .functions_rom:
 fffffc00 5589e583 ec10c645 ff00837d 10007426  U......E...}..t&
 fffffc10 eb1a836d 10018b55 088d4204 8945088b  ...m...U..B..E..
 fffffc20 450c8d48 04894d0c 8b128910 837d1000  E..H..M......}..
 fffffc30 75e0c645 ff010fb6 45ffc9c3           u..E....E...    
Contents of section .codigo_reset:
 fffffff0 fafce90b 00f4ebfd 90909090 90909090  ................
Contents of section .comment:
 0000 4743433a 20285562 756e7475 20372e35  GCC: (Ubuntu 7.5
 0010 2e302d33 7562756e 7475317e 31382e30  .0-3ubuntu1~18.0
 0020 34292037 2e352e30 00                 4) 7.5.0.       

Disassembly of section .functions:
00010000 <__fast_memcpy> push   %ebp
00010001 <__fast_memcpy+0x1> mov    %esp,%ebp
00010003 <__fast_memcpy+0x3> sub    $0x10,%esp
00010006 <__fast_memcpy+0x6> movb   $0x0,-0x1(%ebp)
0001000a <__fast_memcpy+0xa> cmpl   $0x0,0x10(%ebp)
0001000e <__fast_memcpy+0xe> je     00010036 <__fast_memcpy+0x36>
00010010 <__fast_memcpy+0x10> jmp    0001002c <__fast_memcpy+0x2c>
00010012 <__fast_memcpy+0x12> subl   $0x1,0x10(%ebp)
00010016 <__fast_memcpy+0x16> mov    0x8(%ebp),%edx
00010019 <__fast_memcpy+0x19> lea    0x4(%edx),%eax
0001001c <__fast_memcpy+0x1c> mov    %eax,0x8(%ebp)
0001001f <__fast_memcpy+0x1f> mov    0xc(%ebp),%eax
00010022 <__fast_memcpy+0x22> lea    0x4(%eax),%ecx
00010025 <__fast_memcpy+0x25> mov    %ecx,0xc(%ebp)
00010028 <__fast_memcpy+0x28> mov    (%edx),%edx
0001002a <__fast_memcpy+0x2a> mov    %edx,(%eax)
0001002c <__fast_memcpy+0x2c> cmpl   $0x0,0x10(%ebp)
00010030 <__fast_memcpy+0x30> jne    00010012 <__fast_memcpy+0x12>
00010032 <__fast_memcpy+0x32> movb   $0x1,-0x1(%ebp)
00010036 <__fast_memcpy+0x36> movzbl -0x1(%ebp),%eax
0001003a <__fast_memcpy+0x3a> leave  
0001003b <__fast_memcpy+0x3b> ret    
0001003c <limpiar_buffer> push   %ebp
0001003d <limpiar_buffer+0x1> mov    %esp,%ebp
0001003f <limpiar_buffer+0x3> mov    0x8(%ebp),%eax
00010042 <limpiar_buffer+0x6> movb   $0x0,0x10(%eax)
00010046 <limpiar_buffer+0xa> mov    0x8(%ebp),%eax
00010049 <limpiar_buffer+0xd> movb   $0x0,0x11(%eax)
0001004d <limpiar_buffer+0x11> mov    0x8(%ebp),%eax
00010050 <limpiar_buffer+0x14> movb   $0x0,0x12(%eax)
00010054 <limpiar_buffer+0x18> movl   $0x0,0x210014
0001005e <limpiar_buffer+0x22> jmp    00010079 <limpiar_buffer+0x3d>
00010060 <limpiar_buffer+0x24> mov    0x210014,%eax
00010065 <limpiar_buffer+0x29> mov    0x8(%ebp),%edx
00010068 <limpiar_buffer+0x2c> movb   $0x0,(%edx,%eax,1)
0001006c <limpiar_buffer+0x30> mov    0x210014,%eax
00010071 <limpiar_buffer+0x35> add    $0x1,%eax
00010074 <limpiar_buffer+0x38> mov    %eax,0x210014
00010079 <limpiar_buffer+0x3d> mov    0x210014,%eax
0001007e <limpiar_buffer+0x42> cmp    $0xf,%eax
00010081 <limpiar_buffer+0x45> jle    00010060 <limpiar_buffer+0x24>
00010083 <limpiar_buffer+0x47> nop
00010084 <limpiar_buffer+0x48> pop    %ebp
00010085 <limpiar_buffer+0x49> ret    
00010086 <determinar_tecla_presionada> push   %ebp
00010087 <determinar_tecla_presionada+0x1> mov    %esp,%ebp
00010089 <determinar_tecla_presionada+0x3> sub    $0x28,%esp
0001008c <determinar_tecla_presionada+0x6> mov    0x8(%ebp),%eax
0001008f <determinar_tecla_presionada+0x9> mov    %al,-0x1c(%ebp)
00010092 <determinar_tecla_presionada+0xc> movb   $0x0,-0xa(%ebp)
00010096 <determinar_tecla_presionada+0x10> cmpb   $0x1,-0x1c(%ebp)
0001009a <determinar_tecla_presionada+0x14> jbe    000100cb <determinar_tecla_presionada+0x45>
0001009c <determinar_tecla_presionada+0x16> cmpb   $0xa,-0x1c(%ebp)
000100a0 <determinar_tecla_presionada+0x1a> ja     000100cb <determinar_tecla_presionada+0x45>
000100a2 <determinar_tecla_presionada+0x1c> cmpb   $0xa,-0x1c(%ebp)
000100a6 <determinar_tecla_presionada+0x20> jne    000100ae <determinar_tecla_presionada+0x28>
000100a8 <determinar_tecla_presionada+0x22> movb   $0x9,-0x9(%ebp)
000100ac <determinar_tecla_presionada+0x26> jmp    000100b8 <determinar_tecla_presionada+0x32>
000100ae <determinar_tecla_presionada+0x28> movzbl -0x1c(%ebp),%eax
000100b2 <determinar_tecla_presionada+0x2c> sub    $0x1,%eax
000100b5 <determinar_tecla_presionada+0x2f> mov    %al,-0x9(%ebp)
000100b8 <determinar_tecla_presionada+0x32> movzbl -0x9(%ebp),%eax
000100bc <determinar_tecla_presionada+0x36> sub    $0x8,%esp
000100bf <determinar_tecla_presionada+0x39> pushl  0xc(%ebp)
000100c2 <determinar_tecla_presionada+0x3c> push   %eax
000100c3 <determinar_tecla_presionada+0x3d> call   0001013f <escribir_buffer>
000100c8 <determinar_tecla_presionada+0x42> add    $0x10,%esp
000100cb <determinar_tecla_presionada+0x45> mov    0xc(%ebp),%eax
000100ce <determinar_tecla_presionada+0x48> movzbl 0x12(%eax),%eax
000100d2 <determinar_tecla_presionada+0x4c> cmp    $0xf,%al
000100d4 <determinar_tecla_presionada+0x4e> jbe    000100e1 <determinar_tecla_presionada+0x5b>
000100d6 <determinar_tecla_presionada+0x50> mov    0xc(%ebp),%eax
000100d9 <determinar_tecla_presionada+0x53> movzbl 0x10(%eax),%eax
000100dd <determinar_tecla_presionada+0x57> test   %al,%al
000100df <determinar_tecla_presionada+0x59> je     000100f2 <determinar_tecla_presionada+0x6c>
000100e1 <determinar_tecla_presionada+0x5b> cmpb   $0x1c,-0x1c(%ebp)
000100e5 <determinar_tecla_presionada+0x5f> jne    0001010e <determinar_tecla_presionada+0x88>
000100e7 <determinar_tecla_presionada+0x61> mov    0xc(%ebp),%eax
000100ea <determinar_tecla_presionada+0x64> movzbl 0x12(%eax),%eax
000100ee <determinar_tecla_presionada+0x68> cmp    $0xf,%al
000100f0 <determinar_tecla_presionada+0x6a> jbe    0001010e <determinar_tecla_presionada+0x88>
000100f2 <determinar_tecla_presionada+0x6c> movb   $0x0,-0xa(%ebp)
000100f6 <determinar_tecla_presionada+0x70> movzbl -0xa(%ebp),%eax
000100fa <determinar_tecla_presionada+0x74> sub    $0x4,%esp
000100fd <determinar_tecla_presionada+0x77> push   %eax
000100fe <determinar_tecla_presionada+0x78> push   $0x200000
00010103 <determinar_tecla_presionada+0x7d> pushl  0xc(%ebp)
00010106 <determinar_tecla_presionada+0x80> call   000101ac <escribir_tabla_digitos>
0001010b <determinar_tecla_presionada+0x85> add    $0x10,%esp
0001010e <determinar_tecla_presionada+0x88> mov    0xc(%ebp),%eax
00010111 <determinar_tecla_presionada+0x8b> movzbl 0x12(%eax),%eax
00010115 <determinar_tecla_presionada+0x8f> cmp    $0xe,%al
00010117 <determinar_tecla_presionada+0x91> ja     0001013c <determinar_tecla_presionada+0xb6>
00010119 <determinar_tecla_presionada+0x93> cmpb   $0x1c,-0x1c(%ebp)
0001011d <determinar_tecla_presionada+0x97> jne    0001013c <determinar_tecla_presionada+0xb6>
0001011f <determinar_tecla_presionada+0x99> movb   $0x1,-0xa(%ebp)
00010123 <determinar_tecla_presionada+0x9d> movzbl -0xa(%ebp),%eax
00010127 <determinar_tecla_presionada+0xa1> sub    $0x4,%esp
0001012a <determinar_tecla_presionada+0xa4> push   %eax
0001012b <determinar_tecla_presionada+0xa5> push   $0x200000
00010130 <determinar_tecla_presionada+0xaa> pushl  0xc(%ebp)
00010133 <determinar_tecla_presionada+0xad> call   000101ac <escribir_tabla_digitos>
00010138 <determinar_tecla_presionada+0xb2> add    $0x10,%esp
0001013b <determinar_tecla_presionada+0xb5> nop
0001013c <determinar_tecla_presionada+0xb6> nop
0001013d <determinar_tecla_presionada+0xb7> leave  
0001013e <determinar_tecla_presionada+0xb8> ret    
0001013f <escribir_buffer> push   %ebp
00010140 <escribir_buffer+0x1> mov    %esp,%ebp
00010142 <escribir_buffer+0x3> sub    $0x4,%esp
00010145 <escribir_buffer+0x6> mov    0x8(%ebp),%eax
00010148 <escribir_buffer+0x9> mov    %al,-0x4(%ebp)
0001014b <escribir_buffer+0xc> mov    0xc(%ebp),%eax
0001014e <escribir_buffer+0xf> movzbl 0x12(%eax),%eax
00010152 <escribir_buffer+0x13> cmp    $0xf,%al
00010154 <escribir_buffer+0x15> ja     0001019e <escribir_buffer+0x5f>
00010156 <escribir_buffer+0x17> mov    0xc(%ebp),%eax
00010159 <escribir_buffer+0x1a> movzbl 0x10(%eax),%eax
0001015d <escribir_buffer+0x1e> movzbl %al,%eax
00010160 <escribir_buffer+0x21> mov    0xc(%ebp),%edx
00010163 <escribir_buffer+0x24> movzbl -0x4(%ebp),%ecx
00010167 <escribir_buffer+0x28> mov    %cl,(%edx,%eax,1)
0001016a <escribir_buffer+0x2b> mov    0xc(%ebp),%eax
0001016d <escribir_buffer+0x2e> movzbl 0x12(%eax),%eax
00010171 <escribir_buffer+0x32> lea    0x1(%eax),%edx
00010174 <escribir_buffer+0x35> mov    0xc(%ebp),%eax
00010177 <escribir_buffer+0x38> mov    %dl,0x12(%eax)
0001017a <escribir_buffer+0x3b> mov    0xc(%ebp),%eax
0001017d <escribir_buffer+0x3e> movzbl 0x10(%eax),%eax
00010181 <escribir_buffer+0x42> lea    0x1(%eax),%edx
00010184 <escribir_buffer+0x45> mov    0xc(%ebp),%eax
00010187 <escribir_buffer+0x48> mov    %dl,0x10(%eax)
0001018a <escribir_buffer+0x4b> mov    0xc(%ebp),%eax
0001018d <escribir_buffer+0x4e> movzbl 0x10(%eax),%eax
00010191 <escribir_buffer+0x52> cmp    $0x10,%al
00010193 <escribir_buffer+0x54> jne    000101a9 <escribir_buffer+0x6a>
00010195 <escribir_buffer+0x56> mov    0xc(%ebp),%eax
00010198 <escribir_buffer+0x59> movb   $0x0,0x10(%eax)
0001019c <escribir_buffer+0x5d> jmp    000101a9 <escribir_buffer+0x6a>
0001019e <escribir_buffer+0x5f> pushl  0xc(%ebp)
000101a1 <escribir_buffer+0x62> call   0001003c <limpiar_buffer>
000101a6 <escribir_buffer+0x67> add    $0x4,%esp
000101a9 <escribir_buffer+0x6a> nop
000101aa <escribir_buffer+0x6b> leave  
000101ab <escribir_buffer+0x6c> ret    
000101ac <escribir_tabla_digitos> push   %ebp
000101ad <escribir_tabla_digitos+0x1> mov    %esp,%ebp
000101af <escribir_tabla_digitos+0x3> sub    $0x28,%esp
000101b2 <escribir_tabla_digitos+0x6> mov    0x10(%ebp),%eax
000101b5 <escribir_tabla_digitos+0x9> mov    %al,-0x1c(%ebp)
000101b8 <escribir_tabla_digitos+0xc> xchg   %bx,%bx
000101bb <escribir_tabla_digitos+0xf> movl   $0x0,0x210018
000101c5 <escribir_tabla_digitos+0x19> jmp    00010212 <escribir_tabla_digitos+0x66>
000101c7 <escribir_tabla_digitos+0x1b> sub    $0xc,%esp
000101ca <escribir_tabla_digitos+0x1e> pushl  0x8(%ebp)
000101cd <escribir_tabla_digitos+0x21> call   00010222 <leer_buffer>
000101d2 <escribir_tabla_digitos+0x26> add    $0x10,%esp
000101d5 <escribir_tabla_digitos+0x29> mov    %al,-0x11(%ebp)
000101d8 <escribir_tabla_digitos+0x2c> mov    -0x10(%ebp),%eax
000101db <escribir_tabla_digitos+0x2f> add    %al,-0x11(%ebp)
000101de <escribir_tabla_digitos+0x32> mov    -0xc(%ebp),%eax
000101e1 <escribir_tabla_digitos+0x35> imul   $0xa,%eax,%edx
000101e4 <escribir_tabla_digitos+0x38> mov    -0x10(%ebp),%eax
000101e7 <escribir_tabla_digitos+0x3b> imul   $0x0,%eax,%eax
000101ea <escribir_tabla_digitos+0x3e> lea    (%edx,%eax,1),%ecx
000101ed <escribir_tabla_digitos+0x41> mov    $0xa,%eax
000101f2 <escribir_tabla_digitos+0x46> mull   -0x10(%ebp)
000101f5 <escribir_tabla_digitos+0x49> add    %edx,%ecx
000101f7 <escribir_tabla_digitos+0x4b> mov    %ecx,%edx
000101f9 <escribir_tabla_digitos+0x4d> mov    %eax,-0x10(%ebp)
000101fc <escribir_tabla_digitos+0x50> mov    %edx,-0xc(%ebp)
000101ff <escribir_tabla_digitos+0x53> mov    %eax,-0x10(%ebp)
00010202 <escribir_tabla_digitos+0x56> mov    %edx,-0xc(%ebp)
00010205 <escribir_tabla_digitos+0x59> mov    0x210018,%eax
0001020a <escribir_tabla_digitos+0x5e> add    $0x1,%eax
0001020d <escribir_tabla_digitos+0x61> mov    %eax,0x210018
00010212 <escribir_tabla_digitos+0x66> mov    0x210018,%eax
00010217 <escribir_tabla_digitos+0x6b> cmp    $0xf,%eax
0001021a <escribir_tabla_digitos+0x6e> jle    000101c7 <escribir_tabla_digitos+0x1b>
0001021c <escribir_tabla_digitos+0x70> xchg   %bx,%bx
0001021f <escribir_tabla_digitos+0x73> nop
00010220 <escribir_tabla_digitos+0x74> leave  
00010221 <escribir_tabla_digitos+0x75> ret    
00010222 <leer_buffer> push   %ebp
00010223 <leer_buffer+0x1> mov    %esp,%ebp
00010225 <leer_buffer+0x3> sub    $0x10,%esp
00010228 <leer_buffer+0x6> movb   $0xff,-0x1(%ebp)
0001022c <leer_buffer+0xa> mov    0x8(%ebp),%eax
0001022f <leer_buffer+0xd> movzbl 0x12(%eax),%eax
00010233 <leer_buffer+0x11> test   %al,%al
00010235 <leer_buffer+0x13> je     00010283 <leer_buffer+0x61>
00010237 <leer_buffer+0x15> mov    0x8(%ebp),%eax
0001023a <leer_buffer+0x18> movzbl 0x11(%eax),%eax
0001023e <leer_buffer+0x1c> movzbl %al,%eax
00010241 <leer_buffer+0x1f> mov    0x8(%ebp),%edx
00010244 <leer_buffer+0x22> movzbl (%edx,%eax,1),%eax
00010248 <leer_buffer+0x26> mov    %al,-0x1(%ebp)
0001024b <leer_buffer+0x29> mov    0x8(%ebp),%eax
0001024e <leer_buffer+0x2c> movzbl 0x12(%eax),%eax
00010252 <leer_buffer+0x30> lea    -0x1(%eax),%edx
00010255 <leer_buffer+0x33> mov    0x8(%ebp),%eax
00010258 <leer_buffer+0x36> mov    %dl,0x12(%eax)
0001025b <leer_buffer+0x39> mov    0x8(%ebp),%eax
0001025e <leer_buffer+0x3c> movzbl 0x11(%eax),%eax
00010262 <leer_buffer+0x40> lea    0x1(%eax),%edx
00010265 <leer_buffer+0x43> mov    0x8(%ebp),%eax
00010268 <leer_buffer+0x46> mov    %dl,0x11(%eax)
0001026b <leer_buffer+0x49> mov    0x8(%ebp),%eax
0001026e <leer_buffer+0x4c> movzbl 0x11(%eax),%eax
00010272 <leer_buffer+0x50> cmp    $0x10,%al
00010274 <leer_buffer+0x52> jne    0001027d <leer_buffer+0x5b>
00010276 <leer_buffer+0x54> mov    0x8(%ebp),%eax
00010279 <leer_buffer+0x57> movb   $0x0,0x11(%eax)
0001027d <leer_buffer+0x5b> movzbl -0x1(%ebp),%eax
00010281 <leer_buffer+0x5f> jmp    00010287 <leer_buffer+0x65>
00010283 <leer_buffer+0x61> movzbl -0x1(%ebp),%eax
00010287 <leer_buffer+0x65> leave  
00010288 <leer_buffer+0x66> ret    
00010289 <init_pic> mov    $0x11,%al
0001028b <init_pic+0x2> out    %al,$0x20
0001028d <init_pic+0x4> mov    $0x20,%al
0001028f <init_pic+0x6> out    %al,$0x21
00010291 <init_pic+0x8> mov    $0x4,%al
00010293 <init_pic+0xa> out    %al,$0x21
00010295 <init_pic+0xc> mov    $0x1,%al
00010297 <init_pic+0xe> out    %al,$0x21
00010299 <init_pic+0x10> mov    $0xfd,%al
0001029b <init_pic+0x12> out    %al,$0x21
0001029d <init_pic+0x14> mov    $0x11,%al
0001029f <init_pic+0x16> out    %al,$0xa0
000102a1 <init_pic+0x18> mov    $0x28,%al
000102a3 <init_pic+0x1a> out    %al,$0xa1
000102a5 <init_pic+0x1c> mov    $0x2,%al
000102a7 <init_pic+0x1e> out    %al,$0xa1
000102a9 <init_pic+0x20> mov    $0x1,%al
000102ab <init_pic+0x22> out    %al,$0xa1
000102ad <init_pic+0x24> mov    $0xff,%al
000102af <init_pic+0x26> out    %al,$0xa1
000102b1 <init_pic+0x28> mov    $0xfc,%al
000102b3 <init_pic+0x2a> out    %al,$0x21
000102b5 <init_pic+0x2c> ret    

Disassembly of section .functions_rom:
fffffc00 <__fast_memcpy_rom> push   %ebp
fffffc01 <__fast_memcpy_rom+0x1> mov    %esp,%ebp
fffffc03 <__fast_memcpy_rom+0x3> sub    $0x10,%esp
fffffc06 <__fast_memcpy_rom+0x6> movb   $0x0,-0x1(%ebp)
fffffc0a <__fast_memcpy_rom+0xa> cmpl   $0x0,0x10(%ebp)
fffffc0e <__fast_memcpy_rom+0xe> je     fffffc36 <__fast_memcpy_rom+0x36>
fffffc10 <__fast_memcpy_rom+0x10> jmp    fffffc2c <__fast_memcpy_rom+0x2c>
fffffc12 <__fast_memcpy_rom+0x12> subl   $0x1,0x10(%ebp)
fffffc16 <__fast_memcpy_rom+0x16> mov    0x8(%ebp),%edx
fffffc19 <__fast_memcpy_rom+0x19> lea    0x4(%edx),%eax
fffffc1c <__fast_memcpy_rom+0x1c> mov    %eax,0x8(%ebp)
fffffc1f <__fast_memcpy_rom+0x1f> mov    0xc(%ebp),%eax
fffffc22 <__fast_memcpy_rom+0x22> lea    0x4(%eax),%ecx
fffffc25 <__fast_memcpy_rom+0x25> mov    %ecx,0xc(%ebp)
fffffc28 <__fast_memcpy_rom+0x28> mov    (%edx),%edx
fffffc2a <__fast_memcpy_rom+0x2a> mov    %edx,(%eax)
fffffc2c <__fast_memcpy_rom+0x2c> cmpl   $0x0,0x10(%ebp)
fffffc30 <__fast_memcpy_rom+0x30> jne    fffffc12 <__fast_memcpy_rom+0x12>
fffffc32 <__fast_memcpy_rom+0x32> movb   $0x1,-0x1(%ebp)
fffffc36 <__fast_memcpy_rom+0x36> movzbl -0x1(%ebp),%eax
fffffc3a <__fast_memcpy_rom+0x3a> leave  
fffffc3b <__fast_memcpy_rom+0x3b> ret    
