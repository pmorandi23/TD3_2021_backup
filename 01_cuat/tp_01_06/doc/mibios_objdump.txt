
./bin/mibios.elf:     file format elf32-i386
./bin/mibios.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0xfffffff0

Program Header:
    LOAD off    0x00001000 vaddr 0xffff0000 paddr 0xffff0000 align 2**12
         filesz 0x00000066 memsz 0x00000066 flags r--
    LOAD off    0x00002000 vaddr 0x00210000 paddr 0xffff1000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags rw-
    LOAD off    0x00003000 vaddr 0x00010000 paddr 0xffff2000 align 2**12
         filesz 0x0000038c memsz 0x0000038c flags r-x
    LOAD off    0x00004000 vaddr 0x00202000 paddr 0xffff3000 align 2**12
         filesz 0x0000001a memsz 0x0000001a flags r--
    LOAD off    0x00005000 vaddr 0x00100000 paddr 0xffff4000 align 2**12
         filesz 0x00000077 memsz 0x00000077 flags r--
    LOAD off    0x00005800 vaddr 0xfffff800 paddr 0xfffff800 align 2**12
         filesz 0x0000043c memsz 0x0000043c flags r-x
    LOAD off    0x00006000 vaddr 0x00000000 paddr 0xfffffd00 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r--
    LOAD off    0x00006ff0 vaddr 0xfffffff0 paddr 0xfffffff0 align 2**12
         filesz 0x00000010 memsz 0x00000010 flags r--
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sys_tables_32 0000019c  00000000  fffffd00  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .functions    0000038c  00010000  ffff2000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .handlers     00000077  00100000  ffff4000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .codigo_kernel32 0000001a  00202000  ffff3000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000020  00210000  ffff1000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .codigo_init16 00000066  ffff0000  ffff0000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .codigo_init32 000000df  fffff800  fffff800  00005800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .functions_rom 0000003c  fffffc00  fffffc00  00005c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .codigo_reset 00000010  fffffff0  fffffff0  00006ff0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .comment      00000029  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .sys_tables_32	00000000 .sys_tables_32
00010000 l    d  .functions	00000000 .functions
00100000 l    d  .handlers	00000000 .handlers
00202000 l    d  .codigo_kernel32	00000000 .codigo_kernel32
00210000 l    d  .data	00000000 .data
ffff0000 l    d  .codigo_init16	00000000 .codigo_init16
fffff800 l    d  .codigo_init32	00000000 .codigo_init32
fffffc00 l    d  .functions_rom	00000000 .functions_rom
fffffff0 l    d  .codigo_reset	00000000 .codigo_reset
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 src/sys_tables.s
00000010 l       *ABS*	00000000 H_ISRXX_Handler
00000000 l       .sys_tables_32	00000000 GDT_32
00000000 l       *ABS*	00000000 NULL_SEL
00000018 l       *ABS*	00000000 GDT_LENGTH
0000001e l       .sys_tables_32	00000000 IDT
00000000 l       *ABS*	00000000 ISR00_IDT
00000008 l       *ABS*	00000000 ISR01_IDT
00000010 l       *ABS*	00000000 ISR02_IDT
00000018 l       *ABS*	00000000 ISR03_IDT
00000020 l       *ABS*	00000000 ISR04_IDT
00000028 l       *ABS*	00000000 ISR05_IDT
00000030 l       *ABS*	00000000 ISR06_IDT
00000038 l       *ABS*	00000000 ISR07_IDT
00000040 l       *ABS*	00000000 ISR08_IDT
00000048 l       *ABS*	00000000 ISR09_IDT
00000050 l       *ABS*	00000000 ISR10_IDT
00000058 l       *ABS*	00000000 ISR11_IDT
00000060 l       *ABS*	00000000 ISR12_IDT
00000068 l       *ABS*	00000000 ISR13_IDT
00000070 l       *ABS*	00000000 ISR14_IDT
00000078 l       *ABS*	00000000 ISR15_IDT
00000080 l       *ABS*	00000000 ISR16_IDT
00000088 l       *ABS*	00000000 ISR17_IDT
00000090 l       *ABS*	00000000 ISR18_IDT
00000098 l       *ABS*	00000000 ISR19_IDT
000000a0 l       *ABS*	00000000 ISR20to31_idt
00000100 l       *ABS*	00000000 ISR32_IRQ_0
00000108 l       *ABS*	00000000 ISR33_IRQ_1
00000110 l       *ABS*	00000000 ISR34to46_idt
00000178 l       *ABS*	00000000 IDT_LENGTH
00000000 l    df *ABS*	00000000 functions.c
00210018 l     O .data	00000004 i.1454
0021001c l     O .data	00000004 i.1473
00000000 l    df *ABS*	00000000 src/functions_asm.s
00010374 l       .functions	00000000 ciclo1
00010383 l       .functions	00000000 ciclo2
00000000 l    df *ABS*	00000000 src/handlers_32.s
00100000 l       *ABS*	00000000 VMA_ISR_TECLADO
0000003d l       .handlers	00000000 L_ISR01_Handler_DB
00100000 l       .handlers	00000000 IRQ00_Handler
0010000c l       .handlers	00000000 end_handler_timer
00100012 l       .handlers	00000000 IRQ01_Handler
00100031 l       .handlers	00000000 end_handler_teclado
00100037 l       .handlers	00000000 ISR00_Handler_DE
0010003d l       .handlers	00000000 ISR01_Handler_DB
00100040 l       .handlers	00000000 ISR02_Handler_NMI
00100043 l       .handlers	00000000 ISR03_Handler_BP
00100046 l       .handlers	00000000 ISR04_Handler_OF
00100049 l       .handlers	00000000 ISR05_Handler_BR
0010004c l       .handlers	00000000 ISR06_Handler_UD
00100052 l       .handlers	00000000 ISR07_Handler_NM
00100055 l       .handlers	00000000 ISR08_Handler_DF
00100058 l       .handlers	00000000 ISR10_Handler_TS
0010005b l       .handlers	00000000 ISR11_Handler_NP
0010005e l       .handlers	00000000 ISR12_Handler_SS
00100061 l       .handlers	00000000 ISR13_Handler_GP
00100065 l       .handlers	00000000 ISR14_Handler_PF
00100068 l       .handlers	00000000 ISR15_Handler_RES
0010006b l       .handlers	00000000 ISR16_Handler_MF
0010006e l       .handlers	00000000 ISR17_Handler_AC
00100071 l       .handlers	00000000 ISR18_Handler_MC
00100074 l       .handlers	00000000 ISR19_Handler_XM
00000000 l    df *ABS*	00000000 src/main.s
0000001a l       *ABS*	00000000 kernel21_code_size
0000000a l       *ABS*	00000000 CANTIDAD_DATOS
00000010 l       *ABS*	00000000 LONG_BUFFER
00202015 l       .codigo_kernel32	00000000 main
00202017 l       .codigo_kernel32	00000000 guard
0020201a l       .codigo_kernel32	00000000 kernel32_end
00000000 l    df *ABS*	00000000 functions_rom.c
00000000 l    df *ABS*	00000000 src/init16.s
ffff003f l       .codigo_init16	00000000 fault_end
ffff0040 l       .codigo_init16	00000000 GDT
00000000 l       *ABS*	00000000 NULL_SEL_16
00000008 l       *ABS*	00000000 CS_SEL_16
00000010 l       *ABS*	00000000 CS_SEL_32_prim
00000020 l       *ABS*	00000000 GDT_LENGTH
ffff0060 l       .codigo_init16	00000000 gdtr_16
00000000 l    df *ABS*	00000000 src/init32.s
fffff81a l       .codigo_init32	00000000 start32_launcher.stack_init
fffff8dc l       .codigo_init32	00000000 start32_launcher.guard
00000000 l    df *ABS*	00000000 src/reset.s
fffffff5 l       .codigo_reset	00000000 halted
00000040 g       .handlers	00000000 L_ISR02_Handler_NMI
00000020 g       *ABS*	00000000 __data_size
fffffff0 g       *ABS*	00000000 __RESET_LMA
00000055 g       .handlers	00000000 L_ISR08_Handler_DF
ffff2000 g       *ABS*	00000000 __FUNCTIONS_LMA
00000077 g       *ABS*	00000000 __handlers_32_size
0000038c g       *ABS*	00000000 __functions_size
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_LMA
fffffc00 g       *ABS*	00000000 __FUNCTIONS_ROM_LMA
00210013 g       .data	00000000 contador_timer
00000018 g       *ABS*	00000000 DS_SEL_32_prim
fffffff0 g       .codigo_reset	00000000 reset
00100000 g       *ABS*	00000000 __TECLADO_ISR_VMA
2fff8000 g       *ABS*	00000000 __STACK_START_32
00010000 g       *ABS*	00000000 __FUNCTIONS_VMA
ffff0000 g       *ABS*	00000000 __INIT_16_VMA
00010328 g       .functions	00000000 init_pic
0001003c g     F .functions	0000004a limpiar_buffer
00010364 g       .functions	00000000 init_teclado
0000006b g       .handlers	00000000 L_ISR16_Handler_MF
00010355 g       .functions	00000000 init_timer
0000005e g       .handlers	00000000 L_ISR12_Handler_SS
0000004c g       .handlers	00000000 L_ISR06_Handler_UD
000102be g     F .functions	0000006a leer_buffer
00000043 g       .handlers	00000000 L_ISR03_Handler_BP
00000000 g       *ABS*	00000000 __SYS_TABLES_VMA
00009000 g       *ABS*	00000000 __STACK_START_16
ffff4000 g       *ABS*	00000000 __TECLADO_ISR_LMA
00202000 g       .codigo_kernel32	00000000 kernel32_init
00000196 g       .sys_tables_32	00000000 _idtr_32
000101b4 g     F .functions	0000010a escribir_tabla_digitos
00000061 g       .handlers	00000000 L_ISR13_Handler_GP
00000058 g       .handlers	00000000 L_ISR10_Handler_TS
2fff8fff g       *ABS*	00000000 __STACK_END_32
00202000 g       *ABS*	00000000 __KERNEL_32_VMA
00010000 g     F .functions	0000003c __fast_memcpy
00010147 g     F .functions	0000006d escribir_buffer
00210000 g       .data	00000000 memoria_buffer_reservada
00000052 g       .handlers	00000000 L_ISR07_Handler_NM
00000008 g       *ABS*	00000000 CS_SEL_32
00000018 g       .sys_tables_32	00000000 _gdtr_32
00000010 g       *ABS*	00000000 DS_SEL_32
000003ff g       *ABS*	00000000 __STACK_SIZE_32
00009fff g       *ABS*	00000000 __STACK_END_16
ffff3000 g       *ABS*	00000000 __KERNEL_32_LMA
0000006e g       .handlers	00000000 L_ISR17_Handler_AC
fffffff0 g       *ABS*	00000000 __RESET_VMA
00000037 g       .handlers	00000000 L_ISR00_Handler_DE
00000074 g       .handlers	00000000 L_ISR19_Handler_XM
00000065 g       .handlers	00000000 L_ISR14_Handler_PF
00000046 g       .handlers	00000000 L_ISR04_Handler_OF
00000071 g       .handlers	00000000 L_ISR18_Handler_MC
fffff800 g       *ABS*	00000000 __INIT_32_VMA
00060000 g       *ABS*	00000000 __EH_FRAME
00200000 g       *ABS*	00000000 __DIGITS_TABLE
0000019c g       *ABS*	00000000 __sys_tables_size
00000049 g       .handlers	00000000 L_ISR05_Handler_BR
ffff0000 g       .codigo_init16	00000000 start16
00000000 g       .handlers	00000000 L_IRQ00_Handler
00210000 g       *ABS*	00000000 __DATA_VMA
fffff800 g       *ABS*	00000000 __INIT_32_LMA
fffffd00 g       *ABS*	00000000 __SYS_TABLES_LMA
0000001a g       *ABS*	00000000 __codigo_kernel32_size
fffffc00 g     F .functions_rom	0000003c __fast_memcpy_rom
00010086 g     F .functions	000000c1 determinar_tecla_presionada
fffff800 g       .codigo_init32	00000000 start32_launcher
ffff1000 g       *ABS*	00000000 __DATA_LMA
00000012 g       .handlers	00000000 L_IRQ01_Handler
0000005b g       .handlers	00000000 L_ISR11_Handler_NP


Contents of section .sys_tables_32:
 0000 00000000 00000000 ffff0000 0099cf00  ................
 0010 ffff0000 0092cf00 17000000 00003700  ..............7.
 0020 0800008f 10000000 00000000 00004000  ..............@.
 0030 0800008f 10004300 0800008f 10004600  ......C.......F.
 0040 0800008f 10004900 0800008f 10004c00  ......I.......L.
 0050 0800008f 10005200 0800008f 10005500  ......R.......U.
 0060 0800008f 10000000 00000000 00005800  ..............X.
 0070 0800008f 10005b00 0800008f 10005e00  ......[.......^.
 0080 0800008f 10006100 0800008f 10006500  ......a.......e.
 0090 0800008f 10000000 00000000 00006b00  ..............k.
 00a0 0800008f 10006e00 0800008f 10007100  ......n.......q.
 00b0 0800008f 10007400 0800008f 10000000  ......t.........
 00c0 00000000 00000000 00000000 00000000  ................
 00d0 00000000 00000000 00000000 00000000  ................
 00e0 00000000 00000000 00000000 00000000  ................
 00f0 00000000 00000000 00000000 00000000  ................
 0100 00000000 00000000 00000000 00000000  ................
 0110 00000000 00000000 00000000 00000000  ................
 0120 0800008e 10001200 0800008e 10000000  ................
 0130 00000000 00000000 00000000 00000000  ................
 0140 00000000 00000000 00000000 00000000  ................
 0150 00000000 00000000 00000000 00000000  ................
 0160 00000000 00000000 00000000 00000000  ................
 0170 00000000 00000000 00000000 00000000  ................
 0180 00000000 00000000 00000000 00000000  ................
 0190 00000000 00007701 1e000000           ......w.....    
Contents of section .functions:
 10000 5589e583 ec10c645 ff00837d 10007426  U......E...}..t&
 10010 eb1a836d 10018b55 088d4204 8945088b  ...m...U..B..E..
 10020 450c8d48 04894d0c 8b128910 837d1000  E..H..M......}..
 10030 75e0c645 ff010fb6 45ffc9c3 5589e58b  u..E....E...U...
 10040 4508c640 10008b45 08c64011 008b4508  E..@...E..@...E.
 10050 c6401200 c7051800 21000000 0000eb19  .@......!.......
 10060 a1180021 008b5508 c6040200 a1180021  ...!..U........!
 10070 0083c001 a3180021 00a11800 210083f8  .......!....!...
 10080 0f7edd90 5dc35589 e583ec28 8b450888  .~..].U....(.E..
 10090 45e4c645 f600807d e4017637 807de40b  E..E...}..v7.}..
 100a0 77310fb6 45e483e8 018845f7 807de40a  w1..E.....E..}..
 100b0 7504c645 f709807d e40b7504 c645f700  u..E...}..u..E..
 100c0 0fb645f7 83ec08ff 750c50e8 77000000  ..E.....u.P.w...
 100d0 83c4108b 450c0fb6 40123c0f 760b8b45  ....E...@.<.v..E
 100e0 0c0fb640 1084c074 11807de4 1c75278b  ...@...t..}..u'.
 100f0 450c0fb6 40123c0f 761cc645 f6000fb6  E...@.<.v..E....
 10100 45f683ec 04506800 002000ff 750ce8a1  E....Ph.. ..u...
 10110 00000083 c4108b45 0c0fb640 123c0e77  .......E...@.<.w
 10120 23807de4 1c751dc6 45f6010f b645f683  #.}..u..E....E..
 10130 ec045068 00002000 ff750ce8 74000000  ..Ph.. ..u..t...
 10140 83c41090 90c9c355 89e583ec 048b4508  .......U......E.
 10150 8845fc8b 450c0fb6 40123c0f 77488b45  .E..E...@.<.wH.E
 10160 0c0fb640 100fb6c0 8b550c0f b64dfc88  ...@.....U...M..
 10170 0c028b45 0c0fb640 128d5001 8b450c88  ...E...@..P..E..
 10180 50128b45 0c0fb640 108d5001 8b450c88  P..E...@..P..E..
 10190 50108b45 0c0fb640 103c1075 148b450c  P..E...@.<.u..E.
 101a0 c6401000 eb0bff75 0ce88efe ffff83c4  .@.....u........
 101b0 0490c9c3 5589e583 ec288b45 108845e4  ....U....(.E..E.
 101c0 c745f400 000000c7 45f00000 0000c705  .E......E.......
 101d0 1c002100 00000000 eb5483ec 0cff7508  ..!......T....u.
 101e0 e8d90000 0083c410 8845efa1 1c002100  .........E....!.
 101f0 83f8077f 170fb655 efa11c00 2100c1e0  .......U....!...
 10200 0289c1d3 e289d001 45f0eb15 0fb655ef  ........E.....U.
 10210 a11c0021 00c1e002 89c1d3e2 89d00145  ...!...........E
 10220 f4a11c00 210083c0 01a31c00 2100a11c  ....!.......!...
 10230 00210083 f80f7ea2 8b450c0f b6808002  .!....~..E......
 10240 00003c9f 775a8b45 0c0fb680 80020000  ..<.wZ.E........
 10250 0fb6d08b 450c8b4d f4890c90 8b450c0f  ....E..M.....E..
 10260 b6808002 00008d50 018b450c 88908002  .......P..E.....
 10270 00008b45 0c0fb680 80020000 0fb6d08b  ...E............
 10280 450c8b4d f0890c90 8b450c0f b6808002  E..M.....E......
 10290 00008d50 018b450c 88908002 0000eb0a  ...P..E.........
 102a0 8b450cc6 80800200 000083ec 0cff7508  .E............u.
 102b0 e887fdff ff83c410 6687db90 c9c35589  ........f.....U.
 102c0 e583ec10 c645ff00 8b45080f b6401284  .....E...E...@..
 102d0 c0744f8b 45080fb6 40120fb6 c08d50ff  .tO.E...@.....P.
 102e0 8b45080f b6041088 45ff8b45 080fb640  .E......E..E...@
 102f0 128d50ff 8b450888 50128b45 080fb640  ..P..E..P..E...@
 10300 118d5001 8b450888 50118b45 080fb640  ..P..E..P..E...@
 10310 113c1075 078b4508 c6401100 0fb645ff  .<.u..E..@....E.
 10320 eb040fb6 45ffc9c3 b011e620 b020e621  ....E...... . .!
 10330 b004e621 b001e621 b0fde621 b011e6a0  ...!...!...!....
 10340 b028e6a1 b002e6a1 b001e6a1 b0ffe6a1  .(..............
 10350 b0fce621 c3b036e6 4366b89c 2ee64088  ...!..6.Cf....@.
 10360 e0e640c3 b0ffe664 b9000100 00e2feb9  ..@....d........
 10370 00000100 e460a801 e1fab0f4 e664b900  .....`.......d..
 10380 000100e4 60a801e1 fae460c3           ....`.....`.    
Contents of section .handlers:
 100000 60a11300 210040a3 13002100 b020e620  `...!.@...!.. . 
 100010 61cf60b2 2131c0e4 6088c380 e38080fb  a.`.!1..`.......
 100020 80740e68 00002100 50e85800 f1ff83c4  .t.h..!.P.X.....
 100030 08b020e6 2061cf66 87dbb200 f4b201f4  .. . a.f........
 100040 b202f4b2 03f4b204 f4b205f4 6687dbb2  ............f...
 100050 06f4b207 f4b208f4 b20af4b2 0bf4b20c  ................
 100060 f4b20df4 cfb20ef4 b20ff4b2 10f4b211  ................
 100070 f4b212f4 b213f4                      .......         
Contents of section .codigo_kernel32:
 202000 31c031db 31c931d2 68000021 00e82ae0  1.1.1.1.h..!..*.
 202010 e0ff83c4 04ebfef4 ebfd               ..........      
Contents of section .data:
 210000 00000000 00000000 00000000 00000000  ................
 210010 00000000 00000000 00000000 00000000  ................
Contents of section .codigo_init16:
 ffff0000 66a90000 00007537 6631c00f 22d88cc8  f.....u7f1.."...
 ffff0010 8ed8b800 908ed0bc ff9f0f20 c0660d00  ........... .f..
 ffff0020 0000600f 22c00f09 660f0116 60000f01  ..`."...f...`...
 ffff0030 e083c801 0f01f066 ea00f8ff ff1000f4  .......f........
 ffff0040 00000000 00000000 ffff0000 ff9940ff  ..............@.
 ffff0050 ffff0000 0099cf00 ffff0000 0092cf00  ................
 ffff0060 1f004000 ffff                        ..@...          
Contents of section .codigo_init32:
 fffff800 66b81800 8ed88ec0 8ee88ee0 8ed0bcff  f...............
 fffff810 8fff2f31 c0b9ff03 000050e2 fdbcff8f  ../1......P.....
 fffff820 ff2f5589 e5688c03 00006800 00010068  ./U..h....h....h
 fffff830 0020ffff e8c70300 00c983f8 010f8599  . ..............
 fffff840 00000055 89e5681a 00000068 00202000  ...U..h....h.  .
 fffff850 680030ff ffe8a607 0100c983 f801757c  h.0...........u|
 fffff860 5589e568 77000000 68000010 00680040  U..hw...h....h.@
 fffff870 ffffe889 070100c9 83f80175 5f5589e5  ...........u_U..
 fffff880 68200000 00680000 21006800 10ffffe8  h ...h..!.h.....
 fffff890 6c070100 c983f801 75425589 e5689c01  l.......uBU..h..
 fffff8a0 00006800 00000068 00fdffff e84f0701  ..h....h.....O..
 fffff8b0 00c983f8 0175250f 01151800 00000f01  .....u%.........
 fffff8c0 1d960100 00e89a0a 0100e886 0a0100e8  ................
 fffff8d0 540a0100 fbea0020 20000800 f4ebfd    T......  ...... 
Contents of section .functions_rom:
 fffffc00 5589e583 ec10c645 ff00837d 10007426  U......E...}..t&
 fffffc10 eb1a836d 10018b55 088d4204 8945088b  ...m...U..B..E..
 fffffc20 450c8d48 04894d0c 8b128910 837d1000  E..H..M......}..
 fffffc30 75e0c645 ff010fb6 45ffc9c3           u..E....E...    
Contents of section .codigo_reset:
 fffffff0 fafce90b 00f4ebfd 90909090 90909090  ................
Contents of section .comment:
 0000 4743433a 20285562 756e7475 20372e35  GCC: (Ubuntu 7.5
 0010 2e302d33 7562756e 7475317e 31382e30  .0-3ubuntu1~18.0
 0020 34292037 2e352e30 00                 4) 7.5.0.       

Disassembly of section .functions:
00010000 <__fast_memcpy> push   %ebp
00010001 <__fast_memcpy+0x1> mov    %esp,%ebp
00010003 <__fast_memcpy+0x3> sub    $0x10,%esp
00010006 <__fast_memcpy+0x6> movb   $0x0,-0x1(%ebp)
0001000a <__fast_memcpy+0xa> cmpl   $0x0,0x10(%ebp)
0001000e <__fast_memcpy+0xe> je     00010036 <__fast_memcpy+0x36>
00010010 <__fast_memcpy+0x10> jmp    0001002c <__fast_memcpy+0x2c>
00010012 <__fast_memcpy+0x12> subl   $0x1,0x10(%ebp)
00010016 <__fast_memcpy+0x16> mov    0x8(%ebp),%edx
00010019 <__fast_memcpy+0x19> lea    0x4(%edx),%eax
0001001c <__fast_memcpy+0x1c> mov    %eax,0x8(%ebp)
0001001f <__fast_memcpy+0x1f> mov    0xc(%ebp),%eax
00010022 <__fast_memcpy+0x22> lea    0x4(%eax),%ecx
00010025 <__fast_memcpy+0x25> mov    %ecx,0xc(%ebp)
00010028 <__fast_memcpy+0x28> mov    (%edx),%edx
0001002a <__fast_memcpy+0x2a> mov    %edx,(%eax)
0001002c <__fast_memcpy+0x2c> cmpl   $0x0,0x10(%ebp)
00010030 <__fast_memcpy+0x30> jne    00010012 <__fast_memcpy+0x12>
00010032 <__fast_memcpy+0x32> movb   $0x1,-0x1(%ebp)
00010036 <__fast_memcpy+0x36> movzbl -0x1(%ebp),%eax
0001003a <__fast_memcpy+0x3a> leave  
0001003b <__fast_memcpy+0x3b> ret    
0001003c <limpiar_buffer> push   %ebp
0001003d <limpiar_buffer+0x1> mov    %esp,%ebp
0001003f <limpiar_buffer+0x3> mov    0x8(%ebp),%eax
00010042 <limpiar_buffer+0x6> movb   $0x0,0x10(%eax)
00010046 <limpiar_buffer+0xa> mov    0x8(%ebp),%eax
00010049 <limpiar_buffer+0xd> movb   $0x0,0x11(%eax)
0001004d <limpiar_buffer+0x11> mov    0x8(%ebp),%eax
00010050 <limpiar_buffer+0x14> movb   $0x0,0x12(%eax)
00010054 <limpiar_buffer+0x18> movl   $0x0,0x210018
0001005e <limpiar_buffer+0x22> jmp    00010079 <limpiar_buffer+0x3d>
00010060 <limpiar_buffer+0x24> mov    0x210018,%eax
00010065 <limpiar_buffer+0x29> mov    0x8(%ebp),%edx
00010068 <limpiar_buffer+0x2c> movb   $0x0,(%edx,%eax,1)
0001006c <limpiar_buffer+0x30> mov    0x210018,%eax
00010071 <limpiar_buffer+0x35> add    $0x1,%eax
00010074 <limpiar_buffer+0x38> mov    %eax,0x210018
00010079 <limpiar_buffer+0x3d> mov    0x210018,%eax
0001007e <limpiar_buffer+0x42> cmp    $0xf,%eax
00010081 <limpiar_buffer+0x45> jle    00010060 <limpiar_buffer+0x24>
00010083 <limpiar_buffer+0x47> nop
00010084 <limpiar_buffer+0x48> pop    %ebp
00010085 <limpiar_buffer+0x49> ret    
00010086 <determinar_tecla_presionada> push   %ebp
00010087 <determinar_tecla_presionada+0x1> mov    %esp,%ebp
00010089 <determinar_tecla_presionada+0x3> sub    $0x28,%esp
0001008c <determinar_tecla_presionada+0x6> mov    0x8(%ebp),%eax
0001008f <determinar_tecla_presionada+0x9> mov    %al,-0x1c(%ebp)
00010092 <determinar_tecla_presionada+0xc> movb   $0x0,-0xa(%ebp)
00010096 <determinar_tecla_presionada+0x10> cmpb   $0x1,-0x1c(%ebp)
0001009a <determinar_tecla_presionada+0x14> jbe    000100d3 <determinar_tecla_presionada+0x4d>
0001009c <determinar_tecla_presionada+0x16> cmpb   $0xb,-0x1c(%ebp)
000100a0 <determinar_tecla_presionada+0x1a> ja     000100d3 <determinar_tecla_presionada+0x4d>
000100a2 <determinar_tecla_presionada+0x1c> movzbl -0x1c(%ebp),%eax
000100a6 <determinar_tecla_presionada+0x20> sub    $0x1,%eax
000100a9 <determinar_tecla_presionada+0x23> mov    %al,-0x9(%ebp)
000100ac <determinar_tecla_presionada+0x26> cmpb   $0xa,-0x1c(%ebp)
000100b0 <determinar_tecla_presionada+0x2a> jne    000100b6 <determinar_tecla_presionada+0x30>
000100b2 <determinar_tecla_presionada+0x2c> movb   $0x9,-0x9(%ebp)
000100b6 <determinar_tecla_presionada+0x30> cmpb   $0xb,-0x1c(%ebp)
000100ba <determinar_tecla_presionada+0x34> jne    000100c0 <determinar_tecla_presionada+0x3a>
000100bc <determinar_tecla_presionada+0x36> movb   $0x0,-0x9(%ebp)
000100c0 <determinar_tecla_presionada+0x3a> movzbl -0x9(%ebp),%eax
000100c4 <determinar_tecla_presionada+0x3e> sub    $0x8,%esp
000100c7 <determinar_tecla_presionada+0x41> pushl  0xc(%ebp)
000100ca <determinar_tecla_presionada+0x44> push   %eax
000100cb <determinar_tecla_presionada+0x45> call   00010147 <escribir_buffer>
000100d0 <determinar_tecla_presionada+0x4a> add    $0x10,%esp
000100d3 <determinar_tecla_presionada+0x4d> mov    0xc(%ebp),%eax
000100d6 <determinar_tecla_presionada+0x50> movzbl 0x12(%eax),%eax
000100da <determinar_tecla_presionada+0x54> cmp    $0xf,%al
000100dc <determinar_tecla_presionada+0x56> jbe    000100e9 <determinar_tecla_presionada+0x63>
000100de <determinar_tecla_presionada+0x58> mov    0xc(%ebp),%eax
000100e1 <determinar_tecla_presionada+0x5b> movzbl 0x10(%eax),%eax
000100e5 <determinar_tecla_presionada+0x5f> test   %al,%al
000100e7 <determinar_tecla_presionada+0x61> je     000100fa <determinar_tecla_presionada+0x74>
000100e9 <determinar_tecla_presionada+0x63> cmpb   $0x1c,-0x1c(%ebp)
000100ed <determinar_tecla_presionada+0x67> jne    00010116 <determinar_tecla_presionada+0x90>
000100ef <determinar_tecla_presionada+0x69> mov    0xc(%ebp),%eax
000100f2 <determinar_tecla_presionada+0x6c> movzbl 0x12(%eax),%eax
000100f6 <determinar_tecla_presionada+0x70> cmp    $0xf,%al
000100f8 <determinar_tecla_presionada+0x72> jbe    00010116 <determinar_tecla_presionada+0x90>
000100fa <determinar_tecla_presionada+0x74> movb   $0x0,-0xa(%ebp)
000100fe <determinar_tecla_presionada+0x78> movzbl -0xa(%ebp),%eax
00010102 <determinar_tecla_presionada+0x7c> sub    $0x4,%esp
00010105 <determinar_tecla_presionada+0x7f> push   %eax
00010106 <determinar_tecla_presionada+0x80> push   $0x200000
0001010b <determinar_tecla_presionada+0x85> pushl  0xc(%ebp)
0001010e <determinar_tecla_presionada+0x88> call   000101b4 <escribir_tabla_digitos>
00010113 <determinar_tecla_presionada+0x8d> add    $0x10,%esp
00010116 <determinar_tecla_presionada+0x90> mov    0xc(%ebp),%eax
00010119 <determinar_tecla_presionada+0x93> movzbl 0x12(%eax),%eax
0001011d <determinar_tecla_presionada+0x97> cmp    $0xe,%al
0001011f <determinar_tecla_presionada+0x99> ja     00010144 <determinar_tecla_presionada+0xbe>
00010121 <determinar_tecla_presionada+0x9b> cmpb   $0x1c,-0x1c(%ebp)
00010125 <determinar_tecla_presionada+0x9f> jne    00010144 <determinar_tecla_presionada+0xbe>
00010127 <determinar_tecla_presionada+0xa1> movb   $0x1,-0xa(%ebp)
0001012b <determinar_tecla_presionada+0xa5> movzbl -0xa(%ebp),%eax
0001012f <determinar_tecla_presionada+0xa9> sub    $0x4,%esp
00010132 <determinar_tecla_presionada+0xac> push   %eax
00010133 <determinar_tecla_presionada+0xad> push   $0x200000
00010138 <determinar_tecla_presionada+0xb2> pushl  0xc(%ebp)
0001013b <determinar_tecla_presionada+0xb5> call   000101b4 <escribir_tabla_digitos>
00010140 <determinar_tecla_presionada+0xba> add    $0x10,%esp
00010143 <determinar_tecla_presionada+0xbd> nop
00010144 <determinar_tecla_presionada+0xbe> nop
00010145 <determinar_tecla_presionada+0xbf> leave  
00010146 <determinar_tecla_presionada+0xc0> ret    
00010147 <escribir_buffer> push   %ebp
00010148 <escribir_buffer+0x1> mov    %esp,%ebp
0001014a <escribir_buffer+0x3> sub    $0x4,%esp
0001014d <escribir_buffer+0x6> mov    0x8(%ebp),%eax
00010150 <escribir_buffer+0x9> mov    %al,-0x4(%ebp)
00010153 <escribir_buffer+0xc> mov    0xc(%ebp),%eax
00010156 <escribir_buffer+0xf> movzbl 0x12(%eax),%eax
0001015a <escribir_buffer+0x13> cmp    $0xf,%al
0001015c <escribir_buffer+0x15> ja     000101a6 <escribir_buffer+0x5f>
0001015e <escribir_buffer+0x17> mov    0xc(%ebp),%eax
00010161 <escribir_buffer+0x1a> movzbl 0x10(%eax),%eax
00010165 <escribir_buffer+0x1e> movzbl %al,%eax
00010168 <escribir_buffer+0x21> mov    0xc(%ebp),%edx
0001016b <escribir_buffer+0x24> movzbl -0x4(%ebp),%ecx
0001016f <escribir_buffer+0x28> mov    %cl,(%edx,%eax,1)
00010172 <escribir_buffer+0x2b> mov    0xc(%ebp),%eax
00010175 <escribir_buffer+0x2e> movzbl 0x12(%eax),%eax
00010179 <escribir_buffer+0x32> lea    0x1(%eax),%edx
0001017c <escribir_buffer+0x35> mov    0xc(%ebp),%eax
0001017f <escribir_buffer+0x38> mov    %dl,0x12(%eax)
00010182 <escribir_buffer+0x3b> mov    0xc(%ebp),%eax
00010185 <escribir_buffer+0x3e> movzbl 0x10(%eax),%eax
00010189 <escribir_buffer+0x42> lea    0x1(%eax),%edx
0001018c <escribir_buffer+0x45> mov    0xc(%ebp),%eax
0001018f <escribir_buffer+0x48> mov    %dl,0x10(%eax)
00010192 <escribir_buffer+0x4b> mov    0xc(%ebp),%eax
00010195 <escribir_buffer+0x4e> movzbl 0x10(%eax),%eax
00010199 <escribir_buffer+0x52> cmp    $0x10,%al
0001019b <escribir_buffer+0x54> jne    000101b1 <escribir_buffer+0x6a>
0001019d <escribir_buffer+0x56> mov    0xc(%ebp),%eax
000101a0 <escribir_buffer+0x59> movb   $0x0,0x10(%eax)
000101a4 <escribir_buffer+0x5d> jmp    000101b1 <escribir_buffer+0x6a>
000101a6 <escribir_buffer+0x5f> pushl  0xc(%ebp)
000101a9 <escribir_buffer+0x62> call   0001003c <limpiar_buffer>
000101ae <escribir_buffer+0x67> add    $0x4,%esp
000101b1 <escribir_buffer+0x6a> nop
000101b2 <escribir_buffer+0x6b> leave  
000101b3 <escribir_buffer+0x6c> ret    
000101b4 <escribir_tabla_digitos> push   %ebp
000101b5 <escribir_tabla_digitos+0x1> mov    %esp,%ebp
000101b7 <escribir_tabla_digitos+0x3> sub    $0x28,%esp
000101ba <escribir_tabla_digitos+0x6> mov    0x10(%ebp),%eax
000101bd <escribir_tabla_digitos+0x9> mov    %al,-0x1c(%ebp)
000101c0 <escribir_tabla_digitos+0xc> movl   $0x0,-0xc(%ebp)
000101c7 <escribir_tabla_digitos+0x13> movl   $0x0,-0x10(%ebp)
000101ce <escribir_tabla_digitos+0x1a> movl   $0x0,0x21001c
000101d8 <escribir_tabla_digitos+0x24> jmp    0001022e <escribir_tabla_digitos+0x7a>
000101da <escribir_tabla_digitos+0x26> sub    $0xc,%esp
000101dd <escribir_tabla_digitos+0x29> pushl  0x8(%ebp)
000101e0 <escribir_tabla_digitos+0x2c> call   000102be <leer_buffer>
000101e5 <escribir_tabla_digitos+0x31> add    $0x10,%esp
000101e8 <escribir_tabla_digitos+0x34> mov    %al,-0x11(%ebp)
000101eb <escribir_tabla_digitos+0x37> mov    0x21001c,%eax
000101f0 <escribir_tabla_digitos+0x3c> cmp    $0x7,%eax
000101f3 <escribir_tabla_digitos+0x3f> jg     0001020c <escribir_tabla_digitos+0x58>
000101f5 <escribir_tabla_digitos+0x41> movzbl -0x11(%ebp),%edx
000101f9 <escribir_tabla_digitos+0x45> mov    0x21001c,%eax
000101fe <escribir_tabla_digitos+0x4a> shl    $0x2,%eax
00010201 <escribir_tabla_digitos+0x4d> mov    %eax,%ecx
00010203 <escribir_tabla_digitos+0x4f> shl    %cl,%edx
00010205 <escribir_tabla_digitos+0x51> mov    %edx,%eax
00010207 <escribir_tabla_digitos+0x53> add    %eax,-0x10(%ebp)
0001020a <escribir_tabla_digitos+0x56> jmp    00010221 <escribir_tabla_digitos+0x6d>
0001020c <escribir_tabla_digitos+0x58> movzbl -0x11(%ebp),%edx
00010210 <escribir_tabla_digitos+0x5c> mov    0x21001c,%eax
00010215 <escribir_tabla_digitos+0x61> shl    $0x2,%eax
00010218 <escribir_tabla_digitos+0x64> mov    %eax,%ecx
0001021a <escribir_tabla_digitos+0x66> shl    %cl,%edx
0001021c <escribir_tabla_digitos+0x68> mov    %edx,%eax
0001021e <escribir_tabla_digitos+0x6a> add    %eax,-0xc(%ebp)
00010221 <escribir_tabla_digitos+0x6d> mov    0x21001c,%eax
00010226 <escribir_tabla_digitos+0x72> add    $0x1,%eax
00010229 <escribir_tabla_digitos+0x75> mov    %eax,0x21001c
0001022e <escribir_tabla_digitos+0x7a> mov    0x21001c,%eax
00010233 <escribir_tabla_digitos+0x7f> cmp    $0xf,%eax
00010236 <escribir_tabla_digitos+0x82> jle    000101da <escribir_tabla_digitos+0x26>
00010238 <escribir_tabla_digitos+0x84> mov    0xc(%ebp),%eax
0001023b <escribir_tabla_digitos+0x87> movzbl 0x280(%eax),%eax
00010242 <escribir_tabla_digitos+0x8e> cmp    $0x9f,%al
00010244 <escribir_tabla_digitos+0x90> ja     000102a0 <escribir_tabla_digitos+0xec>
00010246 <escribir_tabla_digitos+0x92> mov    0xc(%ebp),%eax
00010249 <escribir_tabla_digitos+0x95> movzbl 0x280(%eax),%eax
00010250 <escribir_tabla_digitos+0x9c> movzbl %al,%edx
00010253 <escribir_tabla_digitos+0x9f> mov    0xc(%ebp),%eax
00010256 <escribir_tabla_digitos+0xa2> mov    -0xc(%ebp),%ecx
00010259 <escribir_tabla_digitos+0xa5> mov    %ecx,(%eax,%edx,4)
0001025c <escribir_tabla_digitos+0xa8> mov    0xc(%ebp),%eax
0001025f <escribir_tabla_digitos+0xab> movzbl 0x280(%eax),%eax
00010266 <escribir_tabla_digitos+0xb2> lea    0x1(%eax),%edx
00010269 <escribir_tabla_digitos+0xb5> mov    0xc(%ebp),%eax
0001026c <escribir_tabla_digitos+0xb8> mov    %dl,0x280(%eax)
00010272 <escribir_tabla_digitos+0xbe> mov    0xc(%ebp),%eax
00010275 <escribir_tabla_digitos+0xc1> movzbl 0x280(%eax),%eax
0001027c <escribir_tabla_digitos+0xc8> movzbl %al,%edx
0001027f <escribir_tabla_digitos+0xcb> mov    0xc(%ebp),%eax
00010282 <escribir_tabla_digitos+0xce> mov    -0x10(%ebp),%ecx
00010285 <escribir_tabla_digitos+0xd1> mov    %ecx,(%eax,%edx,4)
00010288 <escribir_tabla_digitos+0xd4> mov    0xc(%ebp),%eax
0001028b <escribir_tabla_digitos+0xd7> movzbl 0x280(%eax),%eax
00010292 <escribir_tabla_digitos+0xde> lea    0x1(%eax),%edx
00010295 <escribir_tabla_digitos+0xe1> mov    0xc(%ebp),%eax
00010298 <escribir_tabla_digitos+0xe4> mov    %dl,0x280(%eax)
0001029e <escribir_tabla_digitos+0xea> jmp    000102aa <escribir_tabla_digitos+0xf6>
000102a0 <escribir_tabla_digitos+0xec> mov    0xc(%ebp),%eax
000102a3 <escribir_tabla_digitos+0xef> movb   $0x0,0x280(%eax)
000102aa <escribir_tabla_digitos+0xf6> sub    $0xc,%esp
000102ad <escribir_tabla_digitos+0xf9> pushl  0x8(%ebp)
000102b0 <escribir_tabla_digitos+0xfc> call   0001003c <limpiar_buffer>
000102b5 <escribir_tabla_digitos+0x101> add    $0x10,%esp
000102b8 <escribir_tabla_digitos+0x104> xchg   %bx,%bx
000102bb <escribir_tabla_digitos+0x107> nop
000102bc <escribir_tabla_digitos+0x108> leave  
000102bd <escribir_tabla_digitos+0x109> ret    
000102be <leer_buffer> push   %ebp
000102bf <leer_buffer+0x1> mov    %esp,%ebp
000102c1 <leer_buffer+0x3> sub    $0x10,%esp
000102c4 <leer_buffer+0x6> movb   $0x0,-0x1(%ebp)
000102c8 <leer_buffer+0xa> mov    0x8(%ebp),%eax
000102cb <leer_buffer+0xd> movzbl 0x12(%eax),%eax
000102cf <leer_buffer+0x11> test   %al,%al
000102d1 <leer_buffer+0x13> je     00010322 <leer_buffer+0x64>
000102d3 <leer_buffer+0x15> mov    0x8(%ebp),%eax
000102d6 <leer_buffer+0x18> movzbl 0x12(%eax),%eax
000102da <leer_buffer+0x1c> movzbl %al,%eax
000102dd <leer_buffer+0x1f> lea    -0x1(%eax),%edx
000102e0 <leer_buffer+0x22> mov    0x8(%ebp),%eax
000102e3 <leer_buffer+0x25> movzbl (%eax,%edx,1),%eax
000102e7 <leer_buffer+0x29> mov    %al,-0x1(%ebp)
000102ea <leer_buffer+0x2c> mov    0x8(%ebp),%eax
000102ed <leer_buffer+0x2f> movzbl 0x12(%eax),%eax
000102f1 <leer_buffer+0x33> lea    -0x1(%eax),%edx
000102f4 <leer_buffer+0x36> mov    0x8(%ebp),%eax
000102f7 <leer_buffer+0x39> mov    %dl,0x12(%eax)
000102fa <leer_buffer+0x3c> mov    0x8(%ebp),%eax
000102fd <leer_buffer+0x3f> movzbl 0x11(%eax),%eax
00010301 <leer_buffer+0x43> lea    0x1(%eax),%edx
00010304 <leer_buffer+0x46> mov    0x8(%ebp),%eax
00010307 <leer_buffer+0x49> mov    %dl,0x11(%eax)
0001030a <leer_buffer+0x4c> mov    0x8(%ebp),%eax
0001030d <leer_buffer+0x4f> movzbl 0x11(%eax),%eax
00010311 <leer_buffer+0x53> cmp    $0x10,%al
00010313 <leer_buffer+0x55> jne    0001031c <leer_buffer+0x5e>
00010315 <leer_buffer+0x57> mov    0x8(%ebp),%eax
00010318 <leer_buffer+0x5a> movb   $0x0,0x11(%eax)
0001031c <leer_buffer+0x5e> movzbl -0x1(%ebp),%eax
00010320 <leer_buffer+0x62> jmp    00010326 <leer_buffer+0x68>
00010322 <leer_buffer+0x64> movzbl -0x1(%ebp),%eax
00010326 <leer_buffer+0x68> leave  
00010327 <leer_buffer+0x69> ret    
00010328 <init_pic> mov    $0x11,%al
0001032a <init_pic+0x2> out    %al,$0x20
0001032c <init_pic+0x4> mov    $0x20,%al
0001032e <init_pic+0x6> out    %al,$0x21
00010330 <init_pic+0x8> mov    $0x4,%al
00010332 <init_pic+0xa> out    %al,$0x21
00010334 <init_pic+0xc> mov    $0x1,%al
00010336 <init_pic+0xe> out    %al,$0x21
00010338 <init_pic+0x10> mov    $0xfd,%al
0001033a <init_pic+0x12> out    %al,$0x21
0001033c <init_pic+0x14> mov    $0x11,%al
0001033e <init_pic+0x16> out    %al,$0xa0
00010340 <init_pic+0x18> mov    $0x28,%al
00010342 <init_pic+0x1a> out    %al,$0xa1
00010344 <init_pic+0x1c> mov    $0x2,%al
00010346 <init_pic+0x1e> out    %al,$0xa1
00010348 <init_pic+0x20> mov    $0x1,%al
0001034a <init_pic+0x22> out    %al,$0xa1
0001034c <init_pic+0x24> mov    $0xff,%al
0001034e <init_pic+0x26> out    %al,$0xa1
00010350 <init_pic+0x28> mov    $0xfc,%al
00010352 <init_pic+0x2a> out    %al,$0x21
00010354 <init_pic+0x2c> ret    
00010355 <init_timer> mov    $0x36,%al
00010357 <init_timer+0x2> out    %al,$0x43
00010359 <init_timer+0x4> mov    $0x2e9c,%ax
0001035d <init_timer+0x8> out    %al,$0x40
0001035f <init_timer+0xa> mov    %ah,%al
00010361 <init_timer+0xc> out    %al,$0x40
00010363 <init_timer+0xe> ret    
00010364 <init_teclado> mov    $0xff,%al
00010366 <init_teclado+0x2> out    %al,$0x64
00010368 <init_teclado+0x4> mov    $0x100,%ecx
0001036d <init_teclado+0x9> loop   0001036d <init_teclado+0x9>
0001036f <init_teclado+0xb> mov    $0x10000,%ecx
00010374 <ciclo1> in     $0x60,%al
00010376 <ciclo1+0x2> test   $0x1,%al
00010378 <ciclo1+0x4> loope  00010374 <ciclo1>
0001037a <ciclo1+0x6> mov    $0xf4,%al
0001037c <ciclo1+0x8> out    %al,$0x64
0001037e <ciclo1+0xa> mov    $0x10000,%ecx
00010383 <ciclo2> in     $0x60,%al
00010385 <ciclo2+0x2> test   $0x1,%al
00010387 <ciclo2+0x4> loope  00010383 <ciclo2>
00010389 <ciclo2+0x6> in     $0x60,%al
0001038b <ciclo2+0x8> ret    

Disassembly of section .functions_rom:
fffffc00 <__fast_memcpy_rom> push   %ebp
fffffc01 <__fast_memcpy_rom+0x1> mov    %esp,%ebp
fffffc03 <__fast_memcpy_rom+0x3> sub    $0x10,%esp
fffffc06 <__fast_memcpy_rom+0x6> movb   $0x0,-0x1(%ebp)
fffffc0a <__fast_memcpy_rom+0xa> cmpl   $0x0,0x10(%ebp)
fffffc0e <__fast_memcpy_rom+0xe> je     fffffc36 <__fast_memcpy_rom+0x36>
fffffc10 <__fast_memcpy_rom+0x10> jmp    fffffc2c <__fast_memcpy_rom+0x2c>
fffffc12 <__fast_memcpy_rom+0x12> subl   $0x1,0x10(%ebp)
fffffc16 <__fast_memcpy_rom+0x16> mov    0x8(%ebp),%edx
fffffc19 <__fast_memcpy_rom+0x19> lea    0x4(%edx),%eax
fffffc1c <__fast_memcpy_rom+0x1c> mov    %eax,0x8(%ebp)
fffffc1f <__fast_memcpy_rom+0x1f> mov    0xc(%ebp),%eax
fffffc22 <__fast_memcpy_rom+0x22> lea    0x4(%eax),%ecx
fffffc25 <__fast_memcpy_rom+0x25> mov    %ecx,0xc(%ebp)
fffffc28 <__fast_memcpy_rom+0x28> mov    (%edx),%edx
fffffc2a <__fast_memcpy_rom+0x2a> mov    %edx,(%eax)
fffffc2c <__fast_memcpy_rom+0x2c> cmpl   $0x0,0x10(%ebp)
fffffc30 <__fast_memcpy_rom+0x30> jne    fffffc12 <__fast_memcpy_rom+0x12>
fffffc32 <__fast_memcpy_rom+0x32> movb   $0x1,-0x1(%ebp)
fffffc36 <__fast_memcpy_rom+0x36> movzbl -0x1(%ebp),%eax
fffffc3a <__fast_memcpy_rom+0x3a> leave  
fffffc3b <__fast_memcpy_rom+0x3b> ret    
