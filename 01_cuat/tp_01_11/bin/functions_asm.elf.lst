     1                                  SECTION .functions_asm
     2                                  
     3                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ; /* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ; /* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ; /* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ; /* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ; /* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ; /* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ; /* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ; /* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ; /* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ; /* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ; /* PaGine*/
    12                              <1> %define flag_TSS_sup    1
    13                              <1> %define flag_TSS_us     0
    14                              <1> 
    15                              <1> ;------------DTP y TP(Descriptor de Tablas de Páginas y Tabla de Páginas) flags--------------------------
    16                              <1> PAG_PCD_YES  equ 1       ; cachable                          
    17                              <1> PAG_PCD_NO   equ 0       ; no cachable
    18                              <1> PAG_PWT_YES  equ 1       ; 1 se escribe en cache y ram       
    19                              <1> PAG_PWT_NO   equ 0       ; 0 
    20                              <1> PAG_P_YES    equ 1       ; 1 presente
    21                              <1> PAG_P_NO     equ 0       ; 0 no presente
    22                              <1> PAG_RW_W     equ 1       ; 1 lectura y escritura
    23                              <1> PAG_RW_R     equ 0       ; 0 solo lectura
    24                              <1> PAG_US_SUP   equ 0       ; 0 supervisor
    25                              <1> PAG_US_US    equ 1       ; 1 usuario  
    26                              <1> PAG_D        equ 0       ; modificacion en la pagina
    27                              <1> PAG_PAT      equ 0       ; PAT                   
    28                              <1> PAG_G_YES    equ 0       ; Global                 
    29                              <1> PAG_A        equ 0       ; accedida
    30                              <1> PAG_PS_4K    equ 0       ; tamaño de pagina de 4KB
    31                              <1> 
     4                                  
     5                                  ;---------------EXTERN-------------------
     6                                  EXTERN  DS_SEL_00
     7                                  EXTERN  CS_SEL_00
     8                                  EXTERN  DS_SEL_11
     9                                  EXTERN  CS_SEL_11
    10                                  EXTERN __TSS_BASICA
    11                                  EXTERN  TSS_aux
    12                                  EXTERN  Stack_aux
    13                                  EXTERN  CR3_aux
    14                                  EXTERN return_guardar_contexto
    15                                  EXTERN return_leer_contexto
    16                                  EXTERN primer_context_save
    17                                  ;--------------GLOBAL-------------------
    18                                  GLOBAL init_tss
    19                                  GLOBAL guardar_contexto_asm
    20                                  GLOBAL leer_contexto_siguiente_asm
    21                                  
    22                                  init_tss:
    23                                  
    24                                  ; @params
    25                                  ;  eax--->[ esp + 4 ]---> __TSS1_VMA                      ; TSS de la tarea
    26                                  ;  ebx--->[ esp + 8 ]---> __CR3_TAREA_1_PHY               ; CR3 de la tarea
    27                                  ;  ecx--->[ esp + 12 ]---> __TAREA1_STACK_END_VMA         ; STACK de la tarea
    28                                  ;  edx--->[ esp + 16 ]---> __STACK_KERNEL_TAREA1_END_VMA  ; STACK del Kernel
    29                                  ;  esi--->[ esp + 20 ]---> ejecutar_tarea_1               ; Dir. de inicio de la tarea
    30                                  
    31                                      ; -> Paso parámetros del stack a los registros.
    32                                  
    33                                      ;xchg bx, bx
    34                                  
    35                                      ; Flag de TSS de kernel
    36 00000000 8B7C2418                    mov edi, [ esp + 24 ] 
    37                                      ; Base de la TSS
    38 00000004 8B442414                    mov eax, [ esp + 20 ] 
    39                                      ;mov [ TSS_aux ], eax              
    40                                      ; CR3
    41 00000008 8B5C2410                    mov ebx, [ esp + 16 ]
    42                                      ; Stack user
    43 0000000C 8B4C240C                    mov ecx, [ esp + 12 ]
    44                                      ; Stack Kernel 
    45 00000010 8B542408                    mov edx, [ esp + 8 ]
    46                                      ; Dir. de inicio de tarea
    47 00000014 8B742404                    mov esi, [ esp + 4 ]
    48                                  
    49                                      ; -> Armo la TSS con formato de Intel (podría no haberlo sido para las de las tareas. Si o si para la del CPU)
    50                                  
    51                                      ;Previous Task Link 
    52 00000018 C70000000000                mov [eax], dword(0) 
    53                                      ;ESP0 - Stack Pointer de Nivel 0
    54 0000001E 895004                      mov [eax + 4], dword (edx)            ; STACK de Kernel de nivel 0
    55                                      ;SS0 - Stack Segment de Nivel 0
    56 00000021 C74008[00000000]            mov [eax + 8], dword(DS_SEL_00)       ; Selector de nivel 0               
    57                                      ;ESP1 - Stack Pointer de Nivel 1
    58 00000028 C7400C00000000              mov [eax + 12], dword(0) 
    59                                      ;SS1 - Stack Segment de Nivel 1
    60 0000002F C7401000000000              mov [eax + 16], dword(0) 
    61                                      ;ESP2 - Stack Pointer de Nivel 2
    62 00000036 894814                      mov [eax + 20], dword(ecx)            ; Stack de nivel 3
    63                                      ;SS2 - Stack Segment de Nivel 2
    64 00000039 C74018[03000000]            mov [eax + 24], dword(DS_SEL_11 + 3)  ; Selector de datos de nivel 3
    65                                      ;CR3 - Control Register 3
    66 00000040 89581C                      mov [eax + 28], (ebx)                 ; CR3 de la tarea
    67                                      ;EIP - Instruction Pointer
    68 00000043 897020                      mov [eax + 32], (esi)                 ; Dir. de inicio de la tarea
    69                                      ;EFLAGS - Status Flags
    70 00000046 C7402402020000              mov [eax + 36], dword(0x202) 
    71                                      ;EAX 
    72 0000004D C7402800000000              mov [eax + 40], dword(0) 
    73                                      ;ECX
    74 00000054 C7402C00000000              mov [eax + 44], dword(0) 
    75                                      ;EDX
    76 0000005B C7403000000000              mov [eax + 48], dword(0) 
    77                                      ;EBX
    78 00000062 C7403400000000              mov [eax + 52], dword(0) 
    79                                      ;ESP
    80 00000069 894838                      mov [eax + 56], (ecx)               ; STACK de la tarea
    81                                      ;EBP
    82 0000006C 89483C                      mov [eax + 60], (ecx)               ; STACK de la tarea 
    83                                      ;ESI
    84 0000006F C7404000000000              mov [eax + 64], dword(0) 
    85                                      ;EDI
    86 00000076 C7404400000000              mov [eax + 68], dword(0) 
    87                                  
    88 0000007D 83FF01                      cmp edi, flag_TSS_sup
    89 00000080 742C                        je tss_nivel_0
    90                                  
    91                                  tss_nivel_3:
    92                                      ;ES 
    93 00000082 C74048[03000000]            mov [eax + 72], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
    94                                      ;CS 
    95 00000089 C7404C[03000000]            mov [eax + 76], dword(CS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
    96                                      ;SS 
    97 00000090 C74050[03000000]            mov [eax + 80], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
    98                                      ;DS 
    99 00000097 C74054[03000000]            mov [eax + 84], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   100                                      ;FS 
   101 0000009E C74058[03000000]            mov [eax + 88], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   102                                      ;GS 
   103 000000A5 C7405C[03000000]            mov [eax + 92], dword(DS_SEL_11 + 3)    ; Selector de nivel 3 con RPL = 3
   104                                  
   105 000000AC EB2A                        jmp fin_init_tss
   106                                  tss_nivel_0:
   107                                      ;ES 
   108 000000AE C74048[00000000]            mov [eax + 72], dword(DS_SEL_00)    ; Selector de nivel 3
   109                                      ;CS 
   110 000000B5 C7404C[00000000]            mov [eax + 76], dword(CS_SEL_00)    ; Selector de nivel 3
   111                                      ;SS 
   112 000000BC C74050[00000000]            mov [eax + 80], dword(DS_SEL_00)    ; Selector de nivel 3
   113                                      ;DS 
   114 000000C3 C74054[00000000]            mov [eax + 84], dword(DS_SEL_00)    ; Selector de nivel 3
   115                                      ;FS 
   116 000000CA C74058[00000000]            mov [eax + 88], dword(DS_SEL_00)    ; Selector de nivel 3
   117                                      ;GS 
   118 000000D1 C7405C[00000000]            mov [eax + 92], dword(DS_SEL_00)    ; Selector de nivel 3
   119                                      
   120                                  
   121                                  fin_init_tss:
   122                                  
   123                                      ;LDTR
   124 000000D8 C7406000000000              mov [eax + 96], dword(0) 
   125                                      ;Bitmap E/S
   126 000000DF C7406400000000              mov [eax + 100], dword(0)
   127                                  
   128 000000E6 C3                          ret
   129                                      
   130                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   131                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CONTEXT SWITCH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   132                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   133                                      ; Función que lee de memoria el contexto de registros para la tarea próxima a ejecutarse.
   134                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   135                                  leer_contexto_siguiente_asm:
   136                                  
   137                                      ;xchg bx, bx
   138                                    
   139                                      ; CR3 de la próxima tarea
   140 000000E7 A1[00000000]                mov eax, [CR3_aux]
   141 000000EC 0F22D8                      mov cr3, eax
   142                                  
   143                                      ;Cargo los registros de segmento
   144 000000EF A1[00000000]                mov eax, [TSS_aux]         
   145 000000F4 8E4048                      mov es, [eax + 0x48]            ;Recupero es     
   146 000000F7 8E5854                      mov ds, [eax + 0x54]            ;Recupero ds   
   147 000000FA 8E6058                      mov fs, [eax + 0x58]            ;Recupero fs   
   148 000000FD 8E685C                      mov gs, [eax + 0x5C]            ;Recupero gs    
   149                                      
   150                                      ; Stack de nivel 0 de la tarea
   151                                  
   152 00000100 8B5804                      mov ebx, [eax + 0x04]           ;Recupero ESP0
   153 00000103 891D[00000000]              mov [Stack_aux], ebx
   154 00000109 8B5808                      mov ebx, [eax + 0x08]           ;Recupero SS0
   155 0000010C 891D[04000000]              mov [Stack_aux + 4], ebx
   156                                  
   157                                      ;LSS --> load stack segment
   158 00000112 0FB225[00000000]            lss esp, [Stack_aux]
   159                                  
   160                                      ; Cargo Stack de nivel 3 de la tarea
   161 00000119 8B5818                      mov ebx, [eax + 0x18]      ;Recupero SS2
   162 0000011C 53                          push ebx
   163 0000011D 8B5814                      mov ebx, [eax + 0x14]      ;Recupero ESP2
   164 00000120 53                          push ebx
   165 00000121 8B5824                      mov ebx, [eax + 0x24]      ;Recupero EFLAGS
   166 00000124 53                          push ebx
   167 00000125 8B584C                      mov ebx, [eax + 0x4C]      ;Recupero CS
   168 00000128 53                          push ebx
   169 00000129 8B5820                      mov ebx, [eax + 0x20]      ;Recupero EIP
   170 0000012C 53                          push ebx
   171                                  
   172                                      ;Registros de Proposito general
   173 0000012D 8B482C                      mov ecx, [eax + 0x2C]
   174 00000130 8B5030                      mov edx, [eax + 0x30]
   175 00000133 8B5834                      mov ebx, [eax + 0x34]       
   176 00000136 8B7040                      mov esi, [eax + 0x40]
   177 00000139 8B7844                      mov edi, [eax + 0x44]
   178 0000013C 8B4028                      mov eax, [eax + 0x28]     ; Debe estar último
   179                                  
   180                                      ; Cargo la TSS
   181 0000013F FF35[00000000]              push dword [TSS_aux]
   182 00000145 E8A0000000                  call cargar_TSS_CPU
   183 0000014A 83C404                      add esp,4
   184                                  
   185 0000014D E9(00000000)                jmp return_leer_contexto
   186                                  
   187                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   188                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CONTEXT SAVE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   189                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   190                                      ; Función que guarda en memoria el contexto de registros de la tarea que es suspendida.
   191                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   192                                  guardar_contexto_asm:
   193                                  
   194                                      ;xchg bx, bx
   195                                      ; Recupero de la pila los registros generales
   196 00000152 61                          popad
   197                                      ;Registros Generales
   198 00000153 A3[28000000]                mov [TSS_aux + 40],   eax      ;Guardo EAX
   199 00000158 890D[2C000000]              mov [TSS_aux + 44],   ecx      ;Guardo ECX
   200 0000015E 8915[30000000]              mov [TSS_aux + 48],   edx      ;Guardo EDX
   201 00000164 891D[34000000]              mov [TSS_aux + 52],   ebx      ;Guardo EBX
   202                                      ;mov [TSS_aux + 56],  esp      ;Guardo ESP
   203 0000016A 892D[3C000000]              mov [TSS_aux + 60],   ebp      ;Guardo EBP 
   204 00000170 8935[40000000]              mov [TSS_aux + 64],   esi      ;Guardo ESI
   205 00000176 893D[44000000]              mov [TSS_aux + 68],   edi      ;Guardo EDI 
   206                                      ;Registros de Segmento
   207 0000017C 8C05[48000000]              mov [TSS_aux + 72],   es       ;Guardo ES
   208                                      ;mov [TSS_aux + 76],  cs        ;Guardo CS        
   209                                      ;mov [TSS_aux + 80],  ss      ;Guardo SS
   210 00000182 8C1D[54000000]              mov [TSS_aux + 84],   ds       ;Guardo DS   
   211 00000188 8C25[58000000]              mov [TSS_aux + 88],   fs       ;Guardo FS       
   212 0000018E 8C2D[5C000000]              mov [TSS_aux + 92],   gs       ;Guardo GS    
   213 00000194 0F20D8                      mov eax, cr3                  ;Guardo CR3
   214 00000197 A3[1C000000]                mov [TSS_aux + 28],   eax 
   215                                      ;Registros del Stack
   216                                  
   217 0000019C 803D[00000000]01            cmp byte[primer_context_save], 1
   218 000001A3 741A                        je no_guardo_stack_user
   219                                  
   220                                      ;xchg bx, bx
   221 000001A5 58                          pop eax                             
   222                                      ;mov eax, [esp + 12]                ;Guardo EIP
   223 000001A6 A3[20000000]                mov [TSS_aux + 32],   eax  
   224 000001AB 58                          pop eax
   225                                      ;mov eax, [esp + 20]                ;Guardo EFLAGS
   226 000001AC A3[24000000]                mov [TSS_aux + 36],   eax  
   227 000001B1 58                          pop eax                             ;Guardo ESP2      
   228 000001B2 A3[14000000]                mov [TSS_aux + 20],   eax
   229 000001B7 58                          pop eax                             ;Guardo SS2      
   230 000001B8 A3[18000000]                mov [TSS_aux + 24],   eax
   231                                  
   232 000001BD EB26                        jmp fin_guardar_contexto
   233                                  
   234                                  no_guardo_stack_user:
   235                                  
   236                                      ;xchg bx, bx
   237 000001BF 8B0424                      mov eax, [esp]
   238 000001C2 A3[20000000]                mov [TSS_aux + 32],   eax      ; Guardo EIP
   239 000001C7 8B442404                    mov eax, [ esp + 4 ]
   240 000001CB A3[4C000000]                mov [TSS_aux + 76],   eax      ; Guardo CS
   241 000001D0 8B442408                    mov eax, [ esp + 8 ]
   242 000001D4 A3[24000000]                mov [TSS_aux + 36],   eax      ; Guardo EFLAGS
   243 000001D9 8C15[08000000]              mov [TSS_aux + 8],    ss       ; Guardo SS0
   244 000001DF 8925[04000000]              mov [TSS_aux + 4],    esp      ; Guardo ESP0 
   245                                  
   246                                  fin_guardar_contexto:
   247 000001E5 E9(00000000)                jmp return_guardar_contexto
   248                                  
   249                                          
   250                                  cargar_TSS_CPU:
   251                                  
   252 000001EA 8B5C2404                    mov ebx, [esp + 4]
   253                                      ;backlink
   254 000001EE 8B03                        mov eax, [ebx]
   255                                  
   256 000001F0 A3[00000000]                mov [__TSS_BASICA], eax 
   257                                      ;ESP0
   258 000001F5 8B4304                      mov eax, [ebx+0x04]
   259 000001F8 A3[04000000]                mov [__TSS_BASICA+0x04], eax
   260                                      ;SS0
   261 000001FD 8B4308                      mov eax, [ebx+0x08]
   262 00000200 A3[08000000]                mov [__TSS_BASICA+0x08], eax
   263                                      ;ESP1
   264 00000205 8B430C                      mov eax, [ebx+0x0C]
   265 00000208 A3[0C000000]                mov [__TSS_BASICA+0x0C], eax 
   266                                      ;SS1
   267 0000020D 8B4310                      mov eax, [ebx+0x10]
   268 00000210 A3[10000000]                mov [__TSS_BASICA+0x10], eax
   269                                      ;ESP2
   270 00000215 8B4314                      mov eax, [ebx+0x14]
   271 00000218 A3[14000000]                mov [__TSS_BASICA+0x14], eax 
   272                                      ;SS2
   273 0000021D 8B4318                      mov eax, [ebx+0x18]
   274 00000220 A3[18000000]                mov [__TSS_BASICA+0x18], eax 
   275                                      ;CR3
   276 00000225 8B431C                      mov eax, [ebx+0x1C]
   277 00000228 A3[1C000000]                mov [__TSS_BASICA+0x1C], eax
   278                                      ;EIP
   279 0000022D 8B4320                      mov eax, [ebx+0x20]
   280 00000230 A3[20000000]                mov [__TSS_BASICA+0x20], eax 
   281                                      ;EFLAGS
   282 00000235 8B4324                      mov eax, [ebx+0x24]
   283 00000238 A3[24000000]                mov [__TSS_BASICA+0x24], eax 
   284                                      ;EAX
   285 0000023D 8B4328                      mov eax, [ebx+0x28]
   286 00000240 A3[28000000]                mov [__TSS_BASICA+0x28], eax 
   287                                      ;ECX
   288 00000245 8B432C                      mov eax, [ebx+0x2C]
   289 00000248 A3[2C000000]                mov [__TSS_BASICA+0x2C], eax 
   290                                      ;EDX
   291 0000024D 8B4330                      mov eax, [ebx+0x30]
   292 00000250 A3[30000000]                mov [__TSS_BASICA+0x30], eax 
   293                                      ;EBX
   294 00000255 8B4334                      mov eax, [ebx+0x34]
   295 00000258 A3[34000000]                mov [__TSS_BASICA+0x34], eax 
   296                                      ;ESP
   297 0000025D 8B4338                      mov eax, [ebx+0x38]
   298 00000260 A3[38000000]                mov [__TSS_BASICA+0x38], eax
   299                                      ;EBP
   300 00000265 8B433C                      mov eax, [ebx+0x3C]
   301 00000268 A3[3C000000]                mov [__TSS_BASICA+0x3C], eax
   302                                      ;ESI
   303 0000026D 8B4340                      mov eax, [ebx+0x40]
   304 00000270 A3[40000000]                mov [__TSS_BASICA+0x40], eax
   305                                      ;EDI
   306 00000275 8B4344                      mov eax, [ebx+0x44]
   307 00000278 A3[44000000]                mov [__TSS_BASICA+0x44], eax
   308                                      ;ES
   309 0000027D 8B4348                      mov eax, [ebx+0x48]
   310 00000280 A3[48000000]                mov [__TSS_BASICA+0x48], eax
   311                                      ;CS
   312 00000285 8B434C                      mov eax, [ebx+0x4C]
   313 00000288 A3[4C000000]                mov [__TSS_BASICA+0x4C], eax
   314                                      ;SS
   315 0000028D 8B4350                      mov eax, [ebx+0x50]
   316 00000290 A3[50000000]                mov [__TSS_BASICA+0x50], eax
   317                                      ;DS
   318 00000295 8B4354                      mov eax, [ebx+0x54]
   319 00000298 A3[54000000]                mov [__TSS_BASICA+0x54], eax
   320                                      ;FS
   321 0000029D 8B4358                      mov eax, [ebx+0x58]
   322 000002A0 A3[58000000]                mov [__TSS_BASICA+0x58], eax
   323                                      ;GS
   324 000002A5 8B435C                      mov eax, [ebx+0x5C]
   325 000002A8 A3[5C000000]                mov [__TSS_BASICA+0x5C], eax
   326                                      ;LDTR
   327 000002AD 8B4360                      mov eax, [ebx+0x60]
   328 000002B0 A3[60000000]                mov [__TSS_BASICA+0x60], eax
   329                                      ;Bitmap E/S
   330 000002B5 8B4364                      mov eax, [ebx+0x64]
   331 000002B8 A3[64000000]                mov [__TSS_BASICA+0x64], eax
   332                                  
   333 000002BD C3                          ret
