     1                                  SECTION .functions_asm
     2                                  ;---------------EXTERN-------------------
     3                                  EXTERN  DS_SEL_00
     4                                  EXTERN  CS_SEL_00
     5                                  EXTERN  DS_SEL_11
     6                                  EXTERN  CS_SEL_11
     7                                  EXTERN __TSS_BASICA
     8                                  EXTERN  TSS_aux
     9                                  EXTERN  Stack_aux
    10                                  EXTERN  CR3_aux
    11                                  EXTERN return_guardar_contexto
    12                                  EXTERN return_leer_contexto
    13                                  EXTERN primer_context_save
    14                                  ;--------------GLOBAL-------------------
    15                                  GLOBAL init_tss
    16                                  GLOBAL guardar_contexto_asm
    17                                  GLOBAL leer_contexto_siguiente_asm
    18                                  
    19                                  init_tss:
    20                                  
    21                                  ; @params
    22                                  ;  eax--->[ esp + 4 ]---> __TSS1_VMA                      ; TSS de la tarea
    23                                  ;  ebx--->[ esp + 8 ]---> __CR3_TAREA_1_PHY               ; CR3 de la tarea
    24                                  ;  ecx--->[ esp + 12 ]---> __TAREA1_STACK_END_VMA         ; STACK de la tarea
    25                                  ;  edx--->[ esp + 16 ]---> __STACK_KERNEL_TAREA1_END_VMA  ; STACK del Kernel
    26                                  ;  esi--->[ esp + 20 ]---> ejecutar_tarea_1               ; Dir. de inicio de la tarea
    27                                  
    28                                      ; -> Paso parámetros del stack a los registros.
    29                                  
    30                                      ; Base de la TSS
    31 00000000 8B442414                    mov eax, [ esp + 20 ]               
    32                                      ; CR3
    33 00000004 8B5C2410                    mov ebx, [ esp + 16 ]
    34                                      ; Stack user
    35 00000008 8B4C240C                    mov ecx, [ esp + 12 ]
    36                                      ; Stack Kernel 
    37 0000000C 8B542408                    mov edx, [ esp + 8 ]
    38                                      ; Dir. de inicio de tarea
    39 00000010 8B742404                    mov esi, [ esp + 4 ]
    40                                  
    41                                      ; -> Armo la TSS con formato de Intel (podría no haberlo sido para las de las tareas. Si o si para la del CPU)
    42                                  
    43                                      ;Previous Task Link 
    44 00000014 C70000000000                mov [eax], dword(0) 
    45                                      ;ESP0 - Stack Pointer de Nivel 0
    46 0000001A 895004                      mov [eax + 4], dword (edx)            ; STACK de Kernel de nivel 0
    47                                      ;SS0 - Stack Segment de Nivel 0
    48 0000001D C74008[00000000]            mov [eax + 8], dword(DS_SEL_00)       ; Selector de nivel 0               
    49                                      ;ESP1 - Stack Pointer de Nivel 1
    50 00000024 C7400C00000000              mov [eax + 12], dword(0) 
    51                                      ;SS1 - Stack Segment de Nivel 1
    52 0000002B C7401000000000              mov [eax + 16], dword(0) 
    53                                      ;ESP2 - Stack Pointer de Nivel 2
    54 00000032 C7401400000000              mov [eax + 20], dword(0) 
    55                                      ;SS2 - Stack Segment de Nivel 2
    56 00000039 C7401800000000              mov [eax + 24], dword(0) 
    57                                      ;CR3 - Control Register 3
    58 00000040 89581C                      mov [eax + 28], (ebx)                 ; CR3 de la tarea
    59                                      ;EIP - Instruction Pointer
    60 00000043 897020                      mov [eax + 32], (esi)                 ; Dir. de inicio de la tarea
    61                                      ;EFLAGS - Status Flags
    62 00000046 C7402402020000              mov [eax + 36], dword(0x202) 
    63                                      ;EAX 
    64 0000004D C7402800000000              mov [eax + 40], dword(0) 
    65                                      ;ECX
    66 00000054 C7402C00000000              mov [eax + 44], dword(0) 
    67                                      ;EDX
    68 0000005B C7403000000000              mov [eax + 48], dword(0) 
    69                                      ;EBX
    70 00000062 C7403400000000              mov [eax + 52], dword(0) 
    71                                      ;ESP
    72 00000069 894838                      mov [eax + 56], (ecx)               ; STACK de la tarea
    73                                      ;EBP
    74 0000006C 89483C                      mov [eax + 60], (ecx)               ; STACK de la tarea 
    75                                      ;ESI
    76 0000006F C7404000000000              mov [eax + 64], dword(0) 
    77                                      ;EDI
    78 00000076 C7404400000000              mov [eax + 68], dword(0) 
    79                                      ;ES 
    80 0000007D C74048[00000000]            mov [eax + 72], dword(DS_SEL_11)    ; Selector de nivel 3
    81                                      ;CS 
    82 00000084 C7404C[00000000]            mov [eax + 76], dword(CS_SEL_11)    ; Selector de nivel 3
    83                                      ;SS 
    84 0000008B C74050[00000000]            mov [eax + 80], dword(DS_SEL_11)    ; Selector de nivel 3
    85                                      ;DS 
    86 00000092 C74054[00000000]            mov [eax + 84], dword(DS_SEL_11)    ; Selector de nivel 3
    87                                      ;FS 
    88 00000099 C74058[00000000]            mov [eax + 88], dword(DS_SEL_11)    ; Selector de nivel 3
    89                                      ;GS 
    90 000000A0 C7405C[00000000]            mov [eax + 92], dword(DS_SEL_11)    ; Selector de nivel 3
    91                                      ;LDTR
    92 000000A7 C7406000000000              mov [eax + 96], dword(0) 
    93                                      ;Bitmap E/S
    94 000000AE C7406400000000              mov [eax + 100], dword(0)
    95 000000B5 C3                          ret
    96                                      
    97                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    98                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CONTEXT SWITCH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    99                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   100                                      ; Función que lee de memoria el contexto de registros para la tarea próxima a ejecutarse.
   101                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   102                                  leer_contexto_siguiente_asm:
   103                                  
   104 000000B6 6687DB                      xchg bx, bx
   105                                    
   106                                      ; CR3 de la próxima tarea
   107 000000B9 A1[00000000]                mov eax, [CR3_aux]
   108 000000BE 0F22D8                      mov cr3, eax
   109                                  
   110                                      ;Cargo los registros de segmento
   111 000000C1 A1[48000000]                mov eax, [TSS_aux + 0x48]       ;Recupero es
   112 000000C6 8EC0                        mov es, eax 
   113 000000C8 A1[54000000]                mov eax, [TSS_aux + 0x54]       ;Recupero ds
   114 000000CD 8ED8                        mov ds, eax
   115 000000CF A1[58000000]                mov eax, [TSS_aux + 0x58]       ;Recupero fs
   116 000000D4 8EE0                        mov fs, eax
   117 000000D6 A1[5C000000]                mov eax, [TSS_aux + 0x5C]       ;Recupero gs
   118 000000DB 8EE8                        mov gs, eax
   119                                      
   120                                      ;mov esp, [TSS_aux + 0x38]
   121 000000DD 8B2D[3C000000]              mov ebp, [TSS_aux + 0x3C]   
   122                                  
   123                                      ;seteo el Stack
   124 000000E3 A1[04000000]                mov eax, [TSS_aux + 0x04]      ;Recupero ESP0
   125 000000E8 A3[00000000]                mov [Stack_aux], eax
   126 000000ED A1[08000000]                mov eax, [TSS_aux + 0x08]      ;Recupero SS0
   127 000000F2 A3[04000000]                mov [Stack_aux + 4], eax
   128                                  
   129                                      ;LSS --> load stack segment
   130 000000F7 0FB225[00000000]            lss esp, [Stack_aux]
   131                                  
   132                                      ;cargo el stack 
   133 000000FE A1[18000000]                mov eax, [TSS_aux + 0x18]      ;Recupero SS2
   134 00000103 83C003                      add eax, 3                     ;cargo el RPL al selector
   135 00000106 50                          push eax
   136 00000107 A1[14000000]                mov eax, [TSS_aux + 0x14]      ;Recupero ESP2
   137 0000010C 50                          push eax
   138 0000010D A1[24000000]                mov eax, [TSS_aux + 0x24]      ;Recupero EFLAGS
   139 00000112 50                          push eax
   140 00000113 A1[4C000000]                mov eax, [TSS_aux + 0x4C]      ;Recupero CS
   141 00000118 50                          push eax
   142 00000119 A1[20000000]                mov eax, [TSS_aux + 0x20]      ;Recupero EIP
   143 0000011E 50                          push eax
   144                                  
   145                                      ;Registros de Proposito general
   146 0000011F A1[28000000]                mov eax, [TSS_aux + 0x28]    
   147 00000124 8B0D[2C000000]              mov ecx, [TSS_aux + 0x2C]
   148 0000012A 8B15[30000000]              mov edx, [TSS_aux + 0x30]
   149 00000130 8B1D[34000000]              mov ebx, [TSS_aux + 0x34]       
   150 00000136 8B35[40000000]              mov esi, [TSS_aux + 0x40]
   151 0000013C 8B3D[44000000]              mov edi, [TSS_aux + 0x44]
   152                                  
   153                                      ; REVISAR ACA
   154 00000142 6687DB                      xchg bx, bx
   155                                  
   156                                      ; Cargo la TSS
   157 00000145 68[00000000]                push TSS_aux
   158 0000014A E8A6000000                  call cargar_TSS_CPU
   159 0000014F 83C404                      add esp,4
   160                                  
   161 00000152 E9(00000000)                jmp return_leer_contexto
   162                                  
   163                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   164                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CONTEXT SAVE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   165                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   166                                      ; Función que guarda en memoria el contexto de registros de la tarea que es suspendida.
   167                                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   168                                  guardar_contexto_asm:
   169                                  
   170                                      ;xchg bx, bx
   171                                      ; Recupero de la pila los registros generales
   172 00000157 61                          popad
   173                                  
   174                                      ;Registros Generales
   175 00000158 A3[28000000]                mov [TSS_aux + 40],   eax      ;Guardo EAX
   176 0000015D 890D[2C000000]              mov [TSS_aux + 44],   ecx      ;Guardo ECX
   177 00000163 8915[30000000]              mov [TSS_aux + 48],   edx      ;Guardo EDX
   178 00000169 891D[34000000]              mov [TSS_aux + 52],   ebx      ;Guardo EBX
   179                                      ;mov [TSS_aux + 56],  esp      ;Guardo ESP
   180 0000016F 892D[3C000000]              mov [TSS_aux + 60],   ebp      ;Guardo EBP 
   181 00000175 8935[40000000]              mov [TSS_aux + 64],   esi      ;Guardo ESI
   182 0000017B 893D[44000000]              mov [TSS_aux + 68],   edi      ;Guardo EDI 
   183                                      ;Registros de Segmento
   184 00000181 8C05[48000000]              mov [TSS_aux + 72],   es       ;Guardo ES
   185                                      ;mov [TSS_aux + 76],  cs        ;Guardo CS        
   186                                      ;mov [TSS_aux + 80],  ss      ;Guardo SS
   187 00000187 8C1D[54000000]              mov [TSS_aux + 84],   ds       ;Guardo DS   
   188 0000018D 8C25[58000000]              mov [TSS_aux + 88],   fs       ;Guardo FS       
   189 00000193 8C2D[5C000000]              mov [TSS_aux + 92],   gs       ;Guardo GS    
   190 00000199 0F20D8                      mov eax, cr3                  ;Guardo CR3
   191 0000019C A3[1C000000]                mov [TSS_aux + 28],   eax 
   192                                      ;Registros del Stack
   193                                      ; REVISAR CUANTO AGREGARLE AL STACK
   194                                  
   195 000001A1 803D[00000000]01            cmp byte[primer_context_save], 1
   196 000001A8 7420                        je no_guardo_stack_user
   197                                  
   198 000001AA 6687DB                      xchg bx, bx
   199                                  
   200 000001AD 83C40C                      add esp, 12                         ;sumo 12 porque tengo guardados el EIP, CS y EFLAGS del SYSCALL
   201 000001B0 58                          pop eax                             ;al hacer el pop vacio la pila para que no cresca por siempre
   202                                      ;mov eax, [esp + 12]                ;Guardo EIP
   203 000001B1 A3[20000000]                mov [TSS_aux + 32],   eax  
   204 000001B6 58                          pop eax
   205                                      ;mov eax, [esp + 20]                ;Guardo EFLAGS
   206 000001B7 A3[24000000]                mov [TSS_aux + 36],   eax  
   207 000001BC 58                          pop eax                             ;Guardo ESP2      
   208 000001BD A3[14000000]                mov [TSS_aux + 20],   eax
   209 000001C2 58                          pop eax                             ;Guardo SS2      
   210 000001C3 A3[18000000]                mov [TSS_aux + 24],   eax
   211                                  
   212                                      ; REVISAR QUE HACE FALTA AGREGAR. HAY QUE VER COMO LLEGA.
   213                                  
   214 000001C8 EB26                        jmp fin_guardar_contexto
   215                                  
   216                                  no_guardo_stack_user:
   217                                  
   218                                      ;xchg bx, bx
   219                                  
   220 000001CA 8B0424                      mov eax, [esp]
   221 000001CD A3[20000000]                mov [TSS_aux + 32],   eax      ; Guardo EIP
   222 000001D2 8B442404                    mov eax, [ esp + 4 ]
   223 000001D6 A3[4C000000]                mov [TSS_aux + 76],   eax      ; Guardo CS
   224 000001DB 8B442408                    mov eax, [ esp + 8 ]
   225 000001DF A3[24000000]                mov [TSS_aux + 36],   eax      ; Guardo EFLAGS
   226 000001E4 8C15[08000000]              mov [TSS_aux + 8],    ss       ; Guardo SS0
   227 000001EA 8925[04000000]              mov [TSS_aux + 4],    esp      ; Guardo ESP0 
   228                                  
   229                                  fin_guardar_contexto:
   230 000001F0 E9(00000000)                jmp return_guardar_contexto
   231                                  
   232                                          
   233                                  cargar_TSS_CPU:
   234                                  
   235 000001F5 8B5C2404                    mov ebx, [esp + 4]
   236                                  
   237                                      ;backlink
   238 000001F9 8B03                        mov eax, [ebx]
   239 000001FB A3[00000000]                mov [__TSS_BASICA], eax 
   240                                      ;ESP0
   241 00000200 8B4304                      mov eax, [ebx+0x04]
   242 00000203 A3[04000000]                mov [__TSS_BASICA+0x04], eax
   243                                      ;SS0
   244 00000208 8B4308                      mov eax, [ebx+0x08]
   245 0000020B A3[08000000]                mov [__TSS_BASICA+0x08], eax
   246                                      ;ESP1
   247 00000210 8B430C                      mov eax, [ebx+0x0C]
   248 00000213 A3[0C000000]                mov [__TSS_BASICA+0x0C], eax 
   249                                      ;SS1
   250 00000218 8B4310                      mov eax, [ebx+0x10]
   251 0000021B A3[10000000]                mov [__TSS_BASICA+0x10], eax
   252                                      ;ESP2
   253 00000220 8B4314                      mov eax, [ebx+0x14]
   254 00000223 A3[14000000]                mov [__TSS_BASICA+0x14], eax 
   255                                      ;SS2
   256 00000228 8B4318                      mov eax, [ebx+0x18]
   257 0000022B A3[18000000]                mov [__TSS_BASICA+0x18], eax 
   258                                      ;CR3
   259 00000230 8B431C                      mov eax, [ebx+0x1C]
   260 00000233 A3[1C000000]                mov [__TSS_BASICA+0x1C], eax
   261                                      ;EIP
   262 00000238 8B4320                      mov eax, [ebx+0x20]
   263 0000023B A3[20000000]                mov [__TSS_BASICA+0x20], eax 
   264                                      ;EFLAGS
   265 00000240 8B4324                      mov eax, [ebx+0x24]
   266 00000243 A3[24000000]                mov [__TSS_BASICA+0x24], eax 
   267                                      ;EAX
   268 00000248 8B4328                      mov eax, [ebx+0x28]
   269 0000024B A3[28000000]                mov [__TSS_BASICA+0x28], eax 
   270                                      ;ECX
   271 00000250 8B432C                      mov eax, [ebx+0x2C]
   272 00000253 A3[2C000000]                mov [__TSS_BASICA+0x2C], eax 
   273                                      ;EDX
   274 00000258 8B4330                      mov eax, [ebx+0x30]
   275 0000025B A3[30000000]                mov [__TSS_BASICA+0x30], eax 
   276                                      ;EBX
   277 00000260 8B4334                      mov eax, [ebx+0x34]
   278 00000263 A3[34000000]                mov [__TSS_BASICA+0x34], eax 
   279                                      ;ESP
   280 00000268 8B4338                      mov eax, [ebx+0x38]
   281 0000026B A3[38000000]                mov [__TSS_BASICA+0x38], eax
   282                                      ;EBP
   283 00000270 8B433C                      mov eax, [ebx+0x3C]
   284 00000273 A3[3C000000]                mov [__TSS_BASICA+0x3C], eax
   285                                      ;ESI
   286 00000278 8B4340                      mov eax, [ebx+0x40]
   287 0000027B A3[40000000]                mov [__TSS_BASICA+0x40], eax
   288                                      ;EDI
   289 00000280 8B4344                      mov eax, [ebx+0x44]
   290 00000283 A3[44000000]                mov [__TSS_BASICA+0x44], eax
   291                                      ;ES
   292 00000288 8B4348                      mov eax, [ebx+0x48]
   293 0000028B A3[48000000]                mov [__TSS_BASICA+0x48], eax
   294                                      ;CS
   295 00000290 8B434C                      mov eax, [ebx+0x4C]
   296 00000293 A3[4C000000]                mov [__TSS_BASICA+0x4C], eax
   297                                      ;SS
   298 00000298 8B4350                      mov eax, [ebx+0x50]
   299 0000029B A3[50000000]                mov [__TSS_BASICA+0x50], eax
   300                                      ;DS
   301 000002A0 8B4354                      mov eax, [ebx+0x54]
   302 000002A3 A3[54000000]                mov [__TSS_BASICA+0x54], eax
   303                                      ;FS
   304 000002A8 8B4358                      mov eax, [ebx+0x58]
   305 000002AB A3[58000000]                mov [__TSS_BASICA+0x58], eax
   306                                      ;GS
   307 000002B0 8B435C                      mov eax, [ebx+0x5C]
   308 000002B3 A3[5C000000]                mov [__TSS_BASICA+0x5C], eax
   309                                      ;LDTR
   310 000002B8 8B4360                      mov eax, [ebx+0x60]
   311 000002BB A3[60000000]                mov [__TSS_BASICA+0x60], eax
   312                                      ;Bitmap E/S
   313 000002C0 8B4364                      mov eax, [ebx+0x64]
   314 000002C3 A3[64000000]                mov [__TSS_BASICA+0x64], eax
   315                                  
   316 000002C8 C3                          ret
