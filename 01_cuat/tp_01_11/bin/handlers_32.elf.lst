     1                                  USE32
     2                                  
     3                                  %include "inc/functions_asm.h"
     1                              <1> ;----------------PIC----------------------------
     2                              <1> %define PORT_A_8042    0x60
     3                              <1> %define CTRL_PORT_8042 0x64
     4                              <1> %define KEYB_DIS       0xAD
     5                              <1> %define KEYB_EN        0xAE
     6                              <1> %define READ_OUT_8042  0xD0
     7                              <1> %define WRITE_OUT_8042 0xD1
     8                              <1> 
     4                                  %include "inc/processor-flags.h" 
     1                              <1> %define X86_CR0_PE      0x00000001 ; /* Protectede mode enable*/
     2                              <1> %define X86_CR0_MP      0x00000002 ; /* Monitor coProcessor*/
     3                              <1> %define X86_CR0_EM      0x00000004 ; /* Emulation*/
     4                              <1> %define X86_CR0_TS      0x00000008 ; /* Task Switched*/
     5                              <1> %define X86_CR0_ET      0x00000010 ; /* Extension Type*/
     6                              <1> %define X86_CR0_NE      0x00000020 ; /* Numeric Error*/
     7                              <1> %define X86_CR0_WP      0x00010000 ; /* Write Protect*/
     8                              <1> %define X86_CR0_AM      0x00040000 ; /* Alignment Mask*/
     9                              <1> %define X86_CR0_NW      0x20000000 ; /* Not Write-through*/
    10                              <1> %define X86_CR0_CD      0x40000000 ; /* Cache Disable*/
    11                              <1> %define X86_CR0_PG      0x80000000 ; /* PaGine*/
    12                              <1> %define flag_TSS_sup    1
    13                              <1> %define flag_TSS_us     0
    14                              <1> 
    15                              <1> ;------------DTP y TP(Descriptor de Tablas de Páginas y Tabla de Páginas) flags--------------------------
    16                              <1> PAG_PCD_YES  equ 1       ; cachable                          
    17                              <1> PAG_PCD_NO   equ 0       ; no cachable
    18                              <1> PAG_PWT_YES  equ 1       ; 1 se escribe en cache y ram       
    19                              <1> PAG_PWT_NO   equ 0       ; 0 
    20                              <1> PAG_P_YES    equ 1       ; 1 presente
    21                              <1> PAG_P_NO     equ 0       ; 0 no presente
    22                              <1> PAG_RW_W     equ 1       ; 1 lectura y escritura
    23                              <1> PAG_RW_R     equ 0       ; 0 solo lectura
    24                              <1> PAG_US_SUP   equ 0       ; 0 supervisor
    25                              <1> PAG_US_US    equ 1       ; 1 usuario  
    26                              <1> PAG_D        equ 0       ; modificacion en la pagina
    27                              <1> PAG_PAT      equ 0       ; PAT                   
    28                              <1> PAG_G_YES    equ 0       ; Global                 
    29                              <1> PAG_A        equ 0       ; accedida
    30                              <1> PAG_PS_4K    equ 0       ; tamaño de pagina de 4KB
    31                              <1> 
     5                                  
     6                                  ;----------------EXTERN SELECTORES--------------------
     7                                  EXTERN DS_SEL_32
     8                                  EXTERN CS_SEL_32
     9                                  ;---------------EXTERN LINKER------------------------
    10                                  EXTERN __TECLADO_ISR_VMA
    11                                  EXTERN __VGA_VMA
    12                                  EXTERN __DIGITS_TABLE_INIT
    13                                  EXTERN __PAG_DINAMICA_INIT_PHY
    14                                  EXTERN __DIGITS_TABLE_VMA
    15                                  EXTERN __PAG_DINAMICA_INIT_VMA
    16                                  EXTERN __PAGE_TABLES_PHY
    17                                  ;----------------EXTERN FUNCIONES--------------------
    18                                  EXTERN determinar_tecla_presionada
    19                                  EXTERN scheduler_c
    20                                  EXTERN escribir_mensaje_VGA
    21                                  EXTERN limpiar_VGA
    22                                  EXTERN mostrar_numero32_VGA
    23                                  EXTERN set_page_table_entry
    24                                  EXTERN set_dir_page_table_entry
    25                                  EXTERN determinar_TSS_a_guardar
    26                                  EXTERN leer_contexto_siguiente_asm
    27                                  EXTERN guardar_contexto_asm
    28                                  EXTERN determinar_TSS_a_leer
    29                                  EXTERN determinar_TSS_a_guardar
    30                                  EXTERN leer_contexto_siguiente_asm
    31                                   
    32                                  ;---------------EXTERN VARIABLES GLOBALES-----------
    33                                  EXTERN memoria_buffer_reservada
    34                                  EXTERN contador_timer
    35                                  EXTERN dir_lineal_page_fault
    36                                  EXTERN dir_phy_dinamica
    37                                  EXTERN resultado_promedio
    38                                  EXTERN error_code_PF
    39                                  EXTERN paginas_creadas
    40                                  EXTERN page_fault_msg
    41                                  EXTERN page_fault_msg_2
    42                                  EXTERN page_fault_msg_3
    43                                  EXTERN page_fault_msg_4
    44                                  EXTERN page_fault_msg_5
    45                                  EXTERN page_fault_msg_6
    46                                  EXTERN tarea_RUNNING
    47                                  EXTERN tarea_READY
    48                                  EXTERN tarea_SUSPENDING
    49                                  EXTERN primer_context_save
    50                                  ;----------------GLOBAL--------------------
    51                                  GLOBAL L_ISR00_Handler_DE
    52                                  GLOBAL L_ISR02_Handler_NMI
    53                                  GLOBAL L_ISR03_Handler_BP
    54                                  GLOBAL L_ISR04_Handler_OF
    55                                  GLOBAL L_ISR05_Handler_BR
    56                                  GLOBAL L_ISR06_Handler_UD
    57                                  GLOBAL L_ISR07_Handler_NM
    58                                  GLOBAL L_ISR08_Handler_DF
    59                                  GLOBAL L_ISR10_Handler_TS
    60                                  GLOBAL L_ISR11_Handler_NP
    61                                  GLOBAL L_ISR12_Handler_SS
    62                                  GLOBAL L_ISR13_Handler_GP
    63                                  GLOBAL L_ISR14_Handler_PF
    64                                  GLOBAL L_ISR16_Handler_MF
    65                                  GLOBAL L_ISR17_Handler_AC
    66                                  GLOBAL L_ISR18_Handler_MC
    67                                  GLOBAL L_ISR19_Handler_XM
    68                                  GLOBAL L_IRQ00_Handler
    69                                  GLOBAL L_IRQ01_Handler
    70                                  GLOBAL L_ISR128_Handler_SC
    71                                  GLOBAL return_guardar_contexto
    72                                  GLOBAL return_leer_contexto
    73                                  ;----------------EQU--------------------
    74                                  VMA_ISR_TECLADO     EQU 0x00100000
    75                                  ; Parte baja de las direcciones de los Handlers 
    76                                  L_ISR00_Handler_DE  EQU ISR00_Handler_DE    - VMA_ISR_TECLADO 
    77                                  L_ISR01_Handler_DB  EQU ISR01_Handler_DB    - VMA_ISR_TECLADO 
    78                                  L_ISR02_Handler_NMI EQU ISR02_Handler_NMI   - VMA_ISR_TECLADO 
    79                                  L_ISR03_Handler_BP  EQU ISR03_Handler_BP    - VMA_ISR_TECLADO 
    80                                  L_ISR04_Handler_OF  EQU ISR04_Handler_OF    - VMA_ISR_TECLADO 
    81                                  L_ISR05_Handler_BR  EQU ISR05_Handler_BR    - VMA_ISR_TECLADO 
    82                                  L_ISR06_Handler_UD  EQU ISR06_Handler_UD    - VMA_ISR_TECLADO 
    83                                  L_ISR07_Handler_NM  EQU ISR07_Handler_NM    - VMA_ISR_TECLADO 
    84                                  L_ISR08_Handler_DF  EQU ISR08_Handler_DF    - VMA_ISR_TECLADO   
    85                                  L_ISR10_Handler_TS  EQU ISR10_Handler_TS    - VMA_ISR_TECLADO 
    86                                  L_ISR11_Handler_NP  EQU ISR11_Handler_NP    - VMA_ISR_TECLADO 
    87                                  L_ISR12_Handler_SS  EQU ISR12_Handler_SS    - VMA_ISR_TECLADO 
    88                                  L_ISR13_Handler_GP  EQU ISR13_Handler_GP    - VMA_ISR_TECLADO 
    89                                  L_ISR14_Handler_PF  EQU ISR14_Handler_PF    - VMA_ISR_TECLADO 
    90                                  L_ISR16_Handler_MF  EQU ISR16_Handler_MF    - VMA_ISR_TECLADO 
    91                                  L_ISR17_Handler_AC  EQU ISR17_Handler_AC    - VMA_ISR_TECLADO 
    92                                  L_ISR18_Handler_MC  EQU ISR18_Handler_MC    - VMA_ISR_TECLADO 
    93                                  L_ISR19_Handler_XM  EQU ISR19_Handler_XM    - VMA_ISR_TECLADO 
    94                                  L_IRQ00_Handler     EQU IRQ00_Handler       - VMA_ISR_TECLADO
    95                                  L_IRQ01_Handler     EQU IRQ01_Handler       - VMA_ISR_TECLADO
    96                                  L_ISR128_Handler_SC EQU ISR128_Handler_SC   - VMA_ISR_TECLADO
    97                                  
    98                                  ;----------------SECTION-----------------------
    99                                  SECTION .teclado_and_ISR
   100                                  ;------------ HANDLER IRQ TIMER---------------------
   101                                  IRQ00_Handler:
   102                                      ;xchg    bx, bx                              ; Breakpoint
   103                                  
   104 00000000 60                          pushad                                      ; Salvo los registros de uso general.
   105                                      
   106 00000001 55                          push    ebp
   107 00000002 89E5                        mov     ebp, esp 
   108                                      ;push contador_timer                         ; Contador del Timer actual              
   109                                      ;push __DIGITS_TABLE_VMA                    ; Dir. de tabla de dígitos
   110                                      ;push resultado_promedio                    ; Resultado del prom. cada 500ms
   111 00000004 E8(00000000)                call scheduler_c                            ; Cada 10 ms el tick
   112 00000009 C9                          leave
   113                                  
   114                                      ;xchg    bx, bx                              ; Breakpoint
   115                                  
   116                                      ; Si la tarea en ejecución es igual a la próxima tarea, no hago nada.
   117 0000000A 31C0                        xor     eax, eax
   118 0000000C 31DB                        xor     ebx, ebx
   119 0000000E A0[00000000]                mov     al, byte [tarea_RUNNING]
   120 00000013 8A1D[00000000]              mov     bl, byte [tarea_READY]
   121 00000019 38D8                        cmp     al, bl
   122 0000001B 7434                        je      pop_registros
   123                                  
   124                                  
   125                                      ; Determino base de la TSS donde se guardará el contexto de ejecución actual
   126 0000001D 55                          push    ebp
   127 0000001E 89E5                        mov     ebp, esp
   128 00000020 68[00000000]                push    tarea_SUSPENDING
   129 00000025 E8(00000000)                call    determinar_TSS_a_guardar
   130 0000002A C9                          leave
   131                                  
   132                                      ; Guardo contexto de ejecución del programa que estaba corriendo antes de interrumpir el Timer
   133 0000002B E9(00000000)                jmp guardar_contexto_asm
   134                                  return_guardar_contexto:
   135                                  
   136                                      ; Determino base de la TSS del contexto de ejec. a leer de memoria para próxima tarea a ejecutarse
   137 00000030 55                          push    ebp
   138 00000031 89E5                        mov     ebp, esp
   139 00000033 68[00000000]                push    tarea_READY
   140 00000038 E8(00000000)                call    determinar_TSS_a_leer
   141 0000003D C9                          leave
   142                                  
   143                                       ; Leo contexto de ejecución para la próxima tarea y se lo asigno a la TSS del CPU.
   144 0000003E E9(00000000)                jmp leer_contexto_siguiente_asm
   145                                  
   146                                  return_leer_contexto:
   147                                  
   148                                      ;xchg bx, bx
   149                                  
   150                                      ; La tarea está en condiciones de pasar de READY a RUNNING
   151 00000043 31C0                        xor eax, eax
   152 00000045 A0[00000000]                mov al, byte [tarea_READY]
   153 0000004A A2[00000000]                mov byte [tarea_RUNNING], al
   154 0000004F EB01                        jmp end_handler_timer
   155                                  
   156                                  pop_registros:
   157 00000051 61                          popad                                       ; Recupero registros
   158                                  
   159                                  end_handler_timer:
   160 00000052 B020                        mov al, 0x20                                ; ACK de la IRQ para el PIC 
   161 00000054 E620                        out 0x20, al
   162 00000056 CF                          iret                                        ; Retorno de la IRQ
   163                                  
   164                                  ;----------HANDLER IRQ TECLADO-----------------
   165                                  IRQ01_Handler:
   166 00000057 60                          pushad                                      ; Guardo todos los registros  para asegurarme que no se rompa el estado actual.
   167 00000058 B221                        mov     dl,0x21                             ; Guardo la interrupcion en el registro DX
   168 0000005A 31C0                        xor     eax, eax
   169                                      ; ->Leo el puerto
   170 0000005C E460                        in      al, PORT_A_8042                     ; Leo el puerto 0x60 (Keyboard Output Buffer Register)
   171 0000005E 88C3                        mov     bl, al                              ; Copio lo leído en otro registro
   172 00000060 80E380                      and     bl, 0x80                            ; Hago un AND para obtener el bit 7 (BRK)
   173 00000063 80FB80                      cmp     bl, 0x80                            ; Si el bit vale 0 la tecla fue presionada (Make), si es 1 se dejó de presionar (Break)
   174 00000066 740E                        jz      end_handler_teclado                 ; Si se dejo de presionar, no la leo. Solo leo cuando se presionada (Make)
   175 00000068 68[00000000]                push    dword memoria_buffer_reservada      ; Buffer en VMA
   176 0000006D 50                          push    eax                                 ; Tecla presionada.
   177 0000006E E8(00000000)                call determinar_tecla_presionada
   178 00000073 83C408                      add     esp, 8
   179                                  
   180                                  end_handler_teclado:
   181                                      ;xchg    bx, bx                              ; Breakpoint
   182 00000076 B020                        mov     al, 0x20                             ; ACK de la IRQ para el PIC 
   183 00000078 E620                        out     0x20, al
   184 0000007A 61                          popad                                        ; Recupero registros
   185 0000007B CF                          iret                                         ; Retorno de la IRQ
   186                                  
   187                                  ;-----------HANDLERs DE EXCEPTIONS-------------
   188                                  ;#DE (Divide Error)
   189                                  ISR00_Handler_DE:
   190 0000007C 6687DB                      xchg    bx,bx
   191 0000007F B200                        mov     dl,0x00
   192 00000081 F4                          hlt
   193                                  
   194                                  ISR01_Handler_DB:
   195 00000082 6687DB                      xchg    bx,bx
   196 00000085 B201                        mov dl,0x01
   197 00000087 F4                          hlt
   198                                  
   199                                  ISR02_Handler_NMI:
   200 00000088 6687DB                      xchg    bx,bx
   201 0000008B B202                        mov dl,0x02
   202 0000008D F4                          hlt
   203                                  
   204                                  ISR03_Handler_BP:
   205 0000008E 6687DB                      xchg    bx,bx
   206 00000091 B203                        mov dl,0x03
   207 00000093 F4                          hlt
   208                                  
   209                                  ISR04_Handler_OF:
   210 00000094 6687DB                      xchg    bx,bx
   211 00000097 B204                        mov dl,0x04
   212 00000099 F4                          hlt
   213                                  
   214                                  ISR05_Handler_BR:
   215 0000009A 6687DB                      xchg    bx,bx
   216 0000009D B205                        mov dl,0x05
   217 0000009F F4                          hlt
   218                                  ;#UD (Invalid Opcode Fetch) 
   219                                  ISR06_Handler_UD:
   220 000000A0 6687DB                      xchg    bx,bx
   221 000000A3 B206                        mov     dl,0x06
   222 000000A5 F4                          hlt
   223                                  
   224                                  ISR07_Handler_NM:
   225 000000A6 6687DB                      xchg    bx,bx
   226 000000A9 B207                        mov dl,0x07
   227 000000AB F4                          hlt
   228                                  
   229                                  ISR08_Handler_DF:
   230 000000AC 6687DB                      xchg    bx,bx
   231 000000AF B208                        mov dl,0x08
   232 000000B1 F4                          hlt
   233                                  
   234                                  ISR10_Handler_TS:
   235 000000B2 6687DB                      xchg    bx,bx
   236 000000B5 B20A                        mov dl,0x0A
   237 000000B7 F4                          hlt
   238                                  
   239                                  ISR11_Handler_NP:
   240 000000B8 6687DB                      xchg    bx,bx
   241 000000BB B20B                        mov dl,0x0B
   242 000000BD F4                          hlt
   243                                  
   244                                  ISR12_Handler_SS:
   245 000000BE 6687DB                      xchg    bx,bx
   246 000000C1 B20C                        mov dl,0x0C
   247 000000C3 F4                          hlt
   248                                  ; Funciono al no tener el CS al retornar de un call
   249                                  ISR13_Handler_GP:
   250 000000C4 6687DB                      xchg    bx,bx
   251 000000C7 B20D                        mov dl,0x0D
   252 000000C9 CF                          iretd
   253                                  ;-----------------------------------
   254                                  ;----------Page Fault (#PF)---------
   255                                  ;-----------------------------------
   256                                  
   257                                  ;Error code
   258                                  ;The Page Fault sets an error code:
   259                                  ;
   260                                  ; 31              4               0
   261                                  ;+---+--  --+---+---+---+---+---+---+
   262                                  ;|   Reserved   | I | R | U | W | P |
   263                                  ;+---+--  --+---+---+---+---+---+---+
   264                                  ;Length	Name	Description
   265                                  ;P	1 bit	Present	When set, the page fault was caused by a page-protection violation. When not set, it was caused by a non-present page.
   266                                  ;W	1 bit	Write	When set, the page fault was caused by a write access. When not set, it was caused by a read access.
   267                                  ;U	1 bit	User	When set, the page fault was caused while CPL = 3. This does not necessarily mean that the page fault was a privilege violation.
   268                                  ;R	1 bit	Reserved write	When set, one or more page directory entries contain reserved bits which are set to 1. This only applies when the PSE or PAE flags in CR4 are set to 1.
   269                                  ;I	1 bit	Instruction Fetch	When set, the page fault was caused by an instruction fetch. This only applies when the No-Execute bit is supported and enabled.
   270                                  ISR14_Handler_PF:
   271 000000CA FA                          cli                                     ; Deshabilito interrupciones.
   272 000000CB 60                          pushad                                  ; Guardo registros.
   273 000000CC 8B5C2420                    mov     ebx, [esp + 32]                 ; Guardo el Error Code. 
   274 000000D0 891D[00000000]              mov     [error_code_PF], ebx
   275 000000D6 0F20D0                      mov     eax, cr2
   276 000000D9 A3[00000000]                mov     [dir_lineal_page_fault], eax    ; Guardo dir. lineal VMA que falló
   277                                      ; -> Limpio pantalla.
   278 000000DE 55                          push    ebp
   279 000000DF 89E5                        mov     ebp, esp
   280 000000E1 68[00000000]                push    __VGA_VMA
   281 000000E6 E8(00000000)                call    limpiar_VGA                     
   282 000000EB C9                          leave
   283                                      ; -> Escribo mensaje de Page Fault.
   284 000000EC 55                          push    ebp
   285 000000ED 89E5                        mov     ebp, esp
   286 000000EF 6A01                        push    1       ; Es ASCII
   287 000000F1 6A0A                        push    10      ; Columna VGA
   288 000000F3 6A00                        push    0       ; Fila    VGA
   289 000000F5 68[00000000]                push    page_fault_msg
   290 000000FA E8(00000000)                call    escribir_mensaje_VGA
   291 000000FF C9                          leave
   292                                       ; -> Escribo mensaje "La dir VMA es"
   293 00000100 55                          push    ebp
   294 00000101 89E5                        mov     ebp, esp
   295 00000103 6A01                        push    1       ; Es ASCII
   296 00000105 6A0A                        push    10      ; Columna VGA
   297 00000107 6A01                        push    1       ; Fila    VGA
   298 00000109 68[00000000]                push    page_fault_msg_2
   299 0000010E E8(00000000)                call    escribir_mensaje_VGA
   300 00000113 C9                          leave
   301                                      ; -> Muestro la dir VMA no mapeada en PHY
   302 00000114 55                          push    ebp
   303 00000115 89E5                        mov     ebp, esp
   304 00000117 6A1E                        push    30      ; Columna VGA
   305 00000119 6A01                        push    1       ; Fila VGA
   306 0000011B FF35[00000000]              push    dword[dir_lineal_page_fault]
   307 00000121 E8(00000000)                call    mostrar_numero32_VGA
   308 00000126 C9                          leave
   309                                      ; -> Muestro el mensaje "Error Code:"
   310 00000127 55                          push    ebp
   311 00000128 89E5                        mov     ebp, esp
   312 0000012A 6A0A                        push    10      ; Columna VGA
   313 0000012C 6A02                        push    2       ; Fila VGA
   314 0000012E 68[00000000]                push    page_fault_msg_3
   315 00000133 E8(00000000)                call    escribir_mensaje_VGA
   316 00000138 C9                          leave
   317                                      ; -> Muestro el valor del Error Code
   318 00000139 55                          push    ebp
   319 0000013A 89E5                        mov     ebp, esp
   320 0000013C 6A1E                        push    30      ; Columna VGA
   321 0000013E 6A02                        push    2       ; Fila VGA
   322 00000140 FF35[00000000]              push    dword[error_code_PF]
   323 00000146 E8(00000000)                call    mostrar_numero32_VGA
   324 0000014B C9                          leave
   325                                  
   326                                      ;xchg    bx, bx 
   327                                      ; -> Analizo el Error Code
   328                                      ; Si es una Pagina no presente (Bit 0 = 0) debe repaginar.
   329 0000014C 83E31F                      and ebx, 0x1F   ; Bits 0 - 5 donde tengo los flags.
   330 0000014F 83FB00                      cmp ebx, 0x00
   331 00000152 740A                        je pag_no_presente
   332 00000154 83FB02                      cmp ebx, 0x02
   333 00000157 7405                        je write_access
   334 00000159 E9D1000000                  jmp end_handler_PF
   335                                  pag_no_presente:
   336                                  write_access:
   337                                      ;xchg  bx, bx
   338                                  
   339                                      ;---------------------------------------------------
   340                                      ; -> -----------Guardo VMA de falla y Dir. Fisica en GPRs
   341                                      ;----------para poder re-paginar con la paginacion apagada-----------------
   342                                      ;---------------------------------------------------
   343                                      ; ->Guardo en edx la VMA de falla del CR2
   344 0000015E 31D2                        xor   edx, edx
   345 00000160 8B15[00000000]              mov   edx, [dir_lineal_page_fault] 
   346                                      ; ->Guardo en ecx la Dir. Fisica dinamica
   347 00000166 31C9                        xor   ecx, ecx
   348 00000168 8B0D[00000000]              mov   ecx, [dir_phy_dinamica] 
   349                                      ;---------------------------------------------------
   350                                      ; -> -----------Apago la paginación-----------------
   351                                      ;---------------------------------------------------
   352 0000016E 31C0                        xor   eax, eax
   353 00000170 0F20C0                      mov   eax, cr0 
   354 00000173 25FFFFFF7F                  and   eax, 0x7FFFFFFF
   355 00000178 0F22C0                      mov   cr0, eax
   356                                      ; -> Debo realizar la paginación para la VMA que falló y 
   357                                      ; para la PHY 0x0A000000
   358                                      ; -> Cargo el PDE (Page Directory Entry) - De no existir, lo crea.
   359 0000017B 52                          push    edx                                 ; Guardo edx (VMA de falla del CR2)
   360 0000017C 51                          push    ecx                                 ; Guardo ecx (Dir. Fisica dinamica)
   361                                  
   362 0000017D 55                          push    ebp
   363 0000017E 89E5                        mov     ebp, esp
   364 00000180 6A01                        push    PAG_P_YES                           ; Presente: Indica si la página está en la memoria (P=1), generando una excepción #PF cuando se intenta acceder a una dirección de memoria que tiene al menos un de
   365 00000182 6A01                        push    PAG_RW_W                            ; Readable / Writable: Establece si la página es Read Only (0) o si puede ser escrita (1).
   366 00000184 6A00                        push    PAG_US_SUP                          ; User / Supervisor: Privilegio de la P´agina: ’0’ Supervisor (Kernel), y ’1’ Usuario.
   367 00000186 6A00                        push    PAG_PWT_NO                          ; Page-Level Write Through. Establece el modo de escritura que tendrá la página en el Cache.
   368 00000188 6A00                        push    PAG_PCD_NO                          ; Page-Level Cache Disable. Establece que una página integre el tipo de memoria no cacheable.
   369 0000018A 6A00                        push    PAG_A                               ; Accedido. Se setea cada vez que la página es accedida.
   370 0000018C 6A00                        push    PAG_PS_4K                           ; Page Size: Existe solo en el DPT. Si es ’0’ la PDE corresponde a una PT de 4 Kbytes. Si es ’1’ a una página de 4Mbytes.
   371 0000018E 52                          push    edx                                 ; Dir. Lineal VMA que produjo el #PF y traje del CR2. 
   372 0000018F 68[00000000]                push    dword __PAGE_TABLES_PHY             ; Dir. Fisica(PHY) - Base de la DPT.
   373 00000194 E8(00000000)                call    set_dir_page_table_entry
   374 00000199 C9                          leave
   375                                  
   376 0000019A 59                          pop    ecx                                  ; Leo ecx
   377 0000019B 5A                          pop    edx                                  ; Leo edx
   378                                  
   379                                      ; -> Cargo la PTE (Page Table Entry)
   380 0000019C 55                          push    ebp
   381 0000019D 89E5                        mov     ebp, esp
   382 0000019F 6A01                        push    PAG_P_YES
   383 000001A1 6A01                        push    PAG_RW_W
   384 000001A3 6A00                        push    PAG_US_SUP
   385 000001A5 6A00                        push    PAG_PWT_NO
   386 000001A7 6A00                        push    PAG_PCD_NO
   387 000001A9 6A00                        push    PAG_A
   388 000001AB 6A00                        push    PAG_D
   389 000001AD 6A00                        push    PAG_PAT
   390 000001AF 6A00                        push    PAG_G_YES
   391 000001B1 51                          push    ecx                             ; Dir física dinámica ( se va sumando de a 4K para nuevas páginas)
   392 000001B2 52                          push    edx                             ; Dir. Lineal VMA que produjo el #PF y traje del CR2.
   393 000001B3 68[00000000]                push    dword __PAGE_TABLES_PHY         ; PT inicializada antes de activar paginación.
   394 000001B8 E8(00000000)                call    set_page_table_entry 
   395 000001BD C9                          leave
   396                                  
   397                                      ;---------------------------------------------------
   398                                      ; -> -----------Prendo la paginación-----------------
   399                                      ;---------------------------------------------------
   400 000001BE 31C0                        xor   eax, eax
   401 000001C0 0F20C0                      mov   eax, cr0 
   402 000001C3 0D00000080                  or    eax, X86_CR0_PG
   403 000001C8 0F22C0                      mov   cr0, eax
   404                                  
   405                                      ;xchg    bx, bx 
   406                                      
   407                                      ; -> Analizo valor de la Dir. Fisica.
   408                                      ;xor     eax, eax
   409                                      ;mov     eax,[dir_phy_dinamica]
   410                                      ;and     eax, 0xFFFFF000                 ; 20 bits mas sig. poseen DIR_BASE_PAGE.
   411                                      ; -> Puedo paginar desde 0x1FFF8 a 0xA000 = 0x15FF8 -> 90.104 páginas de 4K.
   412                                      ; Lo limito en 90K páginas y luego las sobreescribo para no romper la memoria.
   413                                      ;cmp     eax, 0x15F90
   414                                      ;jle     resetear_dir_phy_dinamica    ;  0x01200025   dir_phy_dinamica
   415                                  
   416                                  
   417                                      ; -> Sumo 4K para mapear la próx. dir física.
   418 000001CB 31DB                        xor     ebx, ebx
   419 000001CD 8B1D[00000000]              mov     ebx, [dir_phy_dinamica]
   420 000001D3 81C300100000                add     ebx, 0x1000                     ; Sumo 4k a la dir fisica
   421 000001D9 891D[00000000]              mov     [dir_phy_dinamica], ebx
   422                                      ; -> Sumo al contador de páginas de 4K creadas
   423 000001DF 31DB                        xor     ebx, ebx
   424 000001E1 8B1D[00000000]              mov     ebx, [paginas_creadas]
   425 000001E7 83C301                      add     ebx, 0x01
   426 000001EA 891D[00000000]              mov     [paginas_creadas], ebx
   427                                      ; -> Limpio pantalla.
   428 000001F0 55                          push    ebp
   429 000001F1 89E5                        mov     ebp, esp
   430 000001F3 68[00000000]                push    __VGA_VMA
   431 000001F8 E8(00000000)                call    limpiar_VGA                     
   432 000001FD C9                          leave
   433                                      ; -> Muestro el mensaje "Cantidad de paginas de 4k creadas: ."
   434 000001FE 55                          push    ebp
   435 000001FF 89E5                        mov     ebp, esp
   436 00000201 6A2C                        push    44      ; Columna VGA
   437 00000203 6A0C                        push    12       ; Fila VGA
   438 00000205 68[00000000]                push    page_fault_msg_6
   439 0000020A E8(00000000)                call    escribir_mensaje_VGA
   440 0000020F C9                          leave
   441                                       ; -> Muestro el valor de la cantidad de págs. creadas
   442 00000210 55                          push    ebp
   443 00000211 89E5                        mov     ebp, esp
   444 00000213 6A4F                        push    79      ; Columna VGA
   445 00000215 6A0D                        push    13       ; Fila VGA
   446 00000217 FF35[00000000]              push    dword[paginas_creadas]
   447 0000021D E8(00000000)                call    mostrar_numero32_VGA
   448 00000222 C9                          leave
   449                                  
   450 00000223 EB0A                        jmp     end_handler_PF                  ; Finalizo el handler #PF
   451                                  
   452                                  
   453                                  resetear_dir_phy_dinamica:
   454 00000225 C705[00000000]0000-         mov     dword[dir_phy_dinamica], 0x0A000000
   454 0000022D 000A               
   455                                  end_handler_PF:
   456                                     
   457                                      ;xchg    bx, bx                          ; BREAK LUEGO DE PAGINAR.
   458                                  
   459 0000022F 61                          popad                       ; Tomo valores de registros guardados.
   460 00000230 58                          pop eax                     ; Porque me queda un valor para ser popeado y poder retornar con CS:DIR LINEAL al punto donde se produjo el #PF
   461 00000231 FB                          sti                         ; Habilito interrupciones.
   462 00000232 CF                          iret
   463                                  
   464                                  ISR15_Handler_RES:
   465 00000233 6687DB                      xchg    bx,bx
   466 00000236 B20F                        mov dl,0x0F
   467 00000238 F4                          hlt
   468                                  
   469                                  ISR16_Handler_MF:
   470 00000239 6687DB                      xchg    bx,bx
   471 0000023C B210                        mov dl,0x10
   472 0000023E F4                          hlt
   473                                  
   474                                  ISR17_Handler_AC:
   475 0000023F 6687DB                      xchg    bx,bx
   476 00000242 B211                        mov dl,0x11
   477 00000244 F4                          hlt
   478                                  
   479                                  ISR18_Handler_MC:
   480 00000245 6687DB                      xchg    bx,bx
   481 00000248 B212                        mov dl,0x12
   482 0000024A F4                          hlt
   483                                  
   484                                  ISR19_Handler_XM:
   485 0000024B 6687DB                      xchg    bx,bx
   486 0000024E B213                        mov dl,0x13
   487 00000250 F4                          hlt
   488                                  ; System Call Handler
   489                                  ISR128_Handler_SC:
   490                                  
   491                                      ; -> Analizo que sys call fue requerida por la tarea de nivel usuario
   492                                  
   493                                      ;cmp eax, SYS_R
   494                                      ;je sys_read
   495                                  ;
   496                                      ;cmp eax, SYS_P
   497                                      ;je sys_print
   498                                  ;
   499                                      ;cmp eax, SYS_P_VGA
   500                                      ;je sys_print_VGA
   501                                  ;
   502                                      ;cmp eax, SYS_H
   503                                      ;je sys_hlt
   504                                  
   505                                  
   506 00000251 CF                          iret            ; Vuelvo a la tarea de usuario
